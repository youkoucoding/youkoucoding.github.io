<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 技術の手帳</title><link>https://youkoucoding.github.io/post/</link><description>Recent content in Posts on 技術の手帳</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 12 Oct 2021 17:18:24 +0900</lastBuildDate><atom:link href="https://youkoucoding.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>毎日のフロントエンド　26</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/</link><pubDate>Tue, 12 Oct 2021 17:18:24 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/</guid><description>第二十六日 HTML #Question: 解释下你对 GBK 和 UTF-8 的理解？并说说页面上产生乱码的可能原因 GBK 与 UTF-8 之区别
GBK 编码：是指中国的中文字符，其它它包含了简体中文与繁体中文字符 UTF-8 编码：它是一种全国家通过的一种编码，如果你的网站涉及到多个国家的语言 &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;
CSS #Question: 说说对 z-index 的理解 帧元素（frameset) 优先级最高 &amp;raquo;&amp;gt; 表单元素 &amp;gt; 非表单元素，即 input type=&amp;quot;radio&amp;quot; 之类的表单控件 &amp;gt; 普通的如 a,div 等元素。
从有窗口和无窗口元素来分，有窗口元素 &amp;gt; 无窗口元素。有窗口元素如 Select 元素、Object 元素。
z-index 属性也可以改变显示优先级，但只对同种类型的元素才有效。
z-index z 表示三维坐标的 Z 轴。
CSS允许我们对z-index属性设置三种值(绝对定位方案将一个元素从常规流中移除的情况下)
auto (自动，默认值) 整数: 数值越大，元素也就越靠近观察者。 数值越小，元素看起来也就越远 如果有两个元素放在了一起，占据了二维平面上一块共同的区域，那么有着较大 z-index 值的元素就会掩盖或者阻隔有着较低 z-index 值的元素在共同区域的那一部分 inherit Problem 当一个设置了 z-index 值的定位元素与常规文档流中的元素相互重叠的时候，谁会被置于上方？ 当定位元素与浮动元素相互重叠的时候，谁会被置于上方？ 当定位元素被嵌套在其他定位元素中时会发生什么？ Explanation 层叠上下文中的七种层叠等级</description></item><item><title>毎日のフロントエンド　25</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/</link><pubDate>Mon, 11 Oct 2021 16:07:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/</guid><description>第二十五日 HTML #Question: 请说说&amp;lt;script&amp;gt;、&amp;lt;script async&amp;gt;和&amp;lt;script defer&amp;gt;的区别 script deference
&amp;lt;script&amp;gt; : 加载的时候是同步的会阻塞后面代码的执行，加载立即执行 &amp;lt;script async&amp;gt;: 异步加载，加载和执行是并行的 &amp;lt;script defer&amp;gt;: 异步加载，需等到所有文档加载完才执行 async defer这两个属性无法应用于内联script The modern websites, scripts are often &amp;ldquo;heavier&amp;rdquo; than HTML: their download size is larger, anb processing time is also longer.
Scripts with defer never block the page Scripts with defer always execute when the DOM is ready(but before DOMContentLoaded event). The async attribute means that a script is completely independent:</description></item><item><title>毎日のフロントエンド　24</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/</link><pubDate>Sat, 09 Oct 2021 23:29:09 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/</guid><description>第二十四日 HTML #Question: 说说你对属性 data-的理解 data-*1 是HTML5新增的自定义属性，可以用来页面间跳转时携带数据
data-* 便是 HTML5 中用来存放数据的标签。使用 data-* 时，data- 之后的单词必须是小写的，但是可以用多个 - 连接。而在对应的 DOM 方法中，我们可以通过 element.dataset[属性名] 进行访问。在这里的属性名可以使用驼峰（转换规则和 vue 的组件名称转换一样）。
相比之前的自定义属性存放数据，使用 data-* 的方法，在数据的获取上会比较方便
CSS #Question: 有用过 CSS 预处理器吗？喜欢用哪个？原理是什么？ CSS预处理器 可使CSS具备更加简洁、适应性更强、可读性更强、层级关系更加明显、更易于代码的维护等诸多好处。 CSS 预处理器种类繁多，目前Sass、Less、用的比较多:
嵌套：反映层级和约束 变量和计算： 减少重复代码 Extend 和 Mixin 代码片段 (用的少) 循环：适用于复杂有规律的样式 import css 文件模块化 JavaScript #Question: 如何快速让一个数组乱序，写出来 使用array.sort()进行乱序存在一定问题，增大样本进行实验之后可以发现这种乱序方案并不是完全随机的（所有元素会大概率停留在自己的初始位置）（v8 处理排序是小于 10 个是插入排序，大于 10 个是快排，排序算法复杂度介于 O(n)与 O(n2)之间，也就是存在两个元素都没有比较的机会，因此不是完全随机），这里可以使用Fisher–Yates shuffle（洗牌算法）
let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; arr.</description></item><item><title>Currying in JavaScript (カリー化 &amp; 柯里化)</title><link>https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/</link><pubDate>Sat, 09 Oct 2021 15:24:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/</guid><description>Currying in JavaSctipt Functional programming is a style of programming that attempts to pass functions as arguments(callbacks) and return functions without side-effects(changes to the program&amp;rsquo;s state).
So many languages adopted this programming style. Javascript, Haskell, Erlang, Clojure, and Scala are the most popular among them.
And with its ability to pass the return functions, it brought so many conscepts: Pure Functions, Currying, Higher-Order functions.
What is Currying? Currying is a process in functionnal programming in which we can transform a function with multiple arguments into a sequence of nesting functions.</description></item><item><title>毎日のフロントエンド　23</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/</link><pubDate>Fri, 08 Oct 2021 22:28:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/</guid><description>第二十三日 HTML #Question: 关于&amp;lt;form&amp;gt;标签的 enctype 属性你有哪些了解 form 标签的 enctype(是表单提交属性之一) 属性指定将数据回发到服务器时浏览器如果对表单数据进行编码，其有三种编码形式
当 method 属性值为 post 时，enctype 就是将表单的内容提交给服务器的 MIME1 类型 。可能的取值有：
application/x-www-form-urlencoded：未指定属性时的默认值
application/x-www-form-urlencoded 编码类型会将表单中发送到服务器之前都会进行编码(空格转换为 &amp;ldquo;+&amp;rdquo; 加号，特殊符号转换为 ASCII HEX 值)，数据编码成键值对的形式，当表单的 action 为 post 时，它会把 form 数据封装到 http body 中，然后发送到服务器； 当表单的 action 为 get 时，它会把表单中发送的数据转换成一个字符串(如：a=1&amp;amp;b=2&amp;amp;c=3)并使用?连接到 url 后面。在不指定 enctype 属性时 application/x-www-form-urlencoded 是默认属性 multipart/form-data: 不对字符进行编码，在使用包含文件(如图片、mp4 等文件)上传控件的表单时必须使用该值
text/plain: 数据以纯文本格式进行编码，空格转换为 &amp;ldquo;+&amp;rdquo; 加号，但不对特殊字符编码
Example:
&amp;lt;body&amp;gt; &amp;lt;form action=&amp;#34;&amp;#34; enctype=&amp;#34;application/x-www-form-urlencoded&amp;#34;&amp;gt; First name: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;fname&amp;#34; /&amp;gt; Last name: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;lname&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;提交&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; 以上代码说明如下：</description></item><item><title>JavaScript Tips and Tricks</title><link>https://youkoucoding.github.io/p/javascript-tips-and-tricks/</link><pubDate>Fri, 08 Oct 2021 00:47:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/javascript-tips-and-tricks/</guid><description>1. Quick console.log() Get rid of writing console.log again and again and make it shorter by using the following code snippet.
let clog = console.log.bind(document); clog(&amp;#39;This will be printed in console.&amp;#39;); clog(123); // 123 2. Sprend Operator The spread operator is a new addition t othe set of operators in ES6. It takes an iterable object(e.g array) and expands it into individual elements. Below is an example code of spread operator usage.</description></item><item><title>毎日のフロントエンド　22</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/</link><pubDate>Thu, 07 Oct 2021 11:06:55 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/</guid><description>第二十二日 HTML #Question: js放在html的&amp;lt;body&amp;gt;和&amp;lt;head&amp;gt;有什么区别 在浏览器渲染页面之前，它需要通过解析HTML标记然后构建DOM树。在这个过程中，如果解析器遇到了一个脚本(script)，它就会停下来，并且执行这个脚本，然后才会继续解析 HTML。如果遇到了一个引用外部资源的脚本(script)，它就必须停下来等待这个脚本资源的下载，而这个行为会导致一个或者多个的网络往返，并且会延迟页面的首次渲染时间
外部引入的脚本(script)会阻塞浏览器的并行下载
浏览器解析HTML顺序1
js 放在 &amp;lt;head&amp;gt; 中，如果不添加 async 或者 defer 时，当浏览器遇到 script 时，会阻塞 DOM 树的构建，进而影响页面的加载。当 js 文件较多时，页面白屏的时间也会变长。
把 js 放到 &amp;lt;body&amp;gt; 里（一般在 &amp;lt;/body&amp;gt; 的上面）时，由于 DOM 是顺序解析的，因此 js 不会阻塞 DOM 的解析。对于必须要在 DOM 解析前就要加载的 js，我们需要放在 &amp;lt;head&amp;gt; 中。
一般情况下是在网站中，同步在 &amp;lt;head&amp;gt; 加载的脚本通常是业务必须的，比如说我要注册一个 window 对象，或者用 document.write 写入一些内容，或者是业务需求，我们可以用 head 来做加载:头部给 script 标签加入 async 的属性，表示它是异步加载的脚本，不会对 html 进行阻塞，这也是大部分网站的做法
Conclusion 对于必须要在 DOM 加载之前运行的 JavaScript 脚本，我们需要把这些脚本放置在页面的 head 中，而不是通过外部引用的方式，因为外部的引用增加了网络的请求次数；并且我们要确保内敛的这些 JavaScript 脚本是很小的，最好是压缩过的，并且执行的速度很快，不会造成浏览器渲染的阻塞</description></item><item><title>毎日のフロントエンド　21</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/</link><pubDate>Wed, 06 Oct 2021 12:26:28 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/</guid><description>第二十一日 HTMl #Question: 谈谈对input元素中readonly和disabled属性的理解 相同点：
都会使文本框变成只读，不可编辑 不同点：
disabled 属性在将 input 文本框变成只读不可编辑的同时，还会使文本框变灰, 不允许填写和使用,但是readonly不会 disabled 属性修饰后的文本框内容，在不可编辑的同时，通过 js 也是获取不到的。但是用 readonly 修饰后的文本框内容，是可以通过 js 获取到的，也就只是简单的不可编辑而已 disabled 属性对 input 文本框，单选 radio, 多选 checkbox 都适用，但是 readonly 就不适用，用它修饰后的单选以及多选按钮仍然是可以编辑状态的。(readonly只针对input和textarea有效，而 disabled 对于所有的表单元素都有效) readonly 直译为 “只读”，一般用于只允许用户填写一次的信息，提交过一次之后，就不允许再次修改了 disabled 的数据是不会被获取和上传，readonly 的数据会被获取和上传 Summary：
readonly：不可编辑、可复制、可选择、可以接收焦点但不能被修改，后台会接收到传值 disabled：不可编辑、不可复制、不可选择、不能接收焦点，后台也不会接收到传值 CSS #Question: 说说对line-height是如何理解的？ line-height
The line-height CSS property sets the height of a line box. It&amp;rsquo;s commonly used to set the distance between lines of text.</description></item><item><title>毎日のフロントエンド　20</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/</link><pubDate>Tue, 05 Oct 2021 11:27:36 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/</guid><description>第二十日 HTML #Question: 请描述 HTML 元素的显示优先级 在 html 中，帧元素（frameset）的优先级最高(已不提倡使用)，表单元素比非表单元素的优先级要高。
frameset &amp;gt; 表单元素 &amp;gt; 非表单元素
表单元素: 文本输入框，密码输入框，单选框，复选框，文本输入域，列表框等等 非表单元素: a，div, table, span 等等 有窗口元素比无窗口元素的优先级高
有窗口元素: select 元素，object 元素，以及 frames 元素等等 无窗口元素: 大部分 html 元素都是无窗口元素 CSS #Question: 要让 Chrome 支持小于 12px 的文字怎么做？ Chrome 中有最小字号的限制，一般为 12px。原因是 Chrome 认为小于这个字号会影响阅读。
当需要小于 12px 字体的时候，有以下几个方法可以使用。
-webkit-text-size-adjust:none; 这个属性在高版本的 Chrome 中已经被废除。
使用 transform: scale(0.5, 0.</description></item><item><title>毎日のフロントエンド　19</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/</link><pubDate>Mon, 04 Oct 2021 15:37:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/</guid><description>第十九日 HTML #Question: 说说你对HTML中的置换元素和非置换元素的理解 置换元素（Replaced Element） 简单来说，置换元素可以设置宽 高,他们有自己的属性，和 inline-block 有一样的属性
主要是指 img、input、textarea、select、object 等这类默认就有 CSS 格式化外表范围的元素。
浏览器根据元素的标签和属性，来决定元素的具体显示内容
如：浏览器根据标签的 src 属性显示图片。根据 type 属性决定显示输入框还是按钮 非置换元素（non-Replaced Element） 就是除了 img、input、textarea、select、object 等置换元素以外的元素
内容直接展示给浏览器。例如标签，标签里的内容会被浏览器直接显示给用户
CSS #Question: CSS的属性content有什么作用呢？有哪些场景可以用到 :before 和 :after 默认 display: inline; 必须设置 content 属性，否则一切都是无用功， content 属性也只能应用在 :before 和 :after 伪元素上 默认 user-select: none;，就是 :before 和 :after 的内容无法被用户选中 伪元素可以和伪类结合使用形如：.target:hover:after :before 和 :after 是在 CSS2 中提出来的，所以兼容 IE8 ::before 和 ::after 是 CSS3 中的写法，为了将伪类和伪元素区分开 不可通过 DOM 使用，它只是纯粹的表象。在特殊情况下，从一个访问的角度来看，当前屏幕阅读不支持生成的内容 content 定义用法 content 属性与 :before 及 :after 伪元素配合使用，在元素头或尾部来插入生成内容</description></item><item><title>毎日のフロントエンド　18</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/</link><pubDate>Sat, 02 Oct 2021 23:10:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/</guid><description>第十八日 HTML #Question: 怎样在页面上实现一个圆形的可点击区域？ 用 canvas 画布，弧线画圆，然后计算鼠标的坐标是否落在圆内 利用 SVG 作出圆形，然后添加点击事件 用一个 div,给 div 添加圆角属性50%，在 div 上添加点击事件 利用 &amp;lt;map&amp;gt; 和 &amp;lt;area&amp;gt; 标签设置圆形点击区域&amp;lt;area&amp;gt; &amp;amp; &amp;lt;map&amp;gt; 1 &amp;lt;!-- svg 圆 --&amp;gt; &amp;lt;svg width=&amp;#34;100%&amp;#34; height=&amp;#34;100%&amp;#34; version=&amp;#34;1.1&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; &amp;gt; &amp;lt;circle cx=&amp;#34;100&amp;#34; cy=&amp;#34;50&amp;#34; r=&amp;#34;40&amp;#34; stroke=&amp;#34;black&amp;#34; stroke-width=&amp;#34;2&amp;#34; fill=&amp;#34;red&amp;#34; onclick=&amp;#34;alert(3)&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; CSS #Question: 什么是 FOUC？ 如何避免 FOUC 的？ FOUC 浏览器样式闪烁
FOUC 即 Flash of Unstyled Content，是指页面一开始以样式 A（或无样式）的渲染，突然变成样式 B。原因是样式表的晚于 HTML 加载导致页面重新进行绘制。
产生原因
通过 @import 方式导入CSS style 标签在 body 中或底部 有几个样式表，放在html结构的不同位置 解决方案： 把 link 标签将样式放在 head 中</description></item><item><title>毎日のフロントエンド　17</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/</link><pubDate>Fri, 01 Oct 2021 23:29:44 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/</guid><description>第十七日 HTML #Question: 你认为 table 的作用和优缺点是什么呢？ 优点：特定的布局时，可以很块完成布局，样式好控制，特别是居中、对齐。 缺点：结构比较繁杂，非常多的 DOM 节点，会导致页面加载变慢、不利于 SEO，相对于目前比较流行的布局来讲。如 flex，div+css，grid 等 作用：以前用来布局和展示表格，现在一般只用来展示表格 CSS #Question: 解释下 CSS sprites 的原理和优缺点分别是什么？ 简介 CSS Sprites 是一种网页图片应用处理方式。它允许将一个页面涉及到的所有零星图片都包含到一张大图中， 利用 CSS 的background-image，background- repeat，background-position的组合进行背景定位， 访问页面时避免图片载入缓慢的现象。
优点 CSS Sprites能很好地减少网页的 http 请求，从而大大的提高页面的性能，这是 CSS Sprites 最大的优点，也是其被广泛传播和应用的主要原因；
CSS Sprites能减少图片的字节；
CSS Sprites解决了网页设计师在图片命名上的困扰，只需对一张集合的图片命名，不需要对每一个小图片进行命名，从而提高了网页制作效率。
CSS Sprites只需要修改一张或少张图片的颜色或样式来改变整个网页的风格。
缺点 图片合并麻烦：图片合并时，需要把多张图片有序的合理的合并成一张图片，并留好足够的空间防止版块出现不必要的背景。
图片适应性差：在高分辨的屏幕下自适应页面，若图片不够宽会出现背景断裂。
图片定位繁琐：开发时需要通过工具测量计算每个背景单元的精确位置。
可维护性差：页面背景需要少许改动，可能要修改部分或整张已合并的图片，进而要改动 css。在避免改动图片的前提下，又只能（最好）往下追加图片，但这样增加了图片字节。</description></item><item><title>React HooksのUseEffect</title><link>https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/</link><pubDate>Thu, 30 Sep 2021 14:24:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/</guid><description>useState: 执行副作用 副作用的定义 通常，副作用是指一段和当前执行结果无关的代码。比如说要修改函数外部的某个变凉，或者发起一个请求等。 在函数组建本次执行中，useEffect 中代码的执行是不影响渲染出来的 UI。
Side effects are all the operations that affect your componet and can&amp;rsquo;t be done during rendering. Things like fetching data, subscriptions or manually changing the DOM are all examples of side effects.
Usage useEffect(callback, dependencies); callback, 要执行的回调函数；
dependencies 可选的依赖项数组。可选， 如果没有依赖项，callback 在函数组建每次执行完成之后都执行;如果依赖项是空数组，则只在第一渲染时实行回调函数； 如果指定依赖项，则在依赖项变化时才执行 callback
useEffect 是每次组件 render 结束后，判断依赖项并执行。
No dependencies array: the function runs after every render Empty dependencies array: the function runs only after the first render (use this for the stuff it&amp;rsquo;s doing will never get stale) Dependencies array with some values: the function runs only if any of those values change 此外，useEffect 允许返回一个函数，用与在组件销毁时，做一些清理操作，防止内存泄漏。 例如，移除监听事件。 类似于 类组件中的 componentWillUnmount function MyComponent() { React.</description></item><item><title>毎日のフロントエンド　16</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/</link><pubDate>Thu, 30 Sep 2021 09:55:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/</guid><description>第十六日 HTML ##Question: 元素的 alt 和 title 有什么区别；title 属性,alt属性の役割と違う・使い分け &amp;lt;head&amp;gt;内に書き込む要素としての title タグではない。
&amp;lt;img alt=&amp;#34;画像だよ&amp;#34; title=&amp;#34;こっちのtitleだよ&amp;#34; /&amp;gt; alt 属性 最常见用于 &amp;lt;img&amp;gt;标签上，alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。
推荐您在文档的每个图像中都使用这个属性(SEO 需要)。 这样即使图像无法显示，用户还是可以看到关于丢失了什么东西的一些信息。而且对于残疾人来说，alt 属性通常是他们了解图像内容的唯一方式。
title 属性 title 属性规定关于元素的额外信息。
这些信息通常会在鼠标移到元素上时显示一段工具提示文本（tooltip text）。
title 属性有一个很好的用途，即为链接添加描述性文字，特别是当连接本身并不是十分清楚的表达了链接的目的。这样就使得访问者知道那些链接将会带他们到什么地方。另外一个潜在的应用就是为图像提供额外的说明信息，比如日期或者其他非本质的信息。
title 属性常与 form 以及 a 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。当然 title 属性是比较广泛使用的，可以用在除了 base，basefont，head，html，meta，param，script 和 title 之外的所有标签。但是并不是必须的。
title 属性と alt 属性の違い
title 属性はマウスオーバー時にツールチップで表示されるテキストを入力する。 title 属性は img 以外に a タグや link タグなどあらゆる要素に指定していい。 alt 属性は画像の代替テキストを指定するタグで、画像リンク切れ時や音声読み上げブラウザで使われる。 alt 属性が使われるのは img タグのみで、内容がカラでも存在は必須。 &amp;lt;title&amp;gt; 标签</description></item><item><title>毎日のフロントエンド　15</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/</link><pubDate>Wed, 29 Sep 2021 09:49:10 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/</guid><description>第十五日 HTML #Question: title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别 title: 网页的标题，tag 标签标题。
h1： 网页内部的标题
Attention: 如果 title 为空，但是页面存在 h1,b,strong 标签，搜索引擎会默认页面 title 为 h1 内的内容，所以 得出结论 h1 是在没有外界干扰下除 title 以外第二个能强调页面主旨的标记，在一个页面中应该使用且只使用一次 h1 标记。
b： 加粗(bold)，是实体标签， 应当使用 CSS 而不是 &amp;lt;b&amp;gt;
strong: 语义化的 b， 属于逻辑标签。
Attention: 尽量使用 strong
i： 斜体，是实体标签，应当使用 CSS 而不是 &amp;lt;i&amp;gt;
em: 语义化的i，逻辑标签， i, em 同样表示强调，但是成都没有 strong 高</description></item><item><title>React HooksのUseState</title><link>https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/</link><pubDate>Wed, 29 Sep 2021 00:28:55 +0900</pubDate><guid>https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/</guid><description>useState: 让函数组建具有维持状态的能力 Example import React, { useState } from &amp;#39;react&amp;#39;; const Example = () =&amp;gt; { const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;{count}&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;+&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); }; Usage useState(initialState) 参数 initialState 是创建 state 的初始值， 它可以是任意类型
useState()的返回值是一个有着两个元素的数组。 第一个数组元素用来读取 state 的值， 第二个则是用来设置这个 state 的值的函数。 state为只读变量， 且必须通过setCount来设置 state
如果要创建多个 state， 需要多次调用useState
const [age, setAge] = useState(99); const [fruit, setFruit] = useState(&amp;#39;banana&amp;#39;); const [todos, setTodos] = useState([{ text: &amp;#39;react hooks&amp;#39; }]); Principles useState中的 set 与 class 组件中 setState 类似， 但是 class 组件中的 state 只有一个，因此在类组件中，一般采用对象作为一个 state； useState可以多次创建，更加语义化。</description></item><item><title>毎日のフロントエンド　14</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/</link><pubDate>Tue, 28 Sep 2021 15:34:08 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/</guid><description>第十四日 HTML #Question: 为什么 HTML5 只需要写 &amp;lt;!DOCTYPE HTML&amp;gt; 就可以？ The html document type declaration, also known as DOCTYPE, is the first line of code required in every HTML or xHTML document. The DOCTYPE declaration us an instruction to the web browser about what version of HTML the page is written in. This ensures that the web page is parsed the same way by different web browsers.
The declaration of HTML5 DOCTYPE is much simpler: it no longer requires a reference to DTDs as it is no longer based on SGML.</description></item><item><title>毎日のフロントエンド　13</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/</link><pubDate>Mon, 27 Sep 2021 21:33:31 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/</guid><description>第十三日 HTML #Question: html5 中的 form 怎么关闭自动完成？ 操作表单 form 的 autocomplete 属性值, 默认是开启的。
&amp;lt;form action=&amp;#34;demo_form.html&amp;#34; method=&amp;#34;get&amp;#34; autocomplete=&amp;#34;off&amp;#34;&amp;gt; First name:&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;fname&amp;#34; /&amp;gt;&amp;lt;br /&amp;gt; E-mail: &amp;lt;input type=&amp;#34;email&amp;#34; name=&amp;#34;email&amp;#34; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; CSS #Question: ::before和:after中单冒号和双冒号的区别是什么，这两个伪元素有什么作用 :表示伪类，是一种样式，比如:hover, :active 等
::表示伪元素，是具体的内容，比如::before 是在元素前面插入内容，::after 则是在元素后面插入内容，不过需要 content 配合，并且插入的内容是 inline 的
:before 和 :after 其实还是表示伪元素，在 css3 中已经修订为::before 和::after 了，只是为了能兼容 IE 浏览器，所以也可以表示成:before 和:after
JavaScript #Question: 说说你对 javascript 的作用域的理解 作用域就是一块封闭的区域，外部不能访问到这块区域里的变量、函数等，被{}包裹的就叫一个作用域（全局作用域是特殊的）</description></item><item><title>毎日のフロントエンド　12</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/</link><pubDate>Sun, 26 Sep 2021 23:36:48 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/</guid><description>第十二日 HTML #Question: 常见的浏览器内核都有哪些？并介绍下你对内核的理解 内核主要分为渲染引擎和 JS 引擎。前者负责页面的渲染，后者负责执行解析 JavaScript。之后，由于 JS 引擎越来越独立，现在所说的浏览器内核大都指渲染引擎
目前主流的内核有以下 4 个：
Trident: 由微软开发，即我们熟知的 IE 内核 Gecko: 使用 C++ 开发的渲染引擎，包括了 SpiderMonkey 即我们熟悉的 FireFox Presto: Opera 使用的内核 Webkit: Safari 使用的内核 Chrome 浏览器内核： 统称为 Chromium 内核，以前是 Webkit 内核，现在是Blink内核 CSS #Question: 说说你对 css 盒子模型的理解 基本概念
标准(W3C)盒子模型(box-sizing: content-box;)：包括 margin,border,padding,content,并且 content 部分不包括其他部分 标准盒子模型 IE 盒子模型(box-sizing: border-box;)：包括 margin,border,padding,content，content包含了border和padding IE盒子模型 补充说明：
CSS盒模型， 有内外两个部分。 外部属性 控制盒子本体是否占满一整行； 内部则控制：内部元素的属性。 例如：display: inline-block,外部是，inline 不占据整行； 内部是 block则表明内部遵循块状特性。 因此， display: inline; 可理解为 display: inline-inline;， display: block; 可理解为 display: block-block;</description></item><item><title>毎日のフロントエンド　11</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/</link><pubDate>Sat, 25 Sep 2021 23:02:39 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/</guid><description>第十一日 HTML #Question: 你对标签语义化的理解是什么？
什么是 HTML 语义化标签 语义化的标签，旨在让标签有自己的含义。
&amp;lt;p&amp;gt;一行文字&amp;lt;/p&amp;gt; &amp;lt;span&amp;gt;一行文字&amp;lt;/span&amp;gt; 如上代码，p 标签与 span 标签都区别之一就是，p 标签的含义是：段落。而 span 标签责没有独特的含义。
语义化标签的优势 语义化更具有可读性，便于团队开发维护 在没有 css 的情况下，页面也可以呈现出也很好的内容结构和代码结构 SEO，搜索引擎能更好的理解页面中各部分的关系，可更快更准确的搜索到信息 常见的语义化标签 因此我们在写页面结构时，应尽量使用有 语义的 HTML 标签
&amp;lt;title&amp;gt;：页面主体内容。 &amp;lt;hn&amp;gt;：h1~h6，分级标题，与 协调有利于搜索引擎优化。 &amp;lt;ul&amp;gt;：无序列表。 &amp;lt;li&amp;gt;：有序列表。 &amp;lt;header&amp;gt;：页眉通常包括网站标志、主导航、全站链接以及搜索框。 &amp;lt;nav&amp;gt;：标记导航，仅对文档中重要的链接群使用。 &amp;lt;main&amp;gt;：页面主要内容，一个页面只能使用一次。如果是 web 应用，则包围其主要功能。 &amp;lt;article&amp;gt;：定义外部的内容，其中的内容独立于文档的其余部分。 &amp;lt;section&amp;gt;：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。 &amp;lt;aside&amp;gt;：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。 &amp;lt;footer&amp;gt;：页脚，只有当父级是 body 时，才是整个页面的页脚。 &amp;lt;small&amp;gt;：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。 &amp;lt;strong&amp;gt;：和 em 标签一样，用于强调文本，但它强调的程度更强一些。 &amp;lt;em&amp;gt;：将其中的文本表示为强调的内容，表现为斜体。 &amp;lt;mark&amp;gt;：使用黄色突出显示部分文本。 &amp;lt;figure&amp;gt;：规定独立的流内容（图像、图表、照片、代码等等）（默认有 40px 左右 margin）。 &amp;lt;figcaption&amp;gt;：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。 &amp;lt;cite&amp;gt;：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。 &amp;lt;blockquoto&amp;gt;：定义块引用，块引用拥有它们自己的空间。 &amp;lt;q&amp;gt;：短的引述（跨浏览器问题，尽量避免使用）。 &amp;lt;time&amp;gt;：datetime 属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。 &amp;lt;abbr&amp;gt;：简称或缩写。 &amp;lt;dfn&amp;gt;：定义术语元素，与定义必须紧挨着，可以在描述列表 dl 元素中使用。 &amp;lt;address&amp;gt;：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。 &amp;lt;del&amp;gt;：移除的内容。 &amp;lt;ins&amp;gt;：添加的内容。 &amp;lt;code&amp;gt;：标记代码。 &amp;lt;meter&amp;gt;：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签） &amp;lt;progress&amp;gt;：定义运行中的进度（进程）。 CSS #Question: css 常用的布局方式有哪些？</description></item><item><title>毎日のフロントエンド　10</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/</link><pubDate>Thu, 23 Sep 2021 23:39:38 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/</guid><description>第十日 HTML #Question: viewport 常见设置都有哪些？
viewport 就是视区窗口，也就是浏览器中显示网页的部分。PC 端上基本等于设备显示区域，但在移动端上viewport 会超出设备的显示区域 (即会有横向滚动条出现)。设备默认的 viewport 在 980 - 1024 之间。
设置 解释 width 设置 layout viewport 的宽度，为一个正整数，或字符串&amp;quot;width-device&amp;quot; initial-scale 设置页面的初始缩放值，为一个数字，可以带小数 minimum-scale 允许用户的最小缩放值，为一个数字，可以带小数 maximum-scale 允许用户的最大缩放值，为一个数字，可以带小数 height 设置 layout viewport 的高度，这个属性对我们并不重要，很少使用 user-scalable 是否允许用户进行缩放，值为&amp;quot;no&amp;quot;或&amp;quot;yes&amp;quot;, no 代表不允许，yes 代表允许 // width=device-width, initial-scale=1.0 是为了兼容不同浏览器 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&amp;#34; /&amp;gt; dpr 与 CSS 像素。CSS 像素的 1px 在 PC 端上与设备的物理像素基本一致，而到手机端就会有两个物理像素对应一个 CSS 像素的情况出现（如 iPhone 的视网膜屏）。 所以 iPhone 上的 dpr = 2 即 2 个物理像素 / 一个 CSS 像素（独立像素）</description></item><item><title>毎日のフロントエンド　9</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/</link><pubDate>Thu, 23 Sep 2021 16:48:11 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/</guid><description>第九日 HTML #Question: 浏览器内多个标签页之间的通信方式有哪些？(网页间 消息 通讯)
是什么？ 在浏览器中，两个不同页面（A 页面的 window ！= B 页面的 window）网页之间的消息传递
消息传递方式 1. WebSocket - 可跨域 WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。
WebSocket 教程
2. postMessage - 可跨域 window.postMessage() 方法安全地启用 Window 对象之间的跨源通信
对将接收消息的窗口的引用，获得此类引用的方法包括：
&amp;lt;iframe&amp;gt; Window.open （生成一个新窗口然后引用它） Window.opener （引用产生这个的窗口） 3. Worker 之 ShareWorker webworker，作为浏览器的一个新特性，可以提供一个额外的线程来执行一些 js 代码（真正的多线程），并且不会影响到浏览器用户界面，但是不能 DOM 操作。
SharedWorker 可以被多个 window 共同使用，所以可以用来跨页面传输数据，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)。
4. Server-Sent Events HTML5 服务器发送事件（server-sent event）允许网页获得来自服务器的更新。 Server-Sent 事件指的是网页自动获取来自服务器的更新。</description></item><item><title>毎日のフロントエンド　8</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/</link><pubDate>Wed, 22 Sep 2021 16:40:32 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/</guid><description>第八日 CSS #Question: 清除浮动的方式有哪些及优缺点？
现阶段 较多使用Flex 布局 浮动带来的问题是盒子塌陷问题 什么是盒子塌陷？ 外部盒子本应该包裹住内部的浮动盒子，结果却没有
原因 父元素只包含浮动元素，那么它的高度就会塌缩为零, 前提是没有设置高度height属性，或者设置为 auto，就会出现盒子塌陷，如果父元素不包含任何的可见背景，这个问题会很难被注意到。 因为子元素设置了 float 属性，而 float 属性会把元素从标准文档流中抽离，直接结果就是外部盒子丢了两个孩子，因为内部没有其它盒子了，所以外部盒子只包裹文本节点内容，却把两个内部盒子扔在外面了。
解决方案 把外部盒子也从标准文档流中抽离
缺点是： 父元素加上 float 有可能影响整个页面 在外部盒子内最下方添上带 clear 属性的空盒子： 把 &amp;lt;div style=&amp;quot;clear:both;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;放在盒内底部
给外部盒子添加： overflow:hidden 清除浮动
用after伪元素清除浮动
.clearfix { \*zoom: 1; } .clearfix:before, .clearfix:after { display: table; line-height: 0; content: &amp;#39;&amp;#39;; } .clearfix:after { clear: both; } 当然，还有前文提到的 BFC</description></item><item><title>毎日のフロントエンド　7</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/</link><pubDate>Tue, 21 Sep 2021 10:52:54 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/</guid><description>第七日 HTML #Question: iframe 框架都有哪些优缺点？
The &amp;lt;iframe&amp;gt; HTML element represents a nested browsing context, embedding another HTML page into the current one.
&amp;lt;iframe&amp;gt;: The Inline Frame element - HTML: HyperText Markup Language | MDN
iFrame — A love story. by Max Rafferty | Slices of Bread | Medium
Advantages of &amp;lt;iframe&amp;gt;:
iframe can display the embedded web page intact. If there are multiple pages referencing iframe, you only need to modify the content of iframe, and then you can change the content of every page you call, which is convenient and fast.</description></item><item><title>毎日のフロントエンド　6</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/</link><pubDate>Mon, 20 Sep 2021 16:14:06 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/</guid><description>第六日 HTML #Question: label 都有哪些作用？并举相应的例子说明
The &amp;lt;label&amp;gt; HTML element represents a caption for an item in a user interface.
表示用户界面中某个元素的说明。
Associating a &amp;lt;label&amp;gt; with an &amp;lt;input&amp;gt; element offers some major advantages:
A screen reader will read out the label when the user is focused on the form &amp;lt;input&amp;gt;, making it easier for an assistive technology user to understand what data should be entered.
When a user clicks or touches a label, the browser passes the focus to its associated input.</description></item><item><title>毎日のフロントエンド　5</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/</link><pubDate>Sun, 19 Sep 2021 12:16:31 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/</guid><description>第五日 HTML #Question: 简述超链接 target 属性的取值和作用
target Where to display the linked URL. The following keywords have special meanings for where load the URL
value 描述 description _self （默认）在相同的框架中打开被链接文档 the current browsing context(default) _blank 在新窗口中打开被链接文档 usually a new tab, but users can configure browers to open a new window instead _parent 在父框架集中打开被链接文档 the parent browsing context of the current one.</description></item><item><title>毎日のフロントエンド　4</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/</link><pubDate>Sat, 18 Sep 2021 13:33:07 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/</guid><description>第四天 HTML #Question: HTML5 的文件离线储存怎么使用，工作原理是什么？
TL;DR &amp;ndash; HTML5 local storage is an alternative to cookies, allowing web applications to store user information in their browser.
With web storagem web applications can store data locally within the user&amp;rsquo;s browser.
Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.</description></item><item><title>毎日のフロントエンド　3</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/</link><pubDate>Thu, 16 Sep 2021 17:39:42 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/</guid><description>第三天 HTML #Question: HTML 全局属性(global attribute)有哪些（包含HTML5）?
Global attributes - HTML: HyperText Markup Language | MDN
Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.
document.body.__proto__
accesskey: 生成键盘快捷键提示。Provides a hint for generating a keyboard shortcut for the current element. autocapitalize: 控制用户的文本输入 是否 如何 自动大写。 Controls whether and how text input is automatically capitalized as it is entered/edited by user.</description></item><item><title>毎日のフロントエンド　2</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/</link><pubDate>Wed, 15 Sep 2021 19:48:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/</guid><description>第二天 HTML #Question: HTML 的元素有哪些（包含 HTML5）？
块级元素 Block
Block elements are meant to structure the main parts of your page, by dividing your content in coherent blocks.
常用：div、p、ul、li、ol 定义页面结构（Structure elements）: aside、footer、header、nav、section、main 文章：address、article、figure、figcaption、h1、h2、h3、h4、h5、h6、pre 表格：table、thead、tbody、tfoot、th、td、caption 表单：form 其他：canvas 行内元素 Inline
Inline elements are meant to differentiate part of a text, to give it a oarticular function or meaning. Inline elements usually comprise a single or few words.
常用：a、img、span 文本：em、i、strong、small 表单：button、input、label、option、progress、select、textarea 媒体：audio、video Block elements can contain either block or inline elements.</description></item><item><title>毎日のフロントエンド　1</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/</link><pubDate>Tue, 14 Sep 2021 11:58:23 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/</guid><description>第一天 HTML #Question: 页面导入样式时，使用 link 和@import 有什么区别？
&amp;lt;link&amp;gt; 是HTML的标签。 The @import is used to import style rules from other style sheets.
&amp;lt;!-- @import Syntax --&amp;gt; @import url; @import url list-of-media-queries; @import url supports(supports-query); @import url supports(supports-query) list-of-media-queries; &amp;lt;link&amp;gt; 引入的样式，在页面加载时，同时加载。 @import 引入的样式需要等页面加载完成之后再加载。
&amp;lt;link&amp;gt; 不存在兼容性问题，@import 不兼容 ie5 以下
&amp;lt;link&amp;gt; 可通过 js 操作 DOM 动态引入样式， @import 不可以
CSS #Question: 圣杯布局和双飞翼布局的理解和区别，并用代码实现
即 css 三栏布局&amp;mdash;改变 viewpoint 宽度，两个边栏的宽度不变(左右定宽)，只会中间的区域变化， 且 中间部分优先渲染</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（六）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</link><pubDate>Mon, 13 Sep 2021 17:34:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</guid><description>What is &amp;ldquo;Lifting State up&amp;rdquo; and Why we need it? Lifting state up is a common pattern that is essential for React developer to know. It helps us avoid more complex pattern for managing our state.
Often there will be a need to share state between different components. The common approach to share state between two components is to move the state to common parent of the two compenont.
我们可以很清楚的明白 React 状态提升主要就是用来处理父组件和子组件的数据传递的；他可以让我们的数据流动的形式是自顶向下单向流动的，所有组件的数据都是来自于他们的父辈组件，也都是由父辈组件来统一存储和修改，再传入子组件当中。</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（五）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</link><pubDate>Sun, 12 Sep 2021 17:48:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</guid><description>防抖 与 节流 Debouncing and Throttling in Javascript Debouncing and Throttling are two widely-used techniques to improve the performance of code that gets executed repeatedly within a short time(a peroid of time).
devbounce-throttle
Debouncing 防抖 用来实现高频触发函数调用时，实际只调用最后一次函数执行。
即： 触发事件后过一段时间才执行函数， 如果在这段时间内再次触发，则重新计时。
用于可能出现高频调用的 DOM 或 样式修改， 这种高频调用会导致页面高频重排重绘，DOM 闪烁抖动，影响页面性能。
Implementing Debounce: Start with o timeout If the debounced function is called again, reset the timer to the speccial delay In case of timeout, call the debounced function.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（四）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</link><pubDate>Sat, 11 Sep 2021 15:14:04 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid><description>关键知识点六： Restful API 设计的几个最佳实践 steps toward the glory of REST Richardson Maturity Model
Level 0 The Starting point for the model is using HTTP as a transport system for remote interactions, but without using any of the mechanisms of the web.If you use SOAP or XML-RPC it&amp;rsquo;s basically the same mechanism, the only difference is that you wrap the XML messages in some kind of envelope.
Level 1 - Resources At level One, rather than making all the requests to s singular service endpoint, we start talking to individual resources.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（三）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</link><pubDate>Fri, 10 Sep 2021 18:02:49 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</guid><description>知识点五： Restful API 设计 1. Endpoint 表示 API 的具体地址
在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中 不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&amp;quot;集合&amp;quot;（collection），所以 API 中的名词也应该使用复数。
# Example 应使用 HTTPs 协议 https://api.example.com/v1/books https://api.example.com/v1/movies 2. HTTP METHOD 对于资源的具体操作，应由 HTTP 动词表示。
# 常用方法, (对应 SQL 语句) GET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE）：在服务器新建一个资源。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。 DELETE（DELETE）：从服务器删除资源。 # 具体的使用实例 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 3. Filtering 如果记录数量很大，服务器不可能将全部数据返回，此时，API 应提供参数，用于过滤返回结果。
# 以下是一些常用参数 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page=2&amp;amp;per_page=100：指定第几页，以及每页的记录数。 ?sortby=name&amp;amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件 参数的设计允许存在冗余，例如：GET /zoo/ID/animals 等价于 GET /animals?</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（二）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</link><pubDate>Thu, 09 Sep 2021 20:17:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid><description>关键知识点四： Restful API What is REST REST is acronym for REpresentational State Transfer. It is architectural style for distributed hyermedia systems and was first presented by Roy Fielding in 2000 in his famous dissertation.
Principles of REST Client-server
By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（一）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link><pubDate>Wed, 08 Sep 2021 23:50:49 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid><description>第一章 知识点一： 用 create-react-app 初始化项目： 1. Quick Start npx create-react-app react-jira --template typescript # or npm init react-app react-jira # or yarn create react-app react-jira npx create-react-app my-app --use-npm # if you prefer to use npm 2. Folder Structure For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won’t see them.
字体，图片等也同样应置于 scr 目录中</description></item><item><title>Install Go on Mac with Homebrew</title><link>https://youkoucoding.github.io/p/golang-config/</link><pubDate>Tue, 07 Sep 2021 23:46:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/golang-config/</guid><description>Precondition: macOS Big Sur 11.5.2
Golang&amp;rsquo;s installation and configuration with homebrew in Fish shell 1. Install golang with homebrew brew update brew search golang brew info golang # show the information of golang brew install golang 2. Setup the workspace: Add environment variables: First, we&amp;rsquo;ll need to tell Go the location of our workspace.
We&amp;rsquo;ll add some environment variables into shell config.
bash or zsh The config files is located at home directory:</description></item><item><title>Chinese Test</title><link>https://youkoucoding.github.io/p/test-chinese/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/test-chinese/</guid><description>正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。
奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。
引用 思念是最暖的忧伤像一双翅膀
让我停不了飞不远在过往游荡
不告而别的你 就算为了我着想
这么沉痛的呵护 我怎么能翱翔
最暖的憂傷 - 田馥甄
图片 Photo by Florian Klauer on Unsplash Photo by Luca Bravo on Unsplash</description></item><item><title>Markdown Syntax Guide</title><link>https://youkoucoding.github.io/p/markdown-syntax-guide/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/markdown-syntax-guide/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Rich Content</title><link>https://youkoucoding.github.io/p/rich-content/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/rich-content/</guid><description>&lt;p>Hugo ships with several &lt;a class="link" href="https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes" target="_blank" rel="noopener"
>Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a class="link" href="https://gohugo.io/about/hugo-and-gdpr/" target="_blank" rel="noopener"
>Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p></description></item><item><title>Placeholder Text</title><link>https://youkoucoding.github.io/p/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/placeholder-text/</guid><description>&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://youkoucoding.github.io/p/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p></description></item><item><title>Emoji Support</title><link>https://youkoucoding.github.io/p/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/emoji-support/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p></description></item></channel></rss>