<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 技術の手帳</title><link>https://youkoucoding.github.io/post/</link><description>Recent content in Posts on 技術の手帳</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 08 Jan 2022 11:42:58 +0900</lastBuildDate><atom:link href="https://youkoucoding.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>毎日のフロントエンド 114</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-114/</link><pubDate>Sat, 08 Jan 2022 11:42:58 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-114/</guid><description>第一百一十四日 HTML Question: HTML5 的 Canvas 元素有什么用途 最常见的就是做图表,数据可视化产品 做动画特效,在线画图,3d 的 webgl 有 threeJs, 2d 的有 zrender web 图像处理,在 canvas 上画图片,进行像素级的修改，如制作灰度图，对用户上传的图进行裁剪,模糊,多图合成等操作 CSS Question: 为什么要使用 css sprites(old) CSS Sprites 指的是将该页面请求的图片资源都拼接到一个图片文件上，通过 css 从拼接好的图片上获取需要的部分。
CSS Sprites are a means of combining multiple images into a single image file for use on a website, to help with performance.
优点:
一个是减少了 HTTP 请求的发送次数 一个是合并后的图片一般小于合并前的图片大小总和（大图大小&amp;lt;=多张小图大小） 缺点：</description></item><item><title>毎日のフロントエンド 113</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-113/</link><pubDate>Fri, 07 Jan 2022 15:17:10 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-113/</guid><description>第一百一十三日 HTML Question: 在 HTML5 中如何组合标题？用哪个元素 &amp;lt;hgroup&amp;gt;
HTML &amp;lt;hgroup&amp;gt; element 代表文档章节所属的多级别的目录，它将多个至的子元素组装到一起。 对区段（section）的标题进行组合 CSS Question: element、class 和 id 选择器三者的区别是什么？分别在什么时候用 标签选择器的格式为 element { ... }，class 选择器的格式为 .class-name { ... }，id 选择器的格式为 #identifier { ... }
Question: 3 ways to elegantly center a div (horizontally and vertically) .centered { display: grid; place-items: center; } .also-centered { display: flex; justify-content: center; align-items: center; } .centered-absolute { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); } JavaScript Question: 用 js 写一个事件侦听器的方法 /** * 一个简单的发布订阅者模式 */ interface IHandler { fn: Function; type: string; name: string; } export default class EventUtils { /** * 键值对 对应事件名称以及数组的值 */ static handler = {}; /** * on 方法 添加监听事件 */ static on(name: string, handler: Function): EventUtils { const i: IHandler = { fn: handler, type: &amp;#39;on&amp;#39;, name: name, }; if (Object.</description></item><item><title>毎日のフロントエンド 112</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-112/</link><pubDate>Thu, 06 Jan 2022 12:12:18 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-112/</guid><description>第一百一十二日 HTML Question: checkbox有几种状态吗？它们分别用来表示什么 checkbox状态的属性有checked，disabled和indeterminate:
checked：选中/未选中状态； disabled：禁用/可用状态； indeterminate：用于表示复选框组介于全部选中或全部未选中之间的状态； CSS Question: 时间、频率、角度、弧度、百分度的单位分别是哪些 时间: s, ms 频率: Hz 角度: deg 弧度: rad 百分度: grad JavaScript Question: 函数声明与函数表达式有什么区别 两者最大的区别是： 函数声明会提升至作用域的顶端，函数表达式则会在赋值之后能调用。
函数声明 在函数声明被定义之前，它就可以被调用
// 函数名必须有 function sayHi() { alert(&amp;#39;Hello&amp;#39;); } 函数表达式 函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用(函数表达式在代码执行到它时才会被创建)
// 在函数表达式中可以省略函数名 let sayHi = function () { alert(&amp;#39;Hello&amp;#39;); }; 在大多数情况下，当我们需要声明一个函数时，最好使用函数声明，因为函数在被声明之前也是可见的。
Reference haizlin/fe-interview
前端进阶</description></item><item><title>毎日のフロントエンド 111</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-111/</link><pubDate>Wed, 05 Jan 2022 09:11:05 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-111/</guid><description>第一百一十一日 HTML Question: HTML 如何创建分区响应图 分区响应图:一张图片,分成多个模块,点击模块可以链接到不同的 URL 地址 实现: map, area &amp;lt;p&amp;gt; &amp;lt;img src=&amp;#34;./1.png&amp;#34; usemap=&amp;#34;#myMap&amp;#34; /&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;map name=&amp;#34;myMap&amp;#34;&amp;gt; &amp;lt;area href=&amp;#34;http://baidu.com&amp;#34; shape=&amp;#34;rect&amp;#34; coords=&amp;#34;50,106,220,273&amp;#34; /&amp;gt; &amp;lt;area href=&amp;#34;http://google.com&amp;#34; shape=&amp;#34;rect&amp;#34; coords=&amp;#34;260,106,430,275&amp;#34; /&amp;gt; &amp;lt;area href=&amp;#34;http://juejin.im&amp;#34; shape=&amp;#34;default&amp;#34; /&amp;gt; &amp;lt;/map&amp;gt; CSS Question: table 布局 在 div + css 布局成为主流之前，基本都是以 table 布局为主 table 布局对于排版比较友好，水平居中、垂直居中都可以利用 table 的属性来完成。 缺点也是十分明显 table 布局往往是 table 嵌套 table，会有非常多的 DOM 节点，性能糟糕 语义化不明，本身就是标签错误的用法。因此对 SEO 不友好 DOM 操作困难，tr、td 中要寻找到目标 DOM 元素非常困难，代码没有维护性 JavaScript Question: 用 js 编写一个红绿灯程序 function sleep(t) { return new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { resolve(); }, t); }); } /** * 循环显示红绿灯 * @param {number} green 绿灯显示毫秒数 * @param {number} yellow 黄灯显示毫秒数 * @param {number} red 红灯显示毫秒数 */ async function light(green = 15000, yellow = 3000, red = 10000) { let status = &amp;#39;green&amp;#39;; while (true) { await sleep(green).</description></item><item><title>毎日のフロントエンド 110</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-110/</link><pubDate>Tue, 04 Jan 2022 11:10:29 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-110/</guid><description>第一百一十日 HTML Question: svg有什么运用场景 &amp;lt;svg xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; version=&amp;#34;1.1&amp;#34;&amp;gt; &amp;lt;rect width=&amp;#34;300px&amp;#34; height=&amp;#34;100px&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; SVG 是可缩放的矢量图形，是用 XML 来定义的图像。一个最基础的 svg 标签如下：
全称是可缩放矢量图（Scalable Vector Graphics）。其他图像格式都是基于像素处理的，SVG 则是属于对图像的形状描述，所以它本质上是文本文件，体积较小，且不管放大多少倍都不会失真。
SVG 文件可以直接插入网页，成为 DOM 的一部分，然后用 JavaScript 和 CSS 进行操作。 CSS Question: 设备像素比 设备像素比(Device Pixel Ratio 简称：DPR)，是指物理像素和 CSS 像素(设备独立像素)的比例。
viewport &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&amp;#34; /&amp;gt; width : 控制 viewport 的大小，能够指定一个值，如 600， 或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100%的 CSS 的像素） height : 和 width 相对应，指定高度 initial-scale : 初始缩放比例，页面第一次加载时的缩放比例 maximum-scale : 容许用户缩放到的最大比例，范围从 0 到 10.</description></item><item><title>毎日のフロントエンド 109</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-109/</link><pubDate>Mon, 03 Jan 2022 10:54:18 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-109/</guid><description>第一百零九日 HTML Question: 很多网站不常用 table 和 iframe 这两个元素，原因？ iframe cons
是一个单独的容器，因此不会应用全局的 CSS 样式 会和网页共用域名连接池，因此可能由于 iframe 占用了连接数导致加载阻塞 搜索引擎爬虫不易爬取，不利于 SEO 相比直接操作 DOM 元素，使用 iframe 更耗费资源 pros
可以用其展示广告，可以避免由于添加广告而网站被爬虫拒绝收录的情况 table cons
table 的内容会等内部的所有内容加载完成才会显示，比基于 div+css 实现的表格布局加载速度慢。 会导致网页语义发生错误，不利于无障碍功能 改动内部内容会造成整个 table 重绘，消耗更多资源 pros
前期广泛用于后台管理系统，由于普通的后台管理系统大多都是表格布局，基于 table 编程难度低 且面向内网的管理系统对性能要求不高 CSS Question: cursor 属性 cursor 是鼠标光标的属性。可以给元素设置不同的 cursor 属性来使鼠标在不同的位置显示不同的形状。
值 描述 url 需使用的自定义光标的 URL。注释：请在此列表的末端始终定义一种普通的光标，以防没有由 URL 定义的可用光标。 default 默认光标（通常是一个箭头） auto 默认。浏览器设置的光标 crosshair 光标呈现为十字线 pointer 光标呈现为指示链接的指针 move 此光标指示某对象可被移动 e-resize 此光标指示矩形框的边缘可被向右（东）移动 ne-resize 此光标指示矩形框的边缘可被向上及向右移动（北/东） nw-resize 此光标指示矩形框的边缘可被向上及向左移动（北/西） n-resize 此光标指示矩形框的边缘可被向上（北）移动 se-resize 此光标指示矩形框的边缘可被向下及向右移动（南/东） sw-resize 此光标指示矩形框的边缘可被向下及向左移动（南/西） s-resize 此光标指示矩形框的边缘可被向下移动（南） w-resize 此光标指示矩形框的边缘可被向左移动（西） text 此光标指示文本 wait 此光标指示程序正忙（通常是一只表或沙漏） help 此光标指示可用的帮助（通常是一个问号或一个气球） JavaScript Question: 什么是原型模式？它主要运用在哪些场景 原型模式（prototype） 原型模式（prototype）是指用原型实例(一个共享的原型实例)指向创建对象的种类，并且通过拷贝这些原型创建新的对象。也就是创建一个对象作为另一个对象的 Prototype 属性。用于创建重复的对象，可以提升性能。</description></item><item><title>毎日のフロントエンド 108</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-108/</link><pubDate>Sun, 02 Jan 2022 11:52:07 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-108/</guid><description>第一百零八日 HTML Question: 在默认的情况下，使用 h1 标签呈现出什么效果 h1标签
默认： 加粗 块状元素 字体大小：font-size:2em; 未经过调整的浏览器大小是 32px CSS Question: position 的 relative 和 absolute 定位原点 两者的定位原点都是其包含块区域的左上角
containing block:用来确定和影响元素的尺寸和位置属性的矩形区域；
The size and position of an element are often impacted by its containing block. Percentage values that are applied to the width, height, padding, margin, and offset properties of an absolutely positioned element. 一个元素的包含块完全受其 position 属性值的影响：
static或relative: 最近的块级（display属性值为block，inline-block或list-item）祖先元素的content-box区域；static 情况下的原点 或者最近的建立格式上下文的祖先元素，比如：table 容器，flex 容器，grid 容器或块级容器。 absolute 最近的非 static（fixed, absolute, relative, or sticky）祖先元素的padding-box区域 fixed 可视窗口 viewport 本身（属于 continuous media 类型时）或页面区域 page area（属于 paged media 类型时），即初始包含块； 当属性值为 fixed 或 absolute 时，其包含块还有可能是最近的含有 transform 或 perspective 值不为 none 的祖先元素的 padding-box 区域。 html 元素的包含块叫做初始包含块（initial containing block），它具有可视窗口（用于连续媒体）或页面区域（用于分页媒体）的尺寸</description></item><item><title>毎日のフロントエンド 107</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-107/</link><pubDate>Sat, 01 Jan 2022 12:05:13 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-107/</guid><description>第一百零七日 HTML Question: 网站的 TDK 该怎么设置？有什么作用 TDK 是title, description, keywords的简称，这三个常用于网站的 seo
title和description用于搜索呈现时的网站描述信息，而keywords则是用于搜索引擎的关键字搜索 CSS Question: 过渡和动画的区别是什么 过渡 transition 需要事件触发，比如hover，focus，checked 只能触发一次 只能定义开始和结束状态，不能定义中间状态 动画 animation 不需要事件触发 显示地随着时间的流逝，周期性的改变元素的 css 属性值。区别于一次性 通过百分比来定义过程中的不同形态，可以很细 JavaScript Question: 写一个方法判断给定的字符串是否同态(isomorphic) 字符串同态是使得每个字母被替代为一个单一字符串的字符串代换。字符串同态就是字符串拥有同样的字符结构
function isomorphic(a, b) { if (a.length != b.length) return false; let res = true; let map = {}; for (let i = 0; i &amp;lt; a.length; i++) { let code1 = a.</description></item><item><title>毎日のフロントエンド 106</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-106/</link><pubDate>Fri, 31 Dec 2021 15:04:11 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-106/</guid><description>第一百零六日 HTML Question: 除了音频和视频，HTML5 还支持哪些媒体标签 标签 作用 应用 embed 标签定义嵌入的内容 CodePen 等网站的代码编辑器可直接嵌入 html track 为 video、audio 添加.vtt 格式的字幕文件 source 为媒体元素如 video、audio 定义不同格式的媒体资源，让浏览器选择其所支持的一个 canvas 定义画布 web 游戏开发 picture 响应式处理图片 适配 Retina 屏幕 CSS Question: CSS 中的calc()有什么作用 calc使得开发者能够使用四则运算表达式来计算长宽的属性。 px、%、em rem等不同单位的数值均可参与计算，浏览器会进行自动转换。 Caveat 运算符的两边必须要有空白字符。
JavaScript Question: 作用域链的理解 作用域链指的是代码执行时,查找变量的规则
作用域链与函数执行栈相对应。js 运行环境分为全局、函数以及eval三类，每当代码执行进入了一个新的运行环境就会将环境的执行上下文入栈，退出环境时将其出栈，从栈顶到栈底形成从内层到外层的嵌套关系。</description></item><item><title>毎日のフロントエンド 105</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-105/</link><pubDate>Thu, 30 Dec 2021 11:41:08 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-105/</guid><description>第一百零五日 CSS Question: 怎么实现移动端的边框 0.5px 通过 transform 中的 scale border: 1px solid red; transform: scaleY(0.5); 通过 meta viewport 中设置init-scale为 0.5 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=0.5&amp;#34; /&amp;gt; 背景渐变实现, 一半透明 .border-half { height: 1px; background-image: linear-gradient(0deg, red 50%, transparent 50%); } 伪类:after + 缩放 li:after { content: &amp;#39;&amp;#39;; display: block; position: absolute; left: -50%; width: 200%; height: 1px; background: red; transform: scale(0.5); -webkit-transform: scale(0.5); } JavaScript Question: 写个方法，找出指定字符串中重复最多的字符及其长度(出现次数) function countStr(str) { let maxLen = 0; let char = &amp;#39;&amp;#39;; for (let i = 0; i &amp;lt; str.</description></item><item><title>毎日のフロントエンド 104</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-104/</link><pubDate>Wed, 29 Dec 2021 20:38:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-104/</guid><description>第一百零四日 HTML Question: &amp;lt;html&amp;gt;标签有什么作用 &amp;lt;html&amp;gt; 元素定义了整个 HTML 文档。
告诉浏览器这是一个 HTML 文档 标识了文档开始和结束的位置 最外层的标签 html document.documentElement head document.head body document.body 所有的 script 对应 js 的 document.scripts 所有的 img 对应 js 的 document.imgs CSS Question: 行内元素和块级元素有什么区别，如何相互转换 块级元素： 独占一行,默认情况下，其宽度自动填满其父元素宽度 可以设置margin和padding属性 可以设置width，height属性 行内元素： 相邻的行内元素会排列在同一行里，直到一行排不下，才会换行，其宽度随元素的内容而变化 行内元素起边距作用的只有margin-left、margin-right、padding-left、padding-right，其它属性不会起边距效果。 不可置换行内元素不能设置width、height和垂直方向上的 margin，而可置换行内元素(&amp;lt;img&amp;gt;，&amp;lt;input&amp;gt;等)则可以。 行内元素又分为可置换元素与不可置换元素。可置换元素展示的内容是通过元素的 src、value 等属性或 CSS content 属性从外部引用得到的，可被替换的，如&amp;lt;img&amp;gt;，&amp;lt;input&amp;gt;, &amp;lt;textarea&amp;gt;等。剩下的就是不可置换元素。 通过display: block; display: inline; 来转换
JavaScript Question: json和jsonp的区别 json 是一种数据结构 jsonp 是一种用于跨域的技术，JSON with Padding 的略称，是 json 的一种‘使用模式’，可以跨域的获取到数据 script 标签可以实现跨域，而且可以跨域执行 js 文件，因此可以插入 script 标签来引入 js 文件，通过动态生成 js 文件，客户端通过执行 js 文件中的函数，获取返回值来得到需要的数据。 优点是兼容性较佳，支持服务器和浏览器的双向通信，缺点是只支持 get 请求。 Question: 如下代码的返回值 String(&amp;#39;11&amp;#39;) == new String(&amp;#39;11&amp;#39;); String(&amp;#39;11&amp;#39;) === new String(&amp;#39;11&amp;#39;); Result: true false</description></item><item><title>毎日のフロントエンド 103</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-103/</link><pubDate>Tue, 28 Dec 2021 21:04:50 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-103/</guid><description>第一百零三日 HTML Question: 描述cookies、sessionStorage和localStorage的区别 Cookies 网站为了对用户身份做标识而存储在本地的数据。在同源的 http 请求中会被一同发送，因此会占用网络带宽。最大大小 4KB。以前每个域名支持 20 个，新版本的增加到 50 个。生命周期为设置的过期时间，若不设置则到关闭浏览器为止。 localStorage HTML5 新增的，不会将数据自动发送到服务器，仅存储在本地，并且会永久存储，除非用户主动删除，不然不会过期或者自动清除。 sessionStorage 有效期限为一次 session 会话（即一个 tab 页从打开到关闭之间的时间段）。webStorage 在不同浏览器的最大大小不同，因此一般以 5M 为上限较为安全。 CSS Question: 低版本 IE 的盒子模型 CSS 盒子由四部分组成，由内到外依次是：content、padding、border、margin
所谓盒子模型定义的是盒子宽高的计算方法:
IE盒子模型的宽高为 content、padding、border 之和 W3C 盒子的宽高仅为 content 从页面布局来说IE 盒子模型实际上更实用一点，这也是后来 W3C 提供 box-sizing 属性用于切换盒子模型的原因。box-sizing:border-box;
JavaScript Question: 如何更好地处理Async/Await的异常的 对 promise 对象进行一层包装，通过返回值判断是否有异常</description></item><item><title>毎日のフロントエンド 102</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-102/</link><pubDate>Mon, 27 Dec 2021 20:20:51 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-102/</guid><description>第一百零二日 HTML Question: 行内元素、块级元素、空(void)元素分别有哪些 行内元素 a, b, input, span, label, button, textarea&amp;hellip; 块级元素 div, form, table, h1&amp;hellip;h6, p 空元素 img, input, hr, br, meta, source,track CSS Question: 如何规划响应式布局的 Mobile 优先： 先已较少的 css 代码实现相对简单移动端页面。
JavaScript Question: '1,2,3,4'.split()的结果是什么（包括类型和值） Result: [&amp;quot;1,2,3,4&amp;quot;]
一个长度为 1 的Array，元素类型为String split，其可以接受两个参数: 第一个参数是字符串或正则表达式，从该参数指定的地方分割 stringObject； 第二个参数, 限制返回 Array 的最大长度 split()，默认将整个字符串作为一个元素返回一个长度为 1 的 Array Question: 以下代码执行的结果 var obj = { 2: 3, 3: 4, length: 2, splice: Array.</description></item><item><title>毎日のフロントエンド 101</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-101/</link><pubDate>Sun, 26 Dec 2021 17:44:12 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-101/</guid><description>第一百零一日 HTML Question: accesskey，举例说明它有什么运用场景 毎日のフロントエンド 80 CSS Question: 前端二倍图的理解？移动端使用二倍图比一倍图有什么好处 一倍图：当这个比率为 1:1 时，使用 1 个设备像素显示 1 个 CSS 像素。 二倍图：当这个比率为 2:1 时，使用 4 个设备像素显示 1 个 CSS 像素， 三倍图：当这个比率为 3:1 时，使用 9（3*3）个设备像素显示 1 个 CSS 像素。 JavaScript Question: 防抖和节流 again 防抖：动作绑定事件，动作发生后一定时间后触发事件，在这段时间内，如果该动作又发生，则重新等待一定时间再触发事件。 function debounce(func, time) { let timer = null; return () =&amp;gt; { clearTimeout(timer); timer = setTimeout(() =&amp;gt; { func.apply(this, arguments); }, time); }; } 节流： 动作绑定事件，动作发生后一段时间后触发事件，在这段时间内，如果动作又发生，则无视该动作，直到事件执行完后，才能重新触发。 function throtte(func, time) { let activeTime = 0; return () =&amp;gt; { const current = Date.</description></item><item><title>毎日のフロントエンド 100</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-100/</link><pubDate>Sat, 25 Dec 2021 20:03:03 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-100/</guid><description>第一百日 HTML Question: HTML5为输入框添加语音输入的功能呢 原理：在人说话时接收语音，然后放到谷歌后台，谷歌自己写的语音识别系统，再返回数据 &amp;lt;input type=”text” speech x-webkit-speech /&amp;gt;
CSS Question: 如何让大小不同的图片等比缩放不变形显示在固定大小的div里 图片等比缩放 img{ object-fit: cover/contain; width:100%}
div 宽高比例固定，跟随屏幕变化而变化，利用 padding 垂直方向的属性来实现
object-fit: 属性指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框。
典型的可替换元素有： &amp;lt;iframe&amp;gt; &amp;lt;video&amp;gt; &amp;lt;embed&amp;gt; &amp;lt;img&amp;gt; contain: 被替换的内容将被缩放，以在填充元素的内容框时保持其宽高比。 整个对象在填充盒子的同时保留其长宽比，因此如果宽高比与框的宽高比不匹配，该对象将被添加“黑边”。 cover: 被替换的内容在保持其宽高比的同时填充元素的整个内容框。如果对象的宽高比与内容框不相匹配，该对象将被剪裁以适应内容框。 fill: 被替换的内容正好填充元素的内容框。整个对象将完全填充此框。如果对象的宽高比与内容框不相匹配，那么该对象将被拉伸以适应内容框。 none: 被替换的内容将保持其原有的尺寸。 scale-down: 内容的尺寸与 none 或 contain 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。 JavaScript Question: 为什么 for 循环嵌套顺序会影响性能？ var t1 = new Date().getTime(); for (let i = 0; i &amp;lt; 100; i++) { for (let j = 0; j &amp;lt; 1000; j++) { for (let k = 0; k &amp;lt; 10000; k++) {} } } var t2 = new Date().</description></item><item><title>毎日のフロントエンド 99</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-99/</link><pubDate>Fri, 24 Dec 2021 14:22:47 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-99/</guid><description>第九十九日 HTML Question: HTML5 的页面可见性（Page Visibility）有哪些应用场景 Document.hidden 只读 如果页面处于被认为是对用户隐藏状态时返回 true，否则返回 false。 Document.visibilityState 只读 是一个用来展示文档当前的可见性的 DOMString 。该属性的值为以下值之一： visible : 页面内容至少是部分可见。 在实际中，这意味着页面是非最小化窗口的前景选项卡。 hidden : 页面内容对用户不可见。 在实际中，这意味着文档可以是一个后台标签，或是最小化窗口的一部分，或是在操作系统锁屏激活的状态下。 prerender : 页面内容正在被预渲染且对用户是不可见的(被document.hidden当做隐藏). 文档可能初始状态为 prerender，但绝不会从其它值转为该值。 Document.onvisibilitychange CSS Question: 比较 opacity: 0; visibility: hidden; display: none; 优劣和适用场景 可见性：
display:none;: 让元素完全从渲染树中消失，渲染的时候不占据任何空间, 不能点击 visibility: hidden;: 不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见，不能点击 opacity: 0;: 不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见，可以点击 继承性：
display: none 和 opacity: 0 ：是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示。 visibility: hidden：是继承属性，子孙节点消失由于继承了 hidden，通过设置 visibility: visible;可以让子孙节点显式。 性能：</description></item><item><title>毎日のフロントエンド 98</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-98/</link><pubDate>Thu, 23 Dec 2021 16:33:08 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-98/</guid><description>第九十八日 HTML Question: 列举出常用的 meta 标签的写法和作用 &amp;lt;meta&amp;gt;用来描述网页的元信息；诸如字符编码，浏览器引擎编译，文档信息等等；
charset：声明当前文档的字符编码，用于浏览器解析文档；如： &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
name：声明当前文档的元信息；常用的有 viewport，keywords，description 等；
viewport：文档视口设置，如初始视口大小（initial-scale），是否允许用户缩放（user-scalable）等； keywords：网页的关键字，常用于搜索引擎对于该网页的搜索关键字； description：网页的描述信息； http-equiv：可以用来设定一些属性改变服务器或浏览器引擎对文档的编译行为；
http-equiv 和 name 的属性，属性值通过&amp;lt;meta&amp;gt;标签的content属性来设置；例如：&amp;lt;meta name=&amp;quot;format-detection&amp;quot; content=&amp;quot;telephone=no&amp;quot; /&amp;gt;
JavaScript Question: 下列代码运行结果 function changeObjProperty(o) { o.siteUrl = &amp;#39;http://www.123.com&amp;#39;; o = new Object(); o.siteUrl = &amp;#39;http://www.456.com&amp;#39;; } let webSite = new Object(); changeObjProperty(webSite); console.log(webSite.siteUrl); Result: http://www.123.com
// 这里把o改成a // webSite引用地址的值copy给a了 function changeObjProperty(a) { // 改变对应地址内的对象属性值 a.</description></item><item><title>毎日のフロントエンド 97</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-97/</link><pubDate>Wed, 22 Dec 2021 16:21:09 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-97/</guid><description>第九十七日 HTML Question: DOCTYPE 有什么作用 DOCTYPE声明指定了浏览器对于 HTML 文档解析的类型；
HTML5的DOCTYPE只有一种： &amp;lt;!DOCTYPE html&amp;gt;:在 HTML5中，DOCTYPE 唯一的作用是启用标准模式。更早期的 HTML 标准会附加其他意义，但没有任何浏览器会将 DOCTYPE 用于怪异模式和标准模式之间互换以外的用途。 HTML4.01的DOCTYPE有三种： Strict是不包括展示性和废弃的属性 以及框架集framset Transitional 包括展示性和废弃属性 不包含框架集 Framset 在Transitional 基础上包括框架集 NOTE:
位置必须放在文档顶端，任何放在 DOCTYPE 前面的东西，比如批注或 XML 声明，会令 IE9 或更早期的浏览器触发怪异模式 DOCTYPE 不是 HTML 标签，它是一个它是浏览器模式渲染的指令，更没有结束标签 &amp;lt;!DOCTYPE&amp;gt; 声明大小写不敏感 CSS Question: 如何更改placeholder的字体颜色和大小 &amp;lt;style&amp;gt; /* Chrome浏览器 */ input::-webkit-input-placeholder { color: red; } /* 火狐浏览器 */ input::-moz-placeholder { color: red; } /* IE */ input:-ms-input-placeholder { color: red; } &amp;lt;/style&amp;gt; &amp;lt;body&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;你好&amp;#34;&amp;gt; &amp;lt;/body&amp;gt; JavaScript Question: 如何给 li 绑定事件（ul下有 1000+个li） for循环遍历所有li，然后添加事件,引起大量浏览器重绘与重排。</description></item><item><title>毎日のフロントエンド 96</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-96/</link><pubDate>Tue, 21 Dec 2021 11:06:04 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-96/</guid><description>第九十六日 HTML Question: HTML 标签：字体、居中、文字加粗、下标 &amp;lt;font&amp;gt; 已废弃 &amp;lt;center&amp;gt;已废弃: 该特性已经从 Web 标准中删除 &amp;lt;b&amp;gt; HTML 提醒注意（&amp;ldquo;Bring Attention To&amp;rdquo;）元素,替代方案是使用 CSS font-weight 属性来创建粗体文字。 &amp;lt;strong&amp;gt;元素表示某些重要性的文本，&amp;lt;em&amp;gt;强调文本，而&amp;lt;mark&amp;gt;元素表示某些相关性的文本。&amp;lt;b&amp;gt;元素不传达这样的特殊语义信息；仅在没有其他合适的元素时使用它。 下标&amp;lt;sub&amp;gt;:这个元素不能用于样式上的目的，比如产品名称 LaTeX 的样式，这时应该使用 CSS 样式： vertical-align 属性的 sub 值能实现相同效果。 CSS Question: 行内 css 和 important 哪个优先级高 !important 将覆盖行内 css 行内 css&amp;gt;id 选择器(#)&amp;gt;伪类(:)&amp;gt;属性选择器([])&amp;gt;类选择器(.) &amp;gt; 类型选择器(div p a等) &amp;gt; 通用选择器(*)
JavaScript Question: 要实现一个 js 的持续动画，有什么比较好的方法 window.requestAnimationFrame()1
Question: 下列代码输出结果 var a = 10; (function () { console.log(a); a = 5; console.</description></item><item><title>毎日のフロントエンド 95</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-95/</link><pubDate>Mon, 20 Dec 2021 09:20:03 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-95/</guid><description>第九十五日 HTML Question: HTML5 标准提供了哪些新的 API 两个选择器 API
document.querySelector() document.querySelectAll() 地理定位 API
getCurrrentPosition() 多媒体 API
&amp;lt;video&amp;gt;&amp;lt;/video&amp;gt; &amp;lt;audio&amp;gt;&amp;lt;/audio&amp;gt; 拖放
&amp;lt;div ondrop=&amp;#34;drop(event)&amp;#34; ondragover=&amp;#34;allowDrop(event)&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div draggable=&amp;#34;true&amp;#34; ondragstart=&amp;#34;drag(event)&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 文件
window.requestFileSystem() XHR2
var xhr = new XMLHttpRequest(); xhr.open(&amp;#34;POST&amp;#34;, &amp;#34;@Url.Action(&amp;#34;Upload&amp;#34;)&amp;#34;) canvas svg CSS Question: 当一个元素被设置为浮动后，它的display值变为什么呢 一个元素被设为绝对定位或者浮动后，其display计算值就变为了block，尽管其表现形式和inline-block类似——包裹内部元素且不超出包含块的特性。
在控制台尝试可验证：
var span = document.createElement(&amp;#39;span&amp;#39;); document.body.appendChild(span); console.</description></item><item><title>毎日のフロントエンド 94</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-94/</link><pubDate>Sun, 19 Dec 2021 15:17:29 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-94/</guid><description>第九十四日 HTML Question: 使用 HTML5 需要遵守哪些设计原则 避免不必要的复杂性 html4
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C/DTD HTML 4.01//EN&amp;quot; &amp;quot;http://www.w3.org/TR/html4/strict.dtd&amp;quot;&amp;gt;
html5
&amp;lt;!DOCTYPE html&amp;gt;
html4
&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;
html5
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
支持已有内容
解决现实的问题
语义化
html5 新增了多个元素，其中包括：section、article、aside和nav，它们代表了一种新的内容模型给内容分区。
平稳退化 浏览器在遇到不识别的 type 值时，会将 type 的值解释为 text
input type=&amp;#34;number&amp;#34; input type=&amp;#34;search&amp;#34; input type=&amp;#34;range&amp;#34; input type=&amp;#34;email&amp;#34; input type=&amp;#34;date&amp;#34; input type=&amp;#34;url&amp;#34; 最终用户优先 CSS Question: 为什么会出现浮动？在什么时候需要清除浮动 什么是浮动：我们在做布局的时候用到的一种技术，通过浮动可以让元素左右浮动，然后通过 margin 调整位置 工作原理：使元素脱离文档流，让元素可以左右浮动，直到遇到另一个浮动元素的边缘才停止。 带来的问题：浮动元素会造成父级元素无法自动获取高度，导致父级塌陷，布局错乱。 JavaScript Question: 用 js 写出死循环的方法有哪些 while (true) {} for (let i = 0; i &amp;gt; 0; i++) {} // 这个等价于 while for (;;) {} let i = 0; do { i++; } while (i &amp;gt; 0); // 不设置结束条件 function fn(a) { console.</description></item><item><title>毎日のフロントエンド 93</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-93/</link><pubDate>Sat, 18 Dec 2021 20:27:51 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-93/</guid><description>第九十三日 HTML Question: 用svg画一个圆 &amp;lt;svg width=&amp;#34;500&amp;#34; height=&amp;#34;500&amp;#34;&amp;gt; &amp;lt;circle cx=&amp;#34;100&amp;#34; cy=&amp;#34;100&amp;#34; r=&amp;#34;80&amp;#34; fill=&amp;#34;skyblue&amp;#34;&amp;gt;&amp;lt;/circle&amp;gt; &amp;lt;/svg&amp;gt; CSS Question: 写出 div 在不固定高度的情况下水平垂直居中的方法 flex布局: #section { display: flex; justify-content: center; align-items: center; } transform属性 .father { position: relative; } .children { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); } JavaScript Question: js 的函数有哪几种调用形式 定义：function fn(){}
常见调用：fn() 作为对象方法调用： let obj = {fn:function(){}}; obj.fn() 使用构造函数调用：new fn() 使用 call apply bind 调用：fn.</description></item><item><title>毎日のフロントエンド 92</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-92/</link><pubDate>Fri, 17 Dec 2021 17:35:52 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-92/</guid><description>第九十二日 HTML Question: ISISO8859-2字符集 ISO/IEC 8859-1，又称 Latin-1 或“西欧语言”，ISO/IEC 8859-2 Latin-2 或“中欧语言”，是国际标准化组织内 ISO/IEC 8859 的 8 位字符集。它以 ASCII 为基础，在空置的 0xA0-0xFF 的范围内，加入 192 个字母及符号，藉以供使用变音符号的拉丁字母语言使用。 (ASCII 的扩展)
CSS Question: 媒体查询 media query
JavaScript Question: 为什么{} + [] === 0为true {} 被认为是代码块,不参与计算， 因而 +[] === 0 // true; 如果写成 [] + {} 则结果为 [object Object] 手写实现 Array.flat() 方法一
function flat(arr) { const stack = [...arr]; const res = []; while (stack.length) { const next = stack.</description></item><item><title>毎日のフロントエンド 91</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-91/</link><pubDate>Thu, 16 Dec 2021 11:56:42 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-91/</guid><description>第九十一日 HTML Question: 描述下元素的href和src有什么区别 概念不同 href用于在当前文档和引用资源之间确立联系 src用于将资源替换当前元素 解析方式不同 href解析时，会并行下载资源且不会停止当前文档处理， 异步 src解析时，会暂停当前文档处理， 同步 JavaScript Question: null和undefined的区别是什么？这两者分别运用在什么场景 概念方面: undefined:一般是简单数据类型,表示此处应该有个值,但是当前尚未赋值 null:一般是复杂数据类型,表示不存在 用途方面: undefined: 返回执行之后无返回值/ 获取对象不存在的属性值 null: 原型链的最顶部的不存在对象 es6 的结构与函数默认值，只有 undefined 可设默认值，null 不能 +null 为 0，+undefined 为 NaN JSON.stringify(undefined) 为 undefined，JSON.stringify(null) 为 'null' JSON.stringify({a:undefined}) 为 '{}'，JSON.stringify({a:null}) 为 '{&amp;quot;a&amp;quot;:null}' typeof null 为 'object'，typeof undefined 为 'undefined' null == undefined // true</description></item><item><title>毎日のフロントエンド 90</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-90/</link><pubDate>Wed, 15 Dec 2021 15:51:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-90/</guid><description>第九十日 HTML Question: ol和ul标签的区别？它们的运用场景分别是什么 ol 为有序列表，ul 为无需列表。浏览器默认会给这两个加上不同的样式。可以通过 list-style-type 来改变样式。
ol 的列表前会添加序号 ul 的列表前则是圆点 ol 和 ul 有语义上的区别，对于确实有顺序关系的我们应该使用 ul。
CSS Question: CSS 的overflow属性定义溢出元素内容区的内容会如何处理 visible（默认值）：溢出的内容会照常显示在元素内容区之外； hidden：溢出的内容会被裁剪； scroll：溢出的内容会出现在滚动区，通过滚动条滚动可以看到； auto：当内容溢出时表现同scroll； 除了 visible 之外，其他的属性都会触发 BFC。overflow:hidden 也常常被用来进去浮动的清除。
JavaScript Question: 写个方法随机打乱一个数组 毎日のフロントエンド　24
function shuffle(arr) { arr.sort(() =&amp;gt; Math.random() - 0.5); } 以上方法不能真正随机打乱数组。
Fisher–Yates shuffle 算法
function shuffle(arr) { let i = arr.length; while (i) { let j = Math.</description></item><item><title>毎日のフロントエンド 89</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-89/</link><pubDate>Tue, 14 Dec 2021 12:28:13 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-89/</guid><description>第八十九日 HTML Question: a 标签的href和onclick属性同时存在时哪个先触发 onclick先触发，判断依据是在onclick中使用preventDefault方法可以阻止a标签的跳转，说明 a 标签的跳转行为是一个默认行为
CSS Question: 外层有一个自适应高度的 div，里面有两个 div，一个高度固定 300px，另一个如何填满剩余的高度 设置外层自适应高度的容器为flex布局，利用flex-basis属性即可实现自动填满剩余高度 .container { display: flex; flex-flow: column nowrap; height: 500px; border: 2px dashed orange; } .area1 { flex-basis: 300px; background-color: lightblue; } .area2 { flex: 1; background-color: darkcyan; } height: calc(100% - 300px); JavaScript Question: js异步加载有哪些方案 将script标签放在body结束标签之前
会先加载 dom 树，然后再加载 js 脚本 &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; ..... &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;.</description></item><item><title>毎日のフロントエンド 88</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-88/</link><pubDate>Mon, 13 Dec 2021 10:17:48 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-88/</guid><description>第八十八日 HTML Question: 怎么使用HTML5来获取定位？定位不准怎么解决 navigator.geolocation 使用地理位置定位 - Web API 接口参考 | MDN CSS Question: CSS 样式覆盖规则 首先看权重，权重高的样式会覆盖权重低大的样式。!important &amp;gt; #id &amp;gt; .class &amp;gt; tag &amp;gt; * 同等权重时，css 靠后的覆盖靠前的（就近原则），只与 css 书写的顺序有关，与 class 引用的顺序无关 行内样式 &amp;gt; 内联样式 &amp;gt; 外联样式 JavaScript Question: 判断 instanceof 的结果并解释原因 function test() { return test; } new test() instanceof test; Result: false
instanceof 运算符将检测右端值的 prototype 属性是否在左端值的原型链（[[Prototype]](__proto__) 属性）上 如果不在，则向上查找（[[Prototype]] 的 [[Prototype]]，…），直到找遍左端值的整个原型链。 如果函数明确返回 non-primitive(即，引用类型) 值，那么 new 运算符的结果将是这个值，也就是说，原式相当于test instanceof test</description></item><item><title>毎日のフロントエンド 87</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-87/</link><pubDate>Sun, 12 Dec 2021 15:34:58 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-87/</guid><description>第八十七日 HTML Question: 举例说明如何原样输出 HTML 代码，不被浏览器解析 &amp;lt;pre&amp;gt;1 &amp;lt;code&amp;gt;2 &amp;lt;textarea&amp;gt;3 &amp;lt;textarea rows=&amp;#34;&amp;#34; cols=&amp;#34;&amp;#34; style=&amp;#34;border: none;resize: none;width: 100%;&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;div2&amp;#34;&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;/textarea&amp;gt; CSS Question: 写出几个初始化 CSS 的样式，并解释说明为什么要这样写 https://necolas.github.io/normalize.css/latest/normalize.css
因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对 CSS 初始化往往会出现浏览器之间的页面显示差异 初始化 CSS 样式可以提高编码质量，保持代码的统一性，如果不初始化，重复的 CSS 样式很多。 Examples:
/*清除元素默认的内外边距 */ * { margin: 0; padding: 0; } /*让所有斜体 不倾斜*/ em, i { font-style: normal; } /*去掉列表前面的小点*/ li { list-style: none; } /*图片没有边框 去掉图片底侧的空白缝隙*/ img { border: 0; /*ie6*/ vertical-align: middle; } /*取消链接的下划线*/ a { text-decoration: none; } /*清除浮动*/ .</description></item><item><title>毎日のフロントエンド 86</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-86/</link><pubDate>Sat, 11 Dec 2021 20:18:58 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-86/</guid><description>第八十六日 HTML Question: HTML5的ruby标签，有哪些应用场景 HTML &amp;lt;ruby&amp;gt; 元素 被用来展示东亚文字注音或字符注释。
CSS Question: display有哪些值？分别说明他们的作用是什么 常用：
display:block/inline-block 给元素转块/转行内块 display:inline 把元素转成内联元素（我很少用到） display:none 让元素消失，不显示 display:flex 弹性布局 display:grid 网格布局 JavaScript Question: 写出执行结果,并解释原因 var a = 0; if (true) { a = 10; console.log(a, window.a); function a() {} console.log(a, window.a); a = 20; console.log(a, window.a); } console.log(a); Result:
10 0 10 10 20 10 10 1. 变量提升 变量的提升是以变量作用域来决定的，即全局作用域中声明的变量会提升至全局最顶层，函数（或者块级）内声明的变量只会提升至该作用域最顶层。
console.log(a); var a = 10; // 等价于 var a; console.</description></item><item><title>毎日のフロントエンド 85</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-85/</link><pubDate>Fri, 10 Dec 2021 17:06:03 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-85/</guid><description>第八十五日 HTML Question: iframe的使用场景有哪些 典型系统结构，左侧是功能树，右侧就是一些常见的 table 或者表单之类的。每一个功能，单独分离，采用 iframe ajax 上传文件 加载别的网站内容，例如 google 广告，网站流量分析 在上传图片时，不用 flash 实现无刷新 跨域访问的时候可以用到 iframe，使用 iframe 请求不同域名下的资源 CSS Question: 怎么让 body 高度自适应屏幕 Solution: body{height:100vh}
设置body{height：100%} 不可行
height：100% 是相对于父元素来说的，如果只设置 body 的高度属性，由于其父元素是 html 高度未设置，且并非浏览器窗口高度 只设置 body 为 100%是不能达到效果的，必须html，body都设置 100% body{height: 100vh}直接把高度设置成了视口高度，与html大小无关 JavaScript Question: js 延迟加载的方式有哪些 defer 属性1 async 属性1 动态创建 DOM 方式 使用 setTimeout 延迟方法 让 JS 最后加载 使用 jQuery 的 getScript 方法 Question: 写出执行结果,并解释原因 let num = 10; const increaseNumber = () =&amp;gt; num++; const increasePassedNumber = (number) =&amp;gt; number++; const num1 = increaseNumber(); const num2 = increasePassedNumber(num1); console.</description></item><item><title>毎日のフロントエンド　 84</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-84/</link><pubDate>Thu, 09 Dec 2021 17:14:12 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-84/</guid><description>第八十四日 HTML Question: a标签下的href=&amp;quot;javascript:void(0)&amp;quot;起到了什么作用 当用户点击一个以 javascript: 开头的URI 时，它会执行 URI 中的代码，然后用返回的值替换页面内容，除非返回的值是undefined。void运算符可用于返回undefined。
&amp;lt;a href=&amp;#34;javascript:void(0);&amp;#34;&amp;gt; 这个链接点击之后不会做任何事情，如果去掉 void()， 点击之后整个页面会被替换成一个字符 0。 &amp;lt;/a&amp;gt; &amp;lt;p&amp;gt; chrome中即使&amp;lt;a href=&amp;#34;javascript:0;&amp;#34;&amp;gt;也没变化，firefox中会变成一个字符串0 &amp;lt;/p&amp;gt; &amp;lt;a href=&amp;#34;javascript:void(document.body.style.backgroundColor=&amp;#39;green&amp;#39;);&amp;#34;&amp;gt; 点击这个链接会让页面背景变成绿色。 &amp;lt;/a&amp;gt; void 运算符 对给定的表达式进行求值，然后返回 undefined。
void关键字在 js 的含义为执行一个表达式，但不会返回任何值（即undefined）；因此 void(0)语句相当于执行表达式 0，然后不返回任何值； href=&amp;quot;javascript:void(0)&amp;quot;的作用是点击链接后不发生任何行为，常用于阻止页面刷新或跳转 CSS Question: font-style的属性有Italic和oblique，区别 italic和oblique都是向右倾斜的文字, 但区别在于Italic是指斜体字，而Oblique是倾斜的文字，对于没有斜体的字体应该使用 Oblique 属性值来实现倾斜的文字效果
JavaScript Question: 简述浏览器同源策略的理解 浏览器的同源安全策略 为了安全，浏览器同源策略是指，某个页面上执行的 AJAX请求只能访问到同域名下同端口的 URL
跨域 跨域请求不是 JS 限制的，是浏览器的同源策略所限制(可以把同源策略当成浏览器的一种约定，安全策略) 目的是从一个服务去请求另外一个域名和端口不一样的服务从而拿到所需要的数据。(一半用于调用别人的接口数据等) 解决跨域一般使用jsonp或者服务端设置 Response header Access-control-Allow-Origin, Access-Control-Allow-Method
Question: 写出执行结果,并解释原因 const company = { name: &amp;#39;facebook&amp;#39; }; Object.</description></item><item><title>毎日のフロントエンド　 83</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-83/</link><pubDate>Wed, 08 Dec 2021 17:52:29 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-83/</guid><description>第八十三日 HTML Question: 在新窗口打开链接的方法是什么？那怎么设置全站链接都在新窗口打开 a标签的target属性 &amp;lt;a href=&amp;#34;#&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; 2.在 head 标签下,为所有的链接设置默认的打开方式为新窗口打开；
&amp;lt;head&amp;gt; &amp;lt;base target=&amp;#34;_blank&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; JavaScript Question: 举例说明 js 如何实现继承 JS 基于原型链实现的继承，简单来说就是通过对象的__proto__实现的向上查找。
原型 JS 中的对象包含了一个prototype的内部属性，这个属性所对应的就是该对象的原型, in chrome [[prototype]] or __proto__。
所有引用类型（函数，数组，对象）都拥有__proto__属性（隐式原型) 所有函数除了有proto属性之外还拥有prototype属性（显式原型） 原型对象：每创建一个函数，该函数会自动带有一个prototype属性，该属性是一个指针，指向了一个对象，我们称之为原型对象。 函数除了有__proto__属性之外还拥有prototype属性
实例对象只有__proto__（隐式原型），构造函数既有 __proto__（隐式原型）也有prototype（显式原型）
__proto__ 和 prototype 都是一个对象，既然是对象，就表示他们也有一个 __proto__
a.__proto__.__proto__; A.prototype.__proto__; 实例对象 a 的隐式原型指向它构造函数的显式原型 a.__proto__ === A.prototype; 当调用某种方法或查找某种属性时，首先会在自身调用和查找，如果自身并没有该属性或方法，则会去它的__proto__属性中调用查找，也就是它构造函数的prototype中调用查找。 原型链 查找属性时，如果本身没有，则会去__proto__中查找，也就是构造函数的显式原型中查找，如果构造函数的显式原型中也没有该属性，因为构造函数的显式原型也是对象，也有__proto__，那么会去它的显式原型中查找，一直到 null, Object.</description></item><item><title>毎日のフロントエンド　 82</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-82/</link><pubDate>Tue, 07 Dec 2021 12:20:43 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-82/</guid><description>第八十二日 CSS Question: 遇到过IE6/7/8/9的 BUG 及解决方法 IE6 margin双边距问题 IE67 li间隙问题 图片间隙问题——vertical-align：top ie6 下高度小于19px处理成19px； font-size:0;或者overflow：hidden ie8 以下滤镜问题，filter:alpha(opacity=50) IE6 position:fixed 不兼容，fixed定位 ie6 兼容，js 处理，通过获取滚动高度，赋值给需要固定的元素，设置绝对定位，设置top ie6 下父级的overflow：hidden是保不住子级的相对定位的（relative）-解决，给父级加定位 ie6 下，绝对定位的父级，宽高是奇数的话，定位偏移会出现 1px 的偏差 ie6 下，内容会撑开设置好的宽度 ie6，7 3px问题 &amp;lt;p&amp;gt;&amp;lt;h3&amp;gt;&amp;lt;/h3&amp;gt;&amp;lt;/p&amp;gt;会把 p 元素分割成两个，原因，嵌套的规范性，p 需要嵌套 inline 元素 在 ie6 下，1px dotted #0 不兼容。精度问题，可以用背景平铺 ie6 下margin传递需要触发haslayout，父级有边框时，子元素margin值消失，解决办法，触发父级haslayout ie6 下当一行子元素占有的宽度之和与父级的宽度相差超过3px或者有不满行状态的时候，最后一行子元素的下margin就会失效 ie6 下的文字溢出 bug 条件 1，子元素的宽度和父级的宽度相差小于 3px 的时候，2，两个浮动元素中间有注释或内联元素——解决办法：用 div 吧注释或内联元素包裹起来 ie6 下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位会消失，解决办法：给定位元素外面包裹div ie6，7 下，输入类型的表单控件上下各有1px的间隙——解决办法：给input加浮动 ie6，7 下，输入类型的表单控件加border：none无效，还是会出现边框——解决办法：1，给border：0;2， 重置input的背景 ie6，7 下，输入类型的表单控件输入文字的时候，背景图片会跟随移动——解决办法：把背景加给父级 处理 ie6 png图片兼容问题 js 插件，DD_belatedPNG.</description></item><item><title>毎日のフロントエンド　 81</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-81/</link><pubDate>Mon, 06 Dec 2021 10:51:02 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-81/</guid><description>第八十一日 HTML Question: HTML5的Device API应用场景 dial: 拨打电话 vibrate: 设备振动 setWakelock: 设置应用是否保持唤醒（屏幕常亮）状态 isWakelock: 获取程序是否一直保持唤醒（屏幕常亮）状态 setVolume: 设置设备的系统音量 getVolume: 获取设备的系统音量 JavaScript Question: 在 js 中怎么捕获异常，应用场景 Js 捕获异常的方法:
try catch finally window.onerror = function(message, source, lineno, colno, error) { ... } try catch finally try catch finally 只能捕获运行时的错误，无法捕获语法错误，可以拿到出错的信息，堆栈，出错的文件、行号、列号。try catch finally 语句标记要尝试的语句块，并指定一个出现异常时抛出的响应。
try { // try_statements throw new TypeError(&amp;#39;Test&amp;#39;); } catch (e) { // catch_statements console.log(&amp;#39;catch_statements&amp;#39;); if (e instanceof TypeError) { // handle this expected error console.</description></item><item><title>毎日のフロントエンド　 80</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-80/</link><pubDate>Sun, 05 Dec 2021 16:12:48 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-80/</guid><description>第八十日 HTML Question: 简述HTML的快捷键属性是哪个？并举例说明有什么用 accesskey属性目前是 h5 标准中的一个全局快捷键访问属性，通过在任意元素上注入accesskey属性值，在浏览器中触发相应的快捷键 alt + key or control + alt(option) + key(macos)，即可实现对相应元素的 focus 或 click；
&amp;lt;a href=&amp;#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/accesskey&amp;#34; target=&amp;#34;_blank&amp;#34; accesskey=&amp;#34;x&amp;#34; &amp;gt;快捷键x：accesskey&amp;lt;/a &amp;gt; &amp;lt;div accesskey=&amp;#34;z&amp;#34; onclick=&amp;#34;this.style.color = &amp;#39;red&amp;#39;;&amp;#34;&amp;gt;快捷键z：变红&amp;lt;/div&amp;gt; CSS Question: 说明如何强制（自动）中、英文换行与不换行 word-break:break-all;只对英文起作用，以字母作为换行依据 word-wrap:break-word; 只对英文起作用，以单词作为换行依据 white-space:pre-wrap; 只对中文起作用，强制换行 white-space:nowrap; 强制不换行，都起作用 white-space:nowrap; overflow:hidden; text-overflow:ellipsis;不换行，超出部分隐藏且以省略号形式出现（部分浏览器支持） JavaScript Question: 什么是decodeURI()和encodeURI()是什么 encodeURI()：将 URI 中的每个字符编码为 1-4 个格式为 %xx 的转义序列（xx 为十六进制数），但不包括 ASCII 数字、字母、URL 分隔符（/、?、,、&amp;amp;、...）、以及其他部分 ASCII 字符。具体见 MDN1。
Example: encodeURI('http://example.com/端点?键=值') =&amp;gt; 'http://example.com/%E7%AB%AF%E7%82%B9?%E9%94%AE=%E5%80%BC' decodeURI()：将已经编码的 URI 中的转义序列解码为它们表示的字符，但除了 encodeURI() 不会编码的字符。</description></item><item><title>毎日のフロントエンド　 79</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-79/</link><pubDate>Sat, 04 Dec 2021 17:26:38 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-79/</guid><description>第七十九日 CSS Question: 说说你对BEM规范的理解，同时举例说明常见的CSS规范有哪些 BEM规范 CSS 的命名规范又叫做 BEM 规范，BEM - Block Element Modifier 它可以快速创建出可复用的前端组件和前端代码。
Block, 代表了一个独立的块级元素，可以理解为功能组件块，一个 Block 就是一个独立的功能区块，比如头部是一个 block，表单功能输入框也可以是一个 block。block 功能可大可小。 Element, 是 Block 的一部分不能独立来使用，所有的 Element 都是与 Block 紧密关联的。例如一个带有 icon 的输入框，那么这个 icon 就是输入框 block 的一个 element。 Modifier，是用来修饰 Block 的一个 Element，表示 block 或者 element 在外观或者行为上的改变。例如前文提到的输入框 Block，当鼠标悬停时边框高亮，那么这个高亮的效果就应该用 Modifier 来实现。 BEM 命名 尽量使用类名选择器，不要使用 tag 或者 id 选择器 使用小写字母、数字或者-，多个单词描述时采用-来连接,例如el-input 使用两个_来连接Block和Element, Block__Element, 例如el-input__icon 使用两个-来连接 Modifier 和 Element 或 Block, Block__Element--modifier 或者 Block--modifier, 例如 el-input--color-primary, el-input__icon--size-small &amp;lt;form action=&amp;#34;&amp;#34; class=&amp;#34;form form--theme-xmas form--simple&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;form__input&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;form__submit form__submit--disabled&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;style&amp;gt; .</description></item><item><title>毎日のフロントエンド　 78</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-78/</link><pubDate>Fri, 03 Dec 2021 11:42:03 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-78/</guid><description>第七十八日 HTML Question: HTML5中的datalist标签 &amp;lt;datalist&amp;gt;: The HTML data list element.
HTML &amp;lt;datalist&amp;gt;元素包含了一组&amp;lt;option&amp;gt;元素，这些元素表示其它表单控件可选值.
用于在用户输入时给出一批建议数据 如果需要用到datalist 请给对应的input的list属性和datalist的 ID 属性设置上一样的属性值 datalist给出的选项用&amp;lt;option&amp;gt;包裹 选项值用 option 的value属性给出。
datalist支持全局属性和事件属性。
&amp;lt;input list=&amp;#34;ice-cream-flavors&amp;#34; id=&amp;#34;ice-cream-choice&amp;#34; name=&amp;#34;ice-cream-choice&amp;#34; /&amp;gt; &amp;lt;!-- list 等于 id 标签中的id要与标签中的list相对应 --&amp;gt; &amp;lt;datalist id=&amp;#34;ice-cream-flavors&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;Chocolate&amp;#34;&amp;gt;&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;Coconut&amp;#34;&amp;gt;&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;Mint&amp;#34;&amp;gt;&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;Strawberry&amp;#34;&amp;gt;&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;Vanilla&amp;#34;&amp;gt;&amp;lt;/option&amp;gt; &amp;lt;/datalist&amp;gt; CSS Question: 遇到overflow: scroll不能平滑滚动怎么解决(移动端) -webkit-overflow-scrolling: touch; JavaScript Question: 数组和对象的迭代方法分别有哪些 Array forEach1: 无返回值，不可中断 map2: 不会修改原数组，返回一个新的数组。如果没写 return 就会返回 undefined filter3: 根据输入的条件将返回值为 true 的项重新组成数组返回出去 some((item, index))4 / every((item, index))5：都是对输入的条件进行判断，some 只要有一个满足就返回 true; every 是需要所有项都满足才返回 true reduce((prev,cur, index))6 / reduceRight((prev, cur, index)) 7：允许我们对数组前一项和当前项进行操作，自定义返回值类型 for of8 Object Object.</description></item><item><title>毎日のフロントエンド　 77</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-77/</link><pubDate>Thu, 02 Dec 2021 20:41:22 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-77/</guid><description>第七十七日 HTML Question: HTML5的img标签属性 srcset 和 sizes 的理解？都有哪些应用场景？ HTMLImageElement.srcset, srcset 的值是一个字符串，用来定义一个或多个图像候选地址，以 ,分割，每个候选地址将在特定条件下得以使用。候选地址包含图片 URL 和一个可选的宽度描述符和像素密度描述符，该候选地址用来在特定条件下替代原始地址成为 src (en-US) 的属性。
The srcset property, along with the sizes (en-US) property, are a crucial component in designing responsive web sites, as they can be used together to make pages that use appropriate images for the rendering situation.
srcset：规定了图片的 src 候选集; sizes：规定了图片在不同条件下的尺寸取值，根据尺寸取值从srcset中找到对应的图片src；配合srcset属性才能使用； 多用于响应式图片或不同像素密度设备的图片适配
CSS Question: 请问display:inline-block在什么时候会显示间隙 display: inline-block 在IE67下会产生4px的空白间隙，原因是换行或空格会占据一定的位置。
解决办法： 设置父元素的font-size: 0; letter-spaceing: -4px;</description></item><item><title>毎日のフロントエンド　 76</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-76/</link><pubDate>Wed, 01 Dec 2021 16:23:08 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-76/</guid><description>第七十六日 HTML Question: HTML5如何识别语音读出的内容和朗读指定的内容 Web Speech API - Web APIs | MDN
SpeechSynthesis - Web APIs | MDN （实验性）
CSS Question: 用CSS画出一个任意角度的扇形，可以写多种实现的方法 一个圆 + 两个绝对定位的半圆 扇形可以通过两个半圆作为遮罩旋转来露出相应的角度实现 &amp;lt;div class=&amp;#34;contain&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;main&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;mask1 common&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;mask2 common&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; .contain { position: relative; width: 200px; height: 200px; } .main { height: 100%; background: lightgreen; border-radius: 100px; } .common { position: absolute; top: 0; width: 50%; height: 100%; } .</description></item><item><title>毎日のフロントエンド　 75</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-75/</link><pubDate>Tue, 30 Nov 2021 09:01:53 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-75/</guid><description>第七十五日 CSS Question: 解释下什么是浮动和它的工作原理是什么？同时浮动会引起什么问题 什么是浮动：通过浮动可以让元素左右浮动，然后通过margin调整位置 工作原理：使元素脱离文档流，让元素可以左右浮动，直到遇到另一个浮动元素的边缘才停止。 带来的问题：浮动元素会造成父级元素无法自动获取高度，导致父级塌陷，布局错乱。 JavaScript Question: js 中=、==、===三个的区别是什么？并说明它们各自的工作过程 = 是赋值运算符
遵循右结合律 返回 lhs(left-hand-side) （但在声明语句（var, let, const）中返回 undefined） 若 rhs(right-hand-side) 是 primitive value （number, string, symbol, undefined, boolean) 则 lhs 被赋值为该值 若 rhs 是 object 则 lhs 被赋值为指向该 object 的 reference const 声明的不变量不能被再次赋值，否则会 throw ReferenceError 如果在局部作用域不使用声明语句就给一个既未声明于局部作用域，也未声明于任何上层作用域的变量赋值，那它将会被创建为一个全局变量。不应该如此使用。 == 是带有 implicit type conversion(隐式类型转换) 的判等运算符
遵循左结合律 返回 boolean === 是严格的判等运算符</description></item><item><title>毎日のフロントエンド　 74</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-74/</link><pubDate>Mon, 29 Nov 2021 16:22:25 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-74/</guid><description>第七十四日 HTML Question: 在a标签上的四个伪类执行顺序是什么 a:link: 定义正常链接的样式 a:visited: 定义已访问过链接的样式 a:hover: 定义鼠标悬浮在链接上时的样式 a:active: 定义鼠标点击链接时的样式 link--visited--hover-active，也就是我们常说到的 LoVe HAte 原则（大写字母就是它们的首字母）
在W3C规范中，也规定了链接的声明顺序： 在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。 在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。
CSS Question: !important，一般在哪些场景使用 !important 可以让样式的 特指度最高，覆盖任何样式，而且本身不可被覆盖。 一般场景就是用来强制覆盖其他样式，用的比较少，不建议使用。
JavaScript Question: 写一个方法随机生成指定位数的字符串 function getRandomString(length) { //let str = Math.random().toString(36).substr(2); // substr: This feature is no longer recommended. // substring(2) remove the 0 and . let str = Math.</description></item><item><title>毎日のフロントエンド　 73</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-73/</link><pubDate>Sun, 28 Nov 2021 18:03:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-73/</guid><description>第七十三日 HTML Question: favicon.ico 有什么作用？怎么在页面中引用？常用尺寸有哪些？可以修改后缀名吗 favicon不仅是网站的头像，也是其可以让浏览器的收藏夹中除了显示相应的标题外，还以图标的方式区分不同的网站。
&amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; type=&amp;quot;image/x-icon&amp;quot; href=&amp;quot;/favicon.ico&amp;quot;&amp;gt;
推荐使用后缀名.ico，对浏览器的支持范围广，一个.ico 文件可以同时满足多个尺寸的需求。
常用尺寸：16*16 32*32 48*48
CSS Question: 在实际编写 css 中遇到过哪些浏览器兼容性的问题？怎么解决的 TODO
postcss - npm postcss/autoprefixer: Parse CSS and add vendor prefixes to rules by Can I Use browserslist/browserslist: 🦔 Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env JavaScript Question: 移动端点击事件为什么会有延迟？延迟多长时间？有哪些方法可以解决 原因：等待 300ms 看用户是点击还是双击缩放</description></item><item><title>毎日のフロントエンド　 72</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-72/</link><pubDate>Sat, 27 Nov 2021 12:06:32 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-72/</guid><description>第七十二日 HTML Question: video和audio分别支持哪些格式 video: MP4、WebM、Ogg audio: MP3、Wav、Ogg CSS Question: 怎么改变选中文本的文字颜色和背景色 Pseudo-elements 伪元素 ::selection { background-color: #222; color: white; } JavaScript Question: 重复字符串的 repeat 函数 let str = &amp;#39;abcd&amp;#39;; function repeat(str, n) { if (typeof str === &amp;#39;string&amp;#39;) { return new Array(n + 1).join(str); } return &amp;#39;Type Error&amp;#39;; } repeat(str, 3); //abcdabcdabcd const repeat = (str, n) =&amp;gt; str.repeat(n); const repeatStr = (str, num) =&amp;gt; { return Array(num + 1) .</description></item><item><title>毎日のフロントエンド　 71</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-71/</link><pubDate>Fri, 26 Nov 2021 17:22:43 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-71/</guid><description>第七十一日 JavaScript Question: 深拷贝对象 使用原生的 Object.assign(),以及展开运算符，以实现浅拷贝 /** * 深度拷贝一个对象 * @param {any} val */ function deepClone(val) { function getType(_val) { return ( Object.prototype.toString .call(_val) // 对_val调用toString方法,比如:一个number调用该方法后,会得到: // &amp;#34;[object Number]&amp;#34; // 然后替换其中的object // 具体调用示例如下: // Object.prototype.toString.call(1) // &amp;#34;[object Number]&amp;#34; // Object.prototype.toString.call({}) // &amp;#34;[object Object]&amp;#34; // Object.prototype.toString.call([]) // &amp;#34;[object Array]&amp;#34; // Object.prototype.toString.call(&amp;#39;&amp;#39;) // &amp;#34;[object String]&amp;#34; // Object.prototype.toString.call(true) // &amp;#34;[object Boolean]&amp;#34; // Object.</description></item><item><title>毎日のフロントエンド　 70</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-70/</link><pubDate>Thu, 25 Nov 2021 15:54:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-70/</guid><description>第七十日 HTML Question: html 的 &amp;lt;a&amp;gt; 标签属性 rel='nofollow' 有什么作用 rel=&amp;quot;nofollow&amp;quot;
&amp;lt;meta name=&amp;quot;robots&amp;quot; content=&amp;quot;nofollow&amp;quot; /&amp;gt;: 告诉搜索引擎爬虫该页面上所有链接都无需追踪。
&amp;lt;a href=&amp;quot;login.aspx&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;登录&amp;lt;/a&amp;gt;: 该页面无需追踪。
JavaScript Question: 写出执行结果，并解释原因 var x = 1; if (function f() {}) { x += typeof f; } console.log(x); Result: 1undefined
条件判断为假的情况有：0，false，''，null，undefined，未定义对象。
函数声明写在运算符中，其为 true，但放在运算符中的函数声明在执行阶段是找不到。 另外，对未声明的变量执行typeOf不会报错，会返回undefined
function f() { return f; } console.log(new f() instanceof f); Result: false
a instanceof b 用于检测 a 是不是 b 的实例, 即检测原型链上有没有 b.</description></item><item><title>毎日のフロントエンド　 69</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-69/</link><pubDate>Wed, 24 Nov 2021 17:19:04 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-69/</guid><description>第六十九日 HTML Question: 怎样禁止表单记住密码自动填充 autocomplete=&amp;quot;off&amp;quot; or autocomplete=&amp;quot;new-password&amp;quot;
&amp;lt;form method=&amp;#34;post&amp;#34; action=&amp;#34;/form&amp;#34;&amp;gt; […] &amp;lt;div&amp;gt; &amp;lt;label for=&amp;#34;cc&amp;#34;&amp;gt;信用卡：&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;cc&amp;#34; name=&amp;#34;cc&amp;#34; autocomplete=&amp;#34;off&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/form&amp;gt; CSS Question: *{box-sizing: border-box;} 作用及好处有哪些 {box-sizing: content-box（初期値）box-sizing: border-box} 盒子的尺寸计算有两种，一种是content-box，还有一种是border-box，两者的不同是计算最大尺寸时是否包含框和内边距
content-box 的 width 不包括 padding 和 border border-box 的 width 包括 padding 和 border (更符合我们通常对一个「盒子」尺寸的认知,省掉一些计算) JavaScript Question: 对base64的理解，它的使用场景有哪些 Base64 是一种二进制到文本的编码方式： 一种将 byte 数组编码为字符串的方法，而且编码出的字符串只包含 ASCII 基础字符。
Base64 不是加密算法，其仅仅是一种编码方式，算法也是公开的，所以不能依赖它进行加密。
Base64 使用到的 64 个字符(加一个填充字符=)：
A-Z 26 个 a-z 26 个 0-9 10 个 + 1 个 / 1 个 Base64 就是为了解决各系统以及传输协议中二进制不兼容的问题而生的。</description></item><item><title>毎日のフロントエンド　 68</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-68/</link><pubDate>Tue, 23 Nov 2021 12:07:51 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-68/</guid><description>第六十八日 HTML Question: 说明HTML5在移动端如何打开 APP &amp;lt;a href=&amp;#39;zhihu://&amp;#39;&amp;gt;打开应用&amp;lt;/a&amp;gt; Android 是利用 deeplink， iOS 是利用 URL Schemes
URL Scheme [scheme:][//authority][path][?query][#fragment] CSS Question: 对 jpg、png、gif 的理解，分别在什么场景下使用？有使用过 webp 吗 jpg: 色彩复杂图片; png: 色彩简单图片; gif: 动图, 或者色彩极简的 icon 等
webp: 判断能使用webp的浏览器就是用webp
WebP是一种支持有损压缩和无损压缩的图片文件格式，根据 Google 的测试，无损压缩后的 WebP 比 PNG 文件少了 26％的体积，有损压缩后的 WebP 图片相比于等效质量指标的 JPEG 图片减少了 25％~34%的体积。
在浏览器中可以采用 JavaScript 检测是否支持 WebP，对支持 WebP 的用户输出 WebP 图片，否则输出其他格式的图片。
JavaScript Question: FormData主要是用来做什么的？它的操作方法有哪些 FormData interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.</description></item><item><title>毎日のフロントエンド　 67</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-67/</link><pubDate>Mon, 22 Nov 2021 14:50:01 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-67/</guid><description>第六十七日 HTML Question: 请写出唤醒拔打电话、发送邮件、发送短信的例子 &amp;lt;a href=&amp;#34;tel:1xxxxxxxx&amp;#34;&amp;gt;一键拨打号码&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;mailto:xxxxxx@xxxx.com&amp;#34;&amp;gt;一键发送邮件&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;sms:1xxxxxxxxx&amp;#34;&amp;gt;一键发送短信&amp;lt;/a&amp;gt; CSS Question: 如何消除 transition 闪屏 .css { -webkit-transform-style: preserve-3d; -webkit-backface-visibility: hidden; -webkit-perspective: 1000; } JavaScript Question: 举例子说说对 js 隐式类型转换的理解 字符串连接符(+)，转换为 String 关系运算符(&amp;gt;,&amp;lt;,&amp;gt;=,&amp;lt;=,==)、算术运算符号(+,-,*,/,%,++,--)，转换为Number 逻辑非运算符(!)，转换为Boolean note: 数组、对象等复杂数据类型在隐式转换时会先使用valueOf()获取其原始值，如果原始值不是 Number 则调用 toString() 转成 Sting，再转成 Number
Boolean转换为false： 0，-0，NaN，undefined，&amp;quot;&amp;quot;，null，[]，false
undefined与null的特殊情况
undefined == undefined; // true undefined == null; // true null == null; // true NaN与任何数据比较都是 false，包括自己。 Question: 手写数组转树 // 递归实现 let input = [ { id: 1, val: &amp;#39;学校&amp;#39;, parentId: null, }, { id: 2, val: &amp;#39;班级1&amp;#39;, parentId: 1, }, { id: 3, val: &amp;#39;班级2&amp;#39;, parentId: 1, }, { id: 4, val: &amp;#39;学生1&amp;#39;, parentId: 2, }, { id: 5, val: &amp;#39;学生2&amp;#39;, parentId: 3, }, { id: 6, val: &amp;#39;学生3&amp;#39;, parentId: 3, }, ]; function buildTree(arr, parentId, childrenArray) { arr.</description></item><item><title>毎日のフロントエンド　66</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-66/</link><pubDate>Sun, 21 Nov 2021 14:43:43 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-66/</guid><description>第六十六日 HTML Question: HTML5如果不写&amp;lt;! DOCTYPE html&amp;gt;, 页面还会正常工作么 页面添加了&amp;lt;! DOCTYPE html&amp;gt;说明该页面采用了W3C标准，如果不加则页面会根据浏览器自身的解析标准来解析，这可能会导致页面在不同的浏览器呈现出不同的效果。
CSS Question: 元素竖向的百分比设置是相对容器的高度吗 当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的
对于一些表示竖向距离的属性，例如padding-top, padding-bottom, margin-top, margin-bottom等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。
JavaScript Question: 事件循环机制(node、浏览器) 为什么会有Event Loop JavaScript的任务分为两种同步和异步，它们的处理方式也各自不同，同步任务是直接放在主线程上排队依次执行，异步任务会放在任务队列中，若有多个异步任务则需要在任务队列中排队等待，任务队列类似于缓冲区，任务下一步会被移到调用栈然后主线程执行调用栈的任务。
调用栈：调用栈是一个栈结构，函数调用会形成一个栈帧，帧中包含了当前执行函数的参数和局部变量等上下文信息，函数执行完后，它的执行上下文会从栈中弹出。
JavaScript是单线程的，单线程是指 js 引擎中解析和执行 js 代码的线程只有一个（主线程），每次只能做一件事情，然而ajax请求中，主线程在等待响应的过程中会去做其他事情，浏览器先在事件表注册ajax的回调函数，响应回来后， 回调函数被添加到任务队列中等待执行，不会造成线程阻塞，所以说 js 处理 ajax 请求的方式是异步的。
综上所述，检查调用栈是否为空以及讲某个任务添加到调用栈中的个过程就是 event loop，这就是 JavaScript 实现异步的核心。
浏览器中的 Event Loop Micro-Task 与 Macro-Task
浏览器端事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。
常见的 macro-task：
setTimeout setInterval &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt; I/O UI渲染 常见的 micro-task:
Promise MutationObserver : 触发指定 DOM 事件时，调用指定的回调函数。MutationObserver 对 DOM 的观察不会立即启动；而必须先调用 observe() 方法来确定，要监听哪一部分的 DOM 以及要响应哪些更改。 Note:</description></item><item><title>毎日のフロントエンド　65</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-65/</link><pubDate>Sat, 20 Nov 2021 19:30:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-65/</guid><description>第六十五日 HTML Question: HTML直接输入多个空格为什么只能显示一个空格 该行为由 CSS white-space 控制，其默认值 normal 的表现即为多个空格压缩成一个
JavaScript Question: 数据类型转换的方法有哪些 数据等于判断时的类型转换
if 等判断只做 Boolean() 转换
包含： if ?: &amp;amp;&amp;amp; ||
Number 与 parse 函数 Number 比 parseInt 能转化更多，比如 &amp;quot;&amp;quot; Infinity [] true 都会被 parseInt 返回 NaN，而 Number 有值。
Number(&amp;#39;&amp;#39;); // 0 parseInt(&amp;#39;&amp;#39;); // NaN Number([1, 2]); // NaN parseInt([1, 2]); // 1 Number(null); // 0 Number(undefined); // NaN parseInt(null); // NaN parseInt(undefined); // NaN ((Number(&amp;#39;1.</description></item><item><title>毎日のフロントエンド　64</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-64/</link><pubDate>Fri, 19 Nov 2021 14:21:57 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-64/</guid><description>第六十四日 HTML Question: 写出 html 提供的几种空格实体 &amp;amp;nbsp;: No-Break Space 不换行空格 &amp;amp;ensp;: En Space 半角空格, en 是字体排印学的计量单位，为 em 宽度的一半(如16px字体中就是8px) &amp;amp;emsp;: Em Space 全角空格, em 是字体排印学的计量单位，相当于当前指定的点数。例如，1em在16px的字体中就是16px。 &amp;amp;thinsp;: Thin Space 窄空格 &amp;amp;zwnj;: Zero Width Non Joiner 是一个不打印字符 此外，浏览器还会把以下字符当作空白进行解析：空格（&amp;amp;#x0020;）、制表位（&amp;amp;#x0009;）、换行（&amp;amp;#x000A;）和回车（&amp;amp;#x000D;）还有（&amp;amp;#12288;）
CSS Question: 举例说明css中颜色的表示方法有几种 颜色单词: blue / lightblue / skyblue / transparent(透明) rgb(0-255, 0-255, 0-255) / rgba(0-255, 0-255, 0-255, 0-1) hsl色相: hsl(色调，饱和度，明度) hsla( 色调，饱和度，亮度，不透明度 ) (兼容性) 十六进制: #0- #FFFFFF ( #0 - #fff ) ( 0-9 a-f | [A-F] ) JavaScript Question: (谜题)如何让(a==1 &amp;amp;&amp;amp; a==2 &amp;amp;&amp;amp; a==3)的值为 true，把 == 换成 === 后还能为true吗 const a = { value: 0 }; a.</description></item><item><title>毎日のフロントエンド　63</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-63/</link><pubDate>Thu, 18 Nov 2021 10:37:36 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-63/</guid><description>第六十三日 HTML Question: 什么是 html 的字符实体？版权符号代码怎么写 在 HTML 中，某些字符是预留的，这些预留字符必须被替换为字符实体.。 如： &amp;amp;lt; &amp;amp;gt;
版权符号： &amp;amp;copy;
CSS Question: position的absolute和fixed共同与不同点分别是什么 static: 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明） relative: 生成相对定位的元素，通过top, bottom, left, right 的设置相对于其正常（原先本身）位置进行定位。可通过z-index进行层次分级。 absolute: 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 left, top, right 以及 bottom 属性进行规定。可通过z-index进行层次分级。 fixed: 生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 left, top, right 以及 bottom 属性进行规定。可通过 z-index 进行层次分级。 relative 定位为 relative 的元素脱离正常的文本流中，但其在文本流中的位置依然存在。 无论父级存在不存在，无论有没有 TRBL(top right bottom left)，均是以父级的左上角进行定位，但是父级的Padding属性会对其影响。
absolute 定位为absolute的层脱离正常文本流，但与relative的区别是其在正常流中的位置不再存在。
若想把一个定位属性为 absolute 的元素定位于其父级元素内，只有满足两个条件：
设定 TRBL(top right bottom left) 父级设定position属性 relative与absolute的主要区别 relative定位的层总是相对于其最近的父元素，无论其父元素是何种定位方式 absolute 总是相对于其最近的定义为absolute或relative的父层，这个父层并不一定是其直接父层。如果其父层中都未定义absolute或relative，则其将相对 body`进行定位 Summary 用position来布局页面，父级元素的position属性必须为relative，而定位于父级内部某个位置的元素，最好用 absolute。 因为它不受父级元素的padding的属性影响，当然也可以用 position，不过到时候计算的时候不能忘记 padding 的值。</description></item><item><title>毎日のフロントエンド　62</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-62/</link><pubDate>Wed, 17 Nov 2021 10:03:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-62/</guid><description>第六十二日 HTML Question: HTML5 的拖放 API 图片默认自带拖拽功能，非图片元素设置 draggable 属性为 true 即可拖拽。
被拖拽元素的事件：
ondragstart 拖拽的一瞬间触发 ondrag 拖拽期间连续触发 ondragend 拖拽结束触发 目标元素事件（将拖拽元素释放的地方）：
ondragenter 进入目标元素触发（鼠标光标进入） ondragover 进入离开目标元素连续触发 ondragleave 离开目标元素触发 ondrop 在目标元素上释放鼠标触发 默认状态下，一个元素不能放在另一个元素上面，需要在 ondragover 上阻止默认事件。
JavaScript Question: 写出执行结果,并解释原因 一 var fullname = &amp;#39;a&amp;#39;; var obj = { fullname: &amp;#39;b&amp;#39;, prop: { fullname: &amp;#39;c&amp;#39;, getFullname: function () { return this.fullname; }, }, }; console.log(obj.prop.getFullname()); // c var test = obj.</description></item><item><title>毎日のフロントエンド　61</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-61/</link><pubDate>Tue, 16 Nov 2021 12:44:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-61/</guid><description>第六十一日 HTML Question: HTML5 的webSQL(deprecated)和IndexedDB IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。
IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。
IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。
IndexedDB 具有以下特点:
键值对储存:每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误 异步: 这与 LocalStorage 形成对比，后者的操作是同步的 支持事务: 一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况 同源限制: 网页只能访问自身域名下的数据库，而不能访问跨域的数据库 储存空间大: IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB 支持二进制储存: 二进制数据（ArrayBuffer 对象和 Blob(Binary Large Object) 对象） JavaScript Question: 写一个方法获取图片的原始宽高 function loadImageAsync(url) { return new Promise(function (resolve, reject) { // Image(width, height) 创建一个新的HTMLImageElement实例 var image = new Image(); image.src = url; image.onload = function () { let obj = { w: image.</description></item><item><title>毎日のフロントエンド　60</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-60/</link><pubDate>Mon, 15 Nov 2021 15:49:03 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-60/</guid><description>第六十日 HTML Question: src、href、link的区别是什么 src用于替代这个元素，而href用于建立这个标签与外部资源之间的关系
href - HyperText Reference 超文本引用， 常用的有： &amp;lt;a&amp;gt;,&amp;lt;link&amp;gt;, href是引用和页面关联，是在当前元素和引用资源之间 建立联系
&amp;lt;link href=&amp;quot;reset.css&amp;quot; rel=”stylesheet“/&amp;gt; 浏览器会识别该文档为 css 文档，并行下载该文档，并且不会停止对当前文档的处理。
src - source src 的内容是页面必不可少的一部分，是 引入。src指向的内容会嵌入到文档中当前标签所在的位置。常用的有：&amp;lt;img&amp;gt;、&amp;lt;script&amp;gt;、&amp;lt;iframe&amp;gt;
&amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 当浏览器解析到该元素时，会暂停浏览器的渲染，直到该资源加载完毕。
补充 link和@import的区别 link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。 link支持使用JS控制DOM去改变样式；而@import不支持 link 兼容性更好 JavaScript Question: 请实现一个flattenDeep函数，把多维数组扁平化 solution:
function flatten(arr) { return arr.reduce((pre, current) =&amp;gt; { return pre.concat(Array.isArray(current) ? flatten(current) : current); }, []); } arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])
reduce 接收参数说明：</description></item><item><title>毎日のフロントエンド　59</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-59/</link><pubDate>Sun, 14 Nov 2021 14:41:10 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-59/</guid><description>第五十九日 HTML Question: 对WebGL的理解 WebGL（Web 图形库）是一个 JavaScript API，可在任何兼容的 Web 浏览器中渲染高性能的交互式 3D 和 2D 图形，而无需使用插件。WebGL 通过引入一个与 OpenGL ES 2.0 非常一致的 API 来做到这一点，该 API 可以在 HTML5 &amp;lt;canvas&amp;gt; 元素中使用。 这种一致性使 API 可以利用用户设备提供的硬件图形加速。
JavaScript Question: 一个格式化金额的方法( 添加逗号 ) function formatPrice(val, spacer = &amp;#39;,&amp;#39;) { const typeVal = typeof val; if (typeVal !== &amp;#39;string&amp;#39; &amp;amp;&amp;amp; typeVal !== &amp;#39;number&amp;#39;) return val; let _val = &amp;#39;&amp;#39; + val; return _val.replace(/\B(?=(\d{3})+\b)/g, spacer); } console.log(formatPrice(123567890.23)); // 123,567,890.23 Intl.</description></item><item><title>毎日のフロントエンド　58</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-58/</link><pubDate>Sat, 13 Nov 2021 15:00:34 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-58/</guid><description>第五十八日 HTML Question: HTML5 相对于 HTML4 有哪些优势 更简洁-文档声明 更语义-语义标签 功能更强-各种表单属性及自定义属性等
CSS Question: box-sizing 常用的属性有哪些？分别有什么作用 The box-sizing css property sets how the total width and heights of elements are calculated.
There are two behaviors to be used to adjust:
content-box gives you the default box-sizing behavior. If you set an element&amp;rsquo;s width to 100 px, then element&amp;rsquo;s content box will be 100 px wide, and the width of any border or padding will be added to the final rendered width, making the element wider than 100 px.</description></item><item><title>毎日のフロントエンド　57</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-57/</link><pubDate>Fri, 12 Nov 2021 16:05:02 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-57/</guid><description>第五十七日 HTML Question: HTML5的download属性 HTMLAnchorElement.download属性是一个DOMString，表明链接的资源将被下载，而不是显示在浏览器中。该值表示下载文件的建议名称。
常规的&amp;lt;a&amp;gt;标签通过 href 实现链接跳转，如果只想下载文件而不是跳转预览，最好的方式是在&amp;lt;a&amp;gt;标签中添加download属性，就能很简单地实现下载操作。
download是 HTML5 中&amp;lt;a&amp;gt;标签新增的一个属性，此属性会强制触发下载操作，指示浏览器下载 URL 而不是导航到它，并提示用户将其保存为本地文件，例如
&amp;lt;a href=&amp;quot;result.png&amp;quot; download&amp;gt;download&amp;lt;/a&amp;gt;
CSS Question: inline、block、inline-block这三个属性值有什么区别 CSS 显示模块分为内部显示类型和外部显示类型，内部显示类型是定义子元素如何参与内部布局，外部显示类型定义了父元素如何参与外部整个文档流的布局:
inline-&amp;gt; inline-inline; block-&amp;gt; block-block; inline-block-&amp;gt; inline-block;
inline： 行内元素，元素不独占一行，不可以修改宽高; block： 块级元素，元素独占一行，可以修改宽高; inline-block： 行内块级元素，元素不独占一行，并且可以修改宽高
JavaScript Question: 写一个方法，使得sum(x)(y)和sum(x,y)返回的结果相同 sum(x)(y)和sum(x,y)返回的结果相同 const sum = function (x) { if (argument[1]) { return x + argument[1]; } else { return function (y) { return x + y; }; } }; console.log(sum(3, 4)); // 7 console.</description></item><item><title>毎日のフロントエンド　56</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-56/</link><pubDate>Thu, 11 Nov 2021 20:17:32 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-56/</guid><description>第五十六日 HTML Question: 渐进式渲染是什么progressive rendering 渐进式渲染是用来提高网页性能，以尽快呈现页面的技术。 比如：
图片懒加载——页面上的图片不会一次性全部加载。当用户滚动页面到图片部分时，JavaScript 将加载并显示图像。 确定显示内容的优先级（分层次渲染）——为了尽快将页面呈现给用户，页面只包含基本的最少量的 CSS、脚本和内容，然后可以使用延迟加载脚本或监听 DOMContentLoaded/load 事件加载其他资源和内容。 异步加载 HTML 片段——当页面通过后台渲染时，把 HTML 拆分，通过异步请求，分块发送给浏览器。 CSS Question: margin和padding使用的场景有哪些 margin是用来隔开元素与元素的间距
padding是用来隔开元素与内容的间隔
margin用于布局分开元素使元素与元素互不相干
padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段距离
JavaScript Question: JSONP的原理是什么？解决什么问题 JSONP 是什么 JSONP 是一种动态 script 标签跨域请求技术。 指的是请求方动态创建 script 标签，src指向响应方的服务器（非同源的 url），同时传一个参数callback， callback 后面是functionName，当请求方发起请求时，响应方根据传过来的参数callback,构造并调用：xxx.call(undefined,&amp;lsquo;数据&amp;rsquo;),其中 数据 的传入格式是以JSON格式传入的，因为传入的 JSON 数据具有左右 padding,因而得名 JSONP 。 后端代码构造并调用了 xxx，浏览器接收到了响应，就会执行 xxx.call(undefined,&amp;lsquo;数据&amp;rsquo;),于是，请求方就知道了要的数据了。
JSONP Usage //server.js const Koa = require(&amp;#39;koa&amp;#39;); const bodyParser = require(&amp;#39;koa-bodyparser&amp;#39;); const { getUser } = require(&amp;#39;./mock&amp;#39;); const app = new Koa(); app.</description></item><item><title>毎日のフロントエンド　55</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-55/</link><pubDate>Wed, 10 Nov 2021 17:43:19 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-55/</guid><description>第五十五日 HTML Question: HTML5 中新添加的表单属性有哪些 新的form属性1 autocomplete novalidate 新的input属性2 新类型：color，date，email，month，number，range，search，tel，time，week 新属性：autocomplate，autofocus，list，placeholder CSS Question: 什么是视差滚动？如何实现视差滚动的效果 在同一视角下，鼠标或者页面滚动时，不同元素以不同的速率跟随滚动，产生生动的效果。
如何实现视差滚动： 根据页面滚动高度的变化，JS 相应调整不同元素的不同位移，常见的插件有 Parallax.js | Simple Parallax Scrolling Effect with jQuery
JavaScript Question: 写出执行结果，并解释原因 var a = 1; (function a() { a = 2; console.log(a); })(); 立即执行的函数表达式(IIFE)的函数名称跟内部变量名称重名后，函数名称优先，因为函数名称是不可改变的，内部会静默失败，在严格模式下会报错
var a = 1; (function a() { &amp;#39;use strict&amp;#39;; a = 2; console.log(a); })(); // VM1059:4 Uncaught TypeError: Assignment to constant variable.</description></item><item><title>毎日のフロントエンド　54</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-54/</link><pubDate>Tue, 09 Nov 2021 11:39:45 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-54/</guid><description>第五十四日 HTML Question: 了解 HTML5 的地理定位吗？怎么使用 Geolocation.getCurrentPosition() 方法用来获取设备当前位置
navigator.geolocation.getCurrentPosition(success, error, options); CSS Question: css3 的:nth-child 和:nth-of-type 的区别是什么？ :nth-child(n) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型。 :nth-of-type(n) 选择器匹配属于父元素的特定类型的第 N 个子元素。n 可以是数字、关键词或公式
JavaScript Question: 写一个函数找出给定数组中的最大差值 function difference(arr) { return Math.max(...arr) - Math.min(...arr); } One more Question 写出执行结果，并解释原因
function side(arr) { arr[0] = arr[2]; } function a(a, b, c = 3) { c = 10; side(arguments); return a + b + c; } a(1, 1, 1); 12</description></item><item><title>毎日のフロントエンド　53</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-53/</link><pubDate>Mon, 08 Nov 2021 19:38:24 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-53/</guid><description>第五十三日 HTML Question: web workers 能帮我们解决哪些问题 Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。
Web Worker 有以下几个使用注意点:
同源限制: 必须与主线程的脚本文件同源。
DOM 限制
Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以 navigator 对象和 location 对象。 通信联系
Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。 脚本限制
Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。 文件限制
Worker 线程无法读取本地文件，即不能打开本机的文件系统file://，它所加载的脚本，必须来自网络。 CSS Question: 怎么使用自定义字体？有什么注意事项 @font-face { font-family: &amp;#39;自定义字体名称&amp;#39;; src: url(&amp;#39;字体文件名.</description></item><item><title>毎日のフロントエンド　52</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-52/</link><pubDate>Sun, 07 Nov 2021 10:47:11 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-52/</guid><description>第五十二日 HTML Question Form表单提交时为什么会刷新页面？怎么预防刷新 因为早期网页交互模型只能是浏览器提交数据给服务器，服务器做出响应重新返回一个页面，浏览器加载这个页面进行显示。早期前端没有编程式发送网络请求的 API，更没有前端路由管理的概念，所以表单提交跳转页面是广泛接受的方案。
不想刷新可以使用 JS 拦截 form 的 onsubmit 事件，阻止掉浏览器的默认行为，然后用 ajax/fetch 和后台交互。另一个偏方是使用 iframe 作为 form 的 target，不过 JS 处理方面不如让浏览器别管自己全手动发请求来得简单。
CSS Question 要是position跟display、overflow、float这些特性相互叠加后会怎么样 display、position 和 float 的相互关系 display 属性规定元素应该生成的框的类型。block inline&amp;hellip;
position 属性规定元素的定位类型。
absolute表示生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位； fixed成绝对定位的元素，相对于浏览器窗口进行定位； relative生成相对定位的元素，相对于其正常位置进行定位； static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。 Float也是是一种布局方式，它定义元素在哪个方向浮动。在布局过程中也经常会使用它来达到左右并排布局的效果。
position:absolute和position:fixed 优先级最高，有它存在的时候，浮动不起作用，display 的值也需要调整； 其次，元素的 float 特性的值不是 none 的时候或者它是根元素的时候，调整 display 的值； 最后，非根元素，并且非浮动元素，并且非绝对定位的元素，display 特性值等同设置值。 display 的值为 none: position 和 float 不起作用, 浮动和定位无效 position 的值是 absolute 或 fixed: 浮动失效，display 会被按规则重置 float 的值不是 none: 浮动并且 &amp;lsquo;display&amp;rsquo; 会被按照转换设置 JavaScript Question 什么是事件委托 Event Delegation is basically a pattern to handle events efficiently.</description></item><item><title>毎日のフロントエンド　51</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-51/</link><pubDate>Sat, 06 Nov 2021 14:08:07 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-51/</guid><description>第五十一日 JavaScript Question: 字符串相连有哪些方式？哪种最好？为什么？ var a = &amp;#39;aaaa&amp;#39;; var b = &amp;#39;bbbbb&amp;#39;; // 方法一： “+” var c = a + b; console.log(&amp;#39;c:&amp;#39;, c); // 方法二： “join(&amp;#34;&amp;#34;)” var d = []; d.push(a, b); console.log(&amp;#39;d:&amp;#39;, d.join(&amp;#39;&amp;#39;)); // 方法三：模版字符串 `${}` var e = `${a}${b}`; console.log(&amp;#39;e:&amp;#39;, e); Test Question: 说一下单元测试、E2E 测试？它们有什么区别？ Unit Test 单元测试是用来对一个模块， 一个函数或者一个类进行正确性校验的测试工作。 是从程序员的角度进行测试
E2E Test 站在用户的角度进行测试。 不关心内部实现。
区别。 Unit 测试是程序员写好逻辑后，很容易测试自己的实现， 是否符合预期。 E2E 是测试所有需求是不是都可以正确的实现。且代码重构之后，需求不变的情况下， 测试代码是无需改变的。</description></item><item><title>毎日のフロントエンド　50</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-50/</link><pubDate>Fri, 05 Nov 2021 11:24:58 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-50/</guid><description>第五十日 CSS Question: 列举 CSS 优化、提高性能的方法 加载性能 压缩 CSS 尽量，通过link方式加载，而不是@import 复合属性其实分开写，执行效率更高，因为 CSS 最终也还是要去解析如 margin-left: left; 选择器性能 尽量少的使用嵌套，可以采用BEM1的方式来解决命名冲突 尽量少甚至是不使用标签选择器，这个性能实在是差，同样的还有*选择器 利用继承，减少代码量 渲染性能 慎重使用高性能属性：浮动、定位； 尽量减少页面重排、重绘； css 雪碧图 自定义 web 字体，尽量少用 尽量减少使用昂贵属性，如 box-shadow/border-radius/filter/透明度/:nth-child 等 使用 transform 来变换而不是宽高等会造成重绘的属性 JavaScript Question: 请写出一个函数求出 N 的阶乘（即 N!） const factorial = (n) =&amp;gt; { if (n &amp;gt; 1) return n * factorial(n - 1); return 1; }; One more question 写出执行结果，并解释原因
var min = Math.</description></item><item><title>Append Item to Array in JavaScript</title><link>https://youkoucoding.github.io/p/append-item-to-array-in-javascript/</link><pubDate>Thu, 04 Nov 2021 16:52:18 +0900</pubDate><guid>https://youkoucoding.github.io/p/append-item-to-array-in-javascript/</guid><description>5 Way to Append Item to Array in JavaScript Here are 5 ways to add an item to the end of an array.
push splice length will mutate the orginal array.
Whereas concat and spread will not and will instead return a new array.
Mutative - 3 ways to Append Item to Array push const zoo = [&amp;#39;🦊&amp;#39;, &amp;#39;🐮&amp;#39;]; zoo.push(&amp;#39;🐧&amp;#39;); console.log(zoo); // [&amp;#39;🦊&amp;#39;, &amp;#39;🐮&amp;#39;, &amp;#39;🐧&amp;#39;] Of course, you can push multiple items.</description></item><item><title>毎日のフロントエンド　49</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-49/</link><pubDate>Thu, 04 Nov 2021 13:26:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-49/</guid><description>第四十九日 HTML Question: 说说对target=&amp;quot;_blank&amp;quot;的理解？有啥安全性问题？如何防范 恶意攻击问题
如果网站上有一个使用了 target=&amp;quot;_blank&amp;quot; 的 a 标签链接，一旦用户点击了这个链接打开了新的标签页，如果这个标签页跳转的网站内存在的恶意代码，那么你原本页面的网站可能会被转到一个假的页面。也就是说，当用户回到原本的页面时，看到的可能就是已经被替换过的钓鱼页面了。
防范
在 &amp;lt;iframe&amp;gt; 中有一个 sandbox 属性，可以使用以下的一些方法来预防链接:
Referrer Policy 和 noreferrer &amp;lt;a href=&amp;#34;https://an.evil.site&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noreferrer&amp;#34;&amp;gt; Enter an &amp;#34;evil&amp;#34; website &amp;lt;/a&amp;gt; noopener &amp;lt;a href=&amp;#34;https://an.evil.site&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener&amp;#34;&amp;gt; Enter an &amp;#34;evil&amp;#34; website &amp;lt;/a&amp;gt; 3 nofollow
nofollow 是 HTML 页面中 a 标签的属性值。这个标签的意义是告诉搜索引擎&amp;quot;不要追踪此网页上的链接或不要追踪此特定链接&amp;quot;
JavaScript Question: 写个还剩下多少天过年的倒计时 const day = Math.floor( (new Date(&amp;#39;2019-12-31 23:59:59:999&amp;#39;) - new Date()) / 864e5 ); // 210 1000*60*60*24 or 86400000 or 864e5</description></item><item><title>毎日のフロントエンド　48</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-48/</link><pubDate>Wed, 03 Nov 2021 15:29:08 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-48/</guid><description>第四十八日 HTML Question: 对 WEB 标准和 W3C 的理解与认识 web 标准简单来说可以分为结构、样式和行为。HTML标签构成页面的结构框架。css完成美化html标签构成的页面。js可以完成页面和用户的交互。
W3C对web标准提出了规范化的要求，也就是在实际编程中的一些代码规范：包含如下几点
对于结构要求：（标签规范可以提高搜索引擎对页面的抓取效率，对 SEO 很有帮助）
标签字母要小写 标签要闭合 标签不允许随意嵌套 对于 css 和 js 来说
尽量使用外链 css 样式表和 js 脚本。是结构、表现和行为分为三块，符合规范。同时提高页面渲染速度，提高用户的体验。 样式尽量少用行间样式表，使结构与表现分离，标签的 id 和 class 等属性命名要做到见文知义，标签越少，加载越快，用户体验提高，代码维护简单，便于改版 不需要变动页面内容，便可提供打印版本而不需要复制内容，提高网站易用性。 CSS Question: 全屏滚动的原理是什么吗？它用到了 CSS 的哪些属性 html &amp;lt;div class=&amp;#34;page-container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;page-item&amp;#34;&amp;gt;1&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;page-item&amp;#34;&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;page-item&amp;#34;&amp;gt;3&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; css html, body设置 overflow: hidden, 让视图中只包括一个分页; 设置滑动分页的长宽都是 100%; 外部容器设置 transition 过渡效果, 并设置为相对定位, 滚动是修改外部容器的 Top 值, 实现滚动效果</description></item><item><title>毎日のフロントエンド　47</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-47/</link><pubDate>Tue, 02 Nov 2021 10:34:36 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-47/</guid><description>第四十七日 HTML Question: HTML5 如何使用音频和视频 &amp;lt;video&amp;gt;1
&amp;lt;audio&amp;gt;2
CSS Question: 怎样抽离样式模块的 通用的和业务相关的分离出来，通用的做成样式模块儿共享，业务相关的，放进业务相关的库里面做成对应功能的模块儿。3
JavaScript Question: 请说说对事件冒泡机制的理解 event-flow
按照 W3C 事件模型，事件流按照次序依次为捕获阶段， 目标阶段，冒泡阶段。如果事件绑定时候，禁止了冒泡，则事件流会停止在目标阶段。
先说两个有关 DOM 事件流的概念事件冒泡和事件捕获。
事件冒泡： 事件沿着 DOM 树向上通知 事件捕获：和事件冒泡相反，事件沿着 DOM 数向下通知 开发者可以自己决定事件处理注册到捕获阶段，或者是冒泡阶段。 element1.addEventListener('click',doSomething2,true) 如果最后一个参数为 true，则注册到捕获阶段。
Question: React 事件绑定原理4 React 并不是将 click 事件绑在该 div 的真实 DOM 上，而是在 document 处监听所有支持的事件，当事件发生并冒泡至 document 处时，React 将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。 另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 event.preventDefault。
react-event
Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……
lgwebdream/FE-Interview
&amp;lt;video&amp;gt; - HTML（超文本标记语言） | MDN&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>毎日のフロントエンド　46</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-46/</link><pubDate>Mon, 01 Nov 2021 15:01:13 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-46/</guid><description>第四十六日 CSS Question: 对媒体查询的理解 CSS3中的媒体查询 width – 输出设备渲染区域（如可视区域的宽度或打印机纸盒的宽度）的宽度 height – 输出设备渲染区域（如可视区域的高度或打印机纸盒的高度）的高度 device-width – 输出设备的宽度（整个屏幕或页的高度，而不是仅是渲染区域） device-height – 输出设备的高度（整个屏幕或页的高度，而不是仅是渲染区域） orientation – 设备处于横屏（宽度大于高度）模式还是竖屏（高度大于宽度）模式 aspect-ratio – 输出设备目标显示区域的宽高比 device-aspect-ratio – 输出设备的宽高比 resolution – 输出设备的分辨率（像素密度） color – 检查设备支持多少种颜色等 color-index – 输出设备中颜色查询表中的条目数量 monochrome – 指定了一个黑白（灰度）设备每个像素的比特数 scan – 检查电视输出设备是顺序扫描还是隔行扫描 grid – 判断输出设备是网格设备还是位图设备 基本语法 媒体查询最基本的形式，就是单独或组合使用媒体类型和媒体特性(后者要置于括号中)，如：
@media screen { body { font-size: 20px; } } @media screen, print { body { font-size: 20px; } } @media (width: 30em) { nav li { display: block; } } @media screen and (width: 30em) { nav li { display: block; } } 嵌套 /*例子1:媒体类型套媒体特性*/ @media screen { @media (min-width: 20em) { img { display: block; width: 100%; height: auto; } } @media (min-width: 40em) { img { display: inline-block; max-width: 300px; } } } /*例子2:媒体特性多层嵌套*/ @media (hover: on-demand) { @media (pointer: coarse) { input[type=checkbox] ~ label { padding: .</description></item><item><title>毎日のフロントエンド　45</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-45/</link><pubDate>Sun, 31 Oct 2021 10:35:03 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-45/</guid><description>第四十五日 HTML Question: xml与html有什么区别 html不区分大小写，xml区分大小写 html可以没有闭合标签，xml必须有闭合标签 html可以拥有不带值的属性名，xml中所有的属性必须带值 html是用于显示数据，xml主要用于描述，存放数据 CSS Question: 等高布局有多少种 flex拉伸 display: flex; align-items: stretch; padding margin抵消 然后background-clip默认是border-box所以会在被抵消的位置依然显示背景 造成等高假象 .box, .box2 { float: left; width: 100px; } .box { background: #cccccc; height: 300px; } .box2 { background: #306eff; padding-bottom: 99999px; margin-bottom: -99999px; } JavaScript Question: 写出几种创建对象的方式，区别是什么 new Object() var obj = new Object(); var obj = {}; // 等价 工厂模式 优点是 可以解决创建多个相似对象的问题，缺点是 无法识别对象的类型
function createObj(name, age) { var obj = {}; obj.</description></item><item><title>毎日のフロントエンド　44</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-44/</link><pubDate>Sat, 30 Oct 2021 20:55:46 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-44/</guid><description>第四十四日 HTML Question: ｀ video` 标签中预加载视频用到的属性是什么 preload
属性 值 描述 autoplay autoplay 如果出现该属性，则视频在就绪后马上播放 controls controls 如果出现该属性，则向用户显示控件，比如播放按钮 height pixels 设置视频播放器的高度 loop loop 如果出现该属性，则当媒介文件完成播放后再次开始播放 preload preload 如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 &amp;ldquo;autoplay&amp;rdquo;，则忽略该属性 src url 要播放的视频的 URL width pixels 设置视频播放器的宽度 CSS Question: 写一个满屏品字布局的方案 标准流 &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;top&amp;#34;&amp;gt;&amp;lt;div&amp;gt; &amp;lt;div class=&amp;#34;bottom&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;left&amp;#34;&amp;gt;&amp;lt;div&amp;gt; &amp;lt;div class=&amp;#34;right&amp;#34;&amp;gt;&amp;lt;div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;/body&amp;gt; .</description></item><item><title>毎日のフロントエンド　43</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-43/</link><pubDate>Fri, 29 Oct 2021 10:43:39 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-43/</guid><description>第四十三日 HTML Question: 如何让元素固定在页面底部？有哪些比较好的实践 &amp;lt;div class=&amp;#34;wrapper&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;content&amp;#34;&amp;gt;&amp;lt;!-- 页面主体内容区域 --&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;footer&amp;#34;&amp;gt;&amp;lt;!-- 需要做到 Sticky Footer 效果的页脚 --&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 方案一：absolute
/* content 的 padding-bottom 需要与 footer 的 height 一致 */ html, body { height: 100%; } .wrapper { position: relative; min-height: 100%; padding-bottom: 50px; box-sizing: border-box; } .footer { position: absolute; bottom: 0; height: 50px; } 方案二：calc
.content { min-height: calc(100vh - 50px); } .footer { height: 50px; } 方案三：table
html, body { height: 100%; } .</description></item><item><title>毎日のフロントエンド　42</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-42/</link><pubDate>Thu, 28 Oct 2021 11:47:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-42/</guid><description>第四十二日 HTML Question: 解释下什么是ISISO8859-2字符集 ISO/IEC 8859-1，又称 Latin-1 或“西欧语言”，ISO/IEC 8859-2 Latin-2或“中欧语言”，是国际标准化组织内 ISO/IEC 8859 的 8 位字符集。它以 ASCII 为基础，在空置的 0xA0-0xFF 的范围内，加入 192 个字母及符号，藉以供使用变音符号的拉丁字母语言使用。
CSS Question: 重置（初始化）css 的作用是什么 统一各个浏览器自带的默认样式, 保证各个浏览器尽量统一样式
JavaScript Question: window 对象和 document 对象有什么区别 window对象 代表浏览器中的一个打开的窗口或者框架，window对象会在或者每次出现时被自动创建，在客户端JavaScript中，Window对象是全局对象global(node)，所有的表达式都在当前的环境中计算，要引用当前的窗口不需要特殊的语法，可以把那个窗口属性作为全局变量使用，例如：可以只写document，而不必写window.document。同样可以把窗口的对象方法当做函数来使用，如：只写 alert()，而不必写 window.alert. window对象实现了核心 JavaScript 所定义的全局属性和方法。
document对象 代表整个HTML文档，可以用来访问页面中的所有元素。 每一个载入浏览器的 HTML 文档都会成为 document 对象。document 对象使我们可以使用脚本(js)中对 HTML 页面中的所有元素进行访问。document 对象是 window 对象的一部分可以通过 window.document 属性对其进行访问 HTMLDocument 接口进行了扩展，定义 HTML 专用的属性和方法，很多属性和方法都是 HTMLCollection 对象，其中保存了对锚、表单、链接以及其他可脚本元素的引用。
document是文档对象，以html形式展示。是window对象里面的 一部分 Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……
lgwebdream/FE-Interview</description></item><item><title>毎日のフロントエンド　41</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-41/</link><pubDate>Wed, 27 Oct 2021 14:51:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-41/</guid><description>第四十一日 HTML JavaScript webSocket 怎么兼容处理 WebSocket是一种在服务器与客户端双向通讯的技术，使用原生的WebSocket可以最小化 服务器资源的使用并且为两者提供了一种统一的通信方式。随着 HTML5 的普及，现代浏览器（IE10+）基本上都已经原生支持WebSocket
SockJS Socket.IO Socket.IO 能够启用基于事件的双向通信，使用它同样也需要搭建相应的服务端；首先它也会首选 WebSocket，如果不支持则会使用下面的替代方案：
Adobe Flash Socket（缺点：需要在服务器上打开一个额外的端口，默认为 10843） Ajax long polling Ajax multipart streaming Forever iframe JSONP polling CSS JavaScript 怎么让英文单词的首字母大写 /* Keyword values */ text-transform: capitalize; /*强制每个单词的首字母转换为大写*/ text-transform: uppercase; /*强制所有字符被转换为大写*/ text-transform: lowercase; text-transform: none; /*阻止所有字符的大小写被转换*/ text-transform: full-width; /*强制字符 — 主要是表意字符和拉丁文字 — 书写进一个方形里，并允许它们按照一般的东亚文字（比如中文或日文）对齐*/ .demo::first-letter { text-transform: uppercase; } JavaScript JavaScript 说说对 IIFE 的理解 IIFE：立即调用函数表达式，在一些常见的框架中，会使用立即执行函数形成一个独立作用域，在这个函数通常会写一些依赖环境之类的东西；立即执行函数中，写完其中的变量不会被销毁，形成闭包
在立即执行函数中，如果想要访问全局中的变量，直接行参引入 window 即可</description></item><item><title>毎日のフロントエンド　40</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-40/</link><pubDate>Tue, 26 Oct 2021 10:14:45 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-40/</guid><description>第四十日 HTML Question: html5 都有哪些新的特性？移除了哪些元素 新增特性:
canvas svg video drag &amp;amp; drop localStorage/sessionStorage 语义化标签: header/nav/section/article/footer input 类型: date/datetime/email/range 移除元素:
applet big font frame/frameset CSS Question: 怎么才能让图文不可复制？ // 禁止右键菜单 document.body.oncontextmenu = (e) =&amp;gt; { return false; // e.preventDefault(); }; // 禁止文字选择 document.body.onselectstart = (e) =&amp;gt; { return false; // e.preventDefault(); }; // 禁止复制 document.body.oncopy = (e) =&amp;gt; { return false; // e.preventDefault(); }; // 禁止粘贴 document.body.onpaste = (e) =&amp;gt; { return false; // e.</description></item><item><title>毎日のフロントエンド　39</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-39/</link><pubDate>Mon, 25 Oct 2021 10:58:32 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-39/</guid><description>第三十九日 HTML Question: title 与 h1、b 与 strong、i 与 em 的区别分别是什么？ title标签写在body里面不会被渲染,只能写在head里面,对网站 SEO 比较重要 h1标签写在 body 里面,但是写在 head 里(不推荐),渲染的时候会自动渲染到 body 里面去 b标签与strong标签在表现上是一样的,都自带font-weight: bold属性 b 仅表示加粗既装饰用，我们应该使用 CSS 而不应该使用 b i标签与em标签在表现上是一样的,都自带font-style: italic属性 i 用于斜体展示，我们应该使用 CSS 而不应该使用 i b标签与i标签是物理标记,告诉浏览器以何种格式显示文字 strong标签与em标签是逻辑标记,逻辑元素告诉浏览器这些文字有怎么样的重要性 CSS Question: CSS 水平和垂直居中的方法 绝对布局 .parent { position: relative; } .child { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); } flexbox flexbox .</description></item><item><title>毎日のフロントエンド　38</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-38/</link><pubDate>Sun, 24 Oct 2021 10:07:50 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-38/</guid><description>第三十八日 HTML Question: 说说你对 cookie 和 session 的理解 cookie HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。
cookie 分发是通过扩展 HTTP 协议来实现的，服务器通过在 HTTP 的响应头header中加上一行特殊的指示以提示浏览器按照指示生成相应的 cookie。然而纯粹的客户端脚本如 JavaScript 等方式也可以生成 cookie。
cookie 的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的 cookie，如果某个 cookie 所声明的作用范围大于等于将要请求的资源所在的位置，则把该 cookie 附在请求资源的 HTTP 请求头上发送给服务器。
Cookie 主要用于:
会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等） 创建 Cookie:
当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。
Session cookie机制弥补了 HTTP 协议无状态的不足。在 Session 出现之前，基本上所有的网站都采用 Cookie 来跟踪会话。
与 Cookie 不同的是，session是以服务端保存状态。
当客户端请求创建一个session的时候，服务器会先检查这个客户端的请求里是否已包含了一个session标识 - sessionId`:</description></item><item><title>毎日のフロントエンド　37</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-37/</link><pubDate>Sat, 23 Oct 2021 12:52:30 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-37/</guid><description>第三十七日 HTML Question: html5 哪些标签可以优化 SEO 通过标签语义化优化 SEO
&amp;lt;h1&amp;gt;是最高的等级，所以你需要准确确定每个页面最重要的内容是什么，要优化的关键词在哪里。以我们最常见的博客为例，博客首页罗列最多的通常就是最新博文，而最重要的应该就是博客的名称了，而后面最新文章的链接标题则可以使用&amp;lt;h2&amp;gt;或者&amp;lt;h3&amp;gt;，一般都使用&amp;lt;h2&amp;gt;，表示次级标题。
strong标签的使用, title网站 SEO 标题
meta name=&amp;quot;title&amp;quot; content=&amp;quot;网站标题&amp;quot;
meta name=&amp;quot;description&amp;quot; content=&amp;quot;网站描述&amp;quot;
meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;网站关键词&amp;quot;
a href=&amp;quot;链接地址&amp;quot; title=&amp;quot;链接说明&amp;quot;
img src=&amp;quot;图片链接地址&amp;quot; alt=&amp;quot;图片说明&amp;quot;
div id=&amp;quot;copyright&amp;quot; 版权部分加上网站名称和链接
html - structure
nav: 可以帮助 UA 迅速获得导航内容，例如读屏器可以省去很多渲染直接跳到导航位置。
aside: 可以表示与周围内容关系不太密切的内容 (广告)，通常表现为侧边栏内容 (相关背景内容)、引述内容
header: 通常是一组介绍性描述 (搜索框 / logo / …)，网络爬虫知道诸如与之类的部分后可以非常简单的跳过它们，更好的定位网页内容</description></item><item><title>毎日のフロントエンド　36</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-36/</link><pubDate>Fri, 22 Oct 2021 11:27:44 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-36/</guid><description>第三十六日 HTML Question: HTML 与 XHTML 二者有不同 HTML vs HTML5 vs XHTML
All three are markup language, performing, essentially, the same task.
HTML and HTML5 A markup language most common today is HTML. It was designed by the inventor of the World Wide Web.
XHTML It is worth noting that before HTML5 was released, the World Wide Web Consortium (W3C) initiated work to develop an extension of the basic HTML, merging it with XML format.</description></item><item><title>毎日のフロントエンド　35</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-35/</link><pubDate>Thu, 21 Oct 2021 10:36:22 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-35/</guid><description>第三十五日 HTML Question 用一个 div 模拟 textarea 的实现 &amp;lt;div class=&amp;quot;edit&amp;quot; contenteditable=&amp;quot;true&amp;quot; style=&amp;quot;resize: both&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
CSS Question 使用 flex 实现三栏布局，两边固定，中间自适应 .container { display: flex; height: 100px; .left, .right { width: 100px; background: #8c939d; } .content { flex: 1; background: #306eff; } } flex: 0 1 auto 分别表示什么意思
三个参数分别对应的是 flex-grow, flex-shrink 和 flex-basis，默认值分别是0 1 auto
flex-grow属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大 flex-shrink属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小 flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size） JavaScript Question 解释一个为什么 10.toFixed(10) 会报错 因为在这里的 . 发生了歧义，它既可以理解为小数点，也可以理解为对方法的调用 因为这个点紧跟于一个数字之后，按照规范，解释器就把它判断为一个小数点
(10).</description></item><item><title>毎日のフロントエンド　34</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-34/</link><pubDate>Wed, 20 Oct 2021 09:53:44 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-34/</guid><description>第三十四日 HTML Question: Standards 模式和 Quirks 模式有什么区别 在 quirks 模式和标准模式之间一个突出的不同是对 CSS IE 盒模型缺陷的处理，怪异模式和标准模式最早是为了对旧版本网页进行兼容而设计的，可以通过 &amp;lt;!DOCTYPE&amp;gt; 来进行区分。
standards盒模型： width = content quirks盒模型： width = content + border + padding
CSS Question: 浏览器是怎样判断元素是否和某个 CSS 选择器匹配 从右往左匹配 浏览器先产生一个元素集合，这个集合往往由最后一个部分的索引产生（如果没有索引就是所有元素的集合）。然后向上匹配，如果不符合上一个部分，就把元素从集合中删除，直到真个选择器都匹配完，还在集合中的元素就匹配这个选择器了。
即，从最开始匹配的元素集合，根据增加的选择器来剔除，得到最终匹配
selector
Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！</description></item><item><title>毎日のフロントエンド　33</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/</link><pubDate>Tue, 19 Oct 2021 12:55:27 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/</guid><description>第三十三日 HTML Question: html 和 html5 有什么区别呢 文档声明区别 HTML 文档的类型声明为： &amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD HTML 4.01//EN&amp;#34; &amp;#34;http://www.w3.org/TR/html4/strict.dtd&amp;#34;&amp;gt; //或 &amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD XHTML 1.0 Strict//EN&amp;#34; &amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;#34;&amp;gt; HTML5 文档的类型声明为： &amp;lt;!DOCTYPE html&amp;gt;
结构语义区别 HTML：没有体现结构语义的标签，如&amp;lt;div id='nav'&amp;gt;&amp;lt;/div&amp;gt;
HTML5：添加了许多具有语义化的标签，如：&amp;lt;article&amp;gt;、&amp;lt;aside&amp;gt;、&amp;lt;audio&amp;gt;，更利于 SEO
相对于 HTML，HTML5 中新增和修改了一些元素
绘图区别 HTML5：HTML5 的 canvas 使用脚本（通常使用 JavaScript）在网页是绘制图像，可以控制画布上每个像素
音频的视频的支持 HTML：如果不使用 Flash 播放器支持，它不支持音频和视频
HTML5：使用&amp;lt;audio&amp;gt;和&amp;lt;vedio&amp;gt;标签来支持音频和视频控制。
CSS Question: 用 CSS 绘制一个三角形1 用伪元素来实现这种装饰性的效果，content 为空，就不需要 width
.triangle:after { content: &amp;#39;&amp;#39;; border: 35px solid transparent; border-bottom-color: lightgreen; } JavaScript Question: 说说对 this 的理解 一，一般函数 函数中的 this 永远指向函数的调用者（在代码执行时才能确定），谁最终调用这个函数，this 就指向谁:</description></item><item><title>毎日のフロントエンド　32</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-32/</link><pubDate>Mon, 18 Oct 2021 17:44:05 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-32/</guid><description>第三十二日 HTML Question: 说说对 HTML 元素的显示优先级的理解 Day20 类似。
帧元素（frameset) 优先级最高 &amp;gt;&amp;gt;&amp;gt; 表单元素 &amp;gt; 非表单元素，即 input type=&amp;quot;radio&amp;quot; 之类的表单控件 &amp;gt; 普通的如 a,div 等元素。
从有窗口和无窗口元素来分，有窗口元素 &amp;gt; 无窗口元素。有窗口元素如 Select 元素、Object 元素。
z-index 属性也可以改变显示优先级，但只对同种类型的元素才有效。
CSS Question: line-height三种赋值方式有何区别 line-height 可以有带单位及不带单位的写法
div { line-height: 24px; line-height: 1.5; line-height: 1.5em; line-height: 150%; } 由于 line-height 有继承性，直接在某个元素上使用 line-height，以下这三种写法是没有区别的，比如给所有的 p 标签添加行高属性：
p { line-height: 1.5em; } p { line-height: 1.5; } p { line-height: 150%; } 三种方式的区别在于，给父元素设置行高的时候子元素的继承方式:
带有单位的 line-height 会被计算成 px 后继承。子元素的 line-height = 父元素的 line-height * font-size （如果是 px 了就直接继承）</description></item><item><title>毎日のフロントエンド　31</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/</link><pubDate>Sun, 17 Oct 2021 16:01:03 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/</guid><description>第三十一日 HTML Question:　DOM 和 BOM 有什么区别 BOM 是 Browser Object Model 的缩写，即浏览器对象模型。DOM 是 Document Object Model 的缩写，即文档对象模型。都是浏览器提供给 JavaScript 的 API 接口
BOM-DOM
BOM 指 浏览器对象模型 提供了独立于内容而与浏览器窗口进行交互的对象。描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，譬如可以弹出新的窗口，改变状态栏中的文本。
BOM
DOM 指 文档对象模型 DOM 是针对 HTML 的基于树的 API。描述了处理网页内容的方法和接口，是 HTML 的 API，DOM 把整个页面规划成由节点层级构成的文档。 DOM
只有 JS 的宿主环境是浏览器的时候才有 DOM 和 BOM ，在 Node 中是没有这两个对象的
CSS Question:　让网页的字体变得清晰，变细用 CSS 怎么做 font-weight + font-family
font-weight 来控制粗细还需要对应的字体有没有对应的变种字体。因此这就和 font-family 相关。 -webkit-font-smoothing: antialiased;</description></item><item><title>毎日のフロントエンド　30</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-30/</link><pubDate>Sat, 16 Oct 2021 10:26:51 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-30/</guid><description>第三十日 HTML Question: 网页上的验证码是为了解决什么问题？说说了解的验证码种类有哪些 图形验证码 字符验证码 文字+混淆 如早期的 7456 这种结果的验证码 复杂字符验证码 复杂文字+混淆 如加入中文等本土化的增加识别难度 计算验证码 数字+运算符+混淆 如 1+2=? 需要识别表达式增加识别难度 精确识别 文字+混淆文字 如选出 优贝在线 中的 贝字，或者选出所有的筷子，所有的红绿灯（12306） 滑动拼图验证 图像+滑块+图像凹槽 如常见的滑动拼图，提供商有易盾之类的 拼图验证 图像+打乱 需要用户去拼合完成。teamviewer 和 google 物理验证 手机短信验证码 手机语音验证码 CSS Question: 描述下了解的图片格式及使用场景 格式 优点 缺点 适用场景 gif 文件小，支持动画、透明，无兼容性问题 只支持 256 种颜色 色彩简单的 logo、icon、动图 jpg 色彩丰富，文件小 有损压缩，反复保存图片质量下降明显 色彩丰富的图片/渐变图像 png 无损压缩，支持透明，简单图片尺寸小 不支持动画，色彩丰富的图片尺寸大 logo/icon/透明图 webp 文件小，支持有损和无损压缩，支持动画、透明 浏览器兼容性不好 支持 webp 格式的 app 和 webview ▍PNG</description></item><item><title>毎日のフロントエンド　29</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-29/</link><pubDate>Fri, 15 Oct 2021 22:05:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-29/</guid><description>第二十九日 HTML #Quesion: 了解什么是无障碍 web（WAI）吗？在开发过程中要怎么做呢 无障碍 Web == 有良好访问性的 Web
页面的内容结构 应该让标题、段落、列表等各司其职，让整个页面内容结构清晰，比如：
&amp;lt;article&amp;gt; &amp;lt;h2&amp;gt;静夜思&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;[唐] 李白&amp;lt;/p&amp;gt; &amp;lt;div&amp;gt; 床前明月光，疑是地上霜。 &amp;lt;br /&amp;gt; 举头望明月，低头思故乡。 &amp;lt;/div&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#39;#&amp;#39;&amp;gt;译文&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#39;#&amp;#39;&amp;gt;注释&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#39;#&amp;#39;&amp;gt;作者介绍&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/article&amp;gt; 好的语义，屏幕阅读器会：
在你浏览内容时，读取每个标题，通知标题是什么，段落是什么等 它会在每个元素之后停止，让你有个短暂的停歇 你可以跳转到上一个/下一个标题 &amp;hellip; 简写和缩写 form 表单 &amp;lt;form&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label for=&amp;#34;name&amp;#34;&amp;gt;姓名：&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;name&amp;#34; name=&amp;#34;name&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label for=&amp;#34;age&amp;#34;&amp;gt;年龄：&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;age&amp;#34; name=&amp;#34;age&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label for=&amp;#34;gender&amp;#34;&amp;gt;性别：&amp;lt;/label&amp;gt; &amp;lt;select id=&amp;#34;gender&amp;#34; name=&amp;#34;gender&amp;#34;&amp;gt; &amp;lt;option&amp;gt;男&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;女&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;label&amp;gt; 标签可以让提示文本和输入框完美的对应起来，还可以扩大激活输入框的范围，方便用户选择和输入</description></item><item><title>毎日のフロントエンド　28</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-28/</link><pubDate>Thu, 14 Oct 2021 17:36:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-28/</guid><description>第二十八日 HTML #Question: 说说你对&amp;lt;meta&amp;gt;标签的理解 meta标签 **元数据(Metadata)**是HTML语言&amp;lt;head&amp;gt;区的一个辅助性标签，它位于 HTML 文档头部的head和title之间，它提供用户不可见的信息。
元数据可以被使用浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 Web 服务调用
属性 值 描述 charset (HTML5) character_set 定义文档的字符编码。 content text 定义与 http-equiv 或 name 性相关的元信息。 http-equiv content-type、default-style、refresh 把 content 属性关联到 HTTP 头部。 name application-name、author、description、generator、keywords 把 content 属性关联到一个名称 scheme format/URI HTML5 不支持。 定义用于翻译 content 属性值的格式。 CSS #Question: rgba() 和 opacity 这两个的透明效果有什么区别呢 rgba 只对颜色有影响。如果放在 background 上的话，只对背景颜色有影响。不会影响元素中的其他内容以及子元素内容</description></item><item><title>fetch and Axios</title><link>https://youkoucoding.github.io/p/fetch-and-axios/</link><pubDate>Thu, 14 Oct 2021 15:41:59 +0900</pubDate><guid>https://youkoucoding.github.io/p/fetch-and-axios/</guid><description>Which should be used? Axios or fetch() Difference between Fetch and Axios for making http requests General One the fundamental tasks of any web application is to communicate with servers through the http protocol. This can be easily achieved using Fetch or Axios.
fetch() The Fetch API provides a fetch() method defined on the window object. It also provides a JavaScript interface for accessing and manipulating parts of the Http pipeline(requests and responses).</description></item><item><title>毎日のフロントエンド　27</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/</link><pubDate>Wed, 13 Oct 2021 11:09:57 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/</guid><description>第二十七日 HTML #Question: 说说对影子(Shadow)DOM 的了解 Shadow DOM: A set of JavaScript APIs for attaching an encapsulated &amp;ldquo;shadow&amp;rdquo; DOM tree to an element &amp;mdash; which is rendered separately from the main document DOM &amp;mdash; and controlling associated functionality.In this way, you can keep an element&amp;rsquo;s features private, so they can be scripted and styled without the fear of collision with other parts of the document.
shadowdom
There are some bits of shadow DOM terminology to be aware of:</description></item><item><title>毎日のフロントエンド　26</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/</link><pubDate>Tue, 12 Oct 2021 17:18:24 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/</guid><description>第二十六日 HTML #Question: 解释下你对 GBK 和 UTF-8 的理解？并说说页面上产生乱码的可能原因 GBK 与 UTF-8 之区别
GBK 编码：是指中国的中文字符，其它它包含了简体中文与繁体中文字符 UTF-8 编码：它是一种全国家通过的一种编码，如果你的网站涉及到多个国家的语言 &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;
CSS #Question: 说说对 z-index 的理解 帧元素（frameset) 优先级最高 &amp;raquo;&amp;gt; 表单元素 &amp;gt; 非表单元素，即 input type=&amp;quot;radio&amp;quot; 之类的表单控件 &amp;gt; 普通的如 a,div 等元素。
从有窗口和无窗口元素来分，有窗口元素 &amp;gt; 无窗口元素。有窗口元素如 Select 元素、Object 元素。
z-index 属性也可以改变显示优先级，但只对同种类型的元素才有效。
z-index z 表示三维坐标的 Z 轴。
CSS允许我们对z-index属性设置三种值(绝对定位方案将一个元素从常规流中移除的情况下)
auto (自动，默认值) 整数: 数值越大，元素也就越靠近观察者。 数值越小，元素看起来也就越远 如果有两个元素放在了一起，占据了二维平面上一块共同的区域，那么有着较大 z-index 值的元素就会掩盖或者阻隔有着较低 z-index 值的元素在共同区域的那一部分 inherit Problem 当一个设置了 z-index 值的定位元素与常规文档流中的元素相互重叠的时候，谁会被置于上方？ 当定位元素与浮动元素相互重叠的时候，谁会被置于上方？ 当定位元素被嵌套在其他定位元素中时会发生什么？ Explanation 层叠上下文中的七种层叠等级</description></item><item><title>毎日のフロントエンド　25</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/</link><pubDate>Mon, 11 Oct 2021 16:07:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/</guid><description>第二十五日 HTML #Question: 请说说&amp;lt;script&amp;gt;、&amp;lt;script async&amp;gt;和&amp;lt;script defer&amp;gt;的区别 script deference
&amp;lt;script&amp;gt; : 加载的时候是同步的会阻塞后面代码的执行，加载立即执行 &amp;lt;script async&amp;gt;: 异步加载，加载和执行是并行的 &amp;lt;script defer&amp;gt;: 异步加载，需等到所有文档加载完才执行 async defer这两个属性无法应用于内联script The modern websites, scripts are often &amp;ldquo;heavier&amp;rdquo; than HTML: their download size is larger, anb processing time is also longer.
Scripts with defer never block the page Scripts with defer always execute when the DOM is ready(but before DOMContentLoaded event). The async attribute means that a script is completely independent:</description></item><item><title>毎日のフロントエンド　24</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/</link><pubDate>Sat, 09 Oct 2021 23:29:09 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/</guid><description>第二十四日 HTML #Question: 说说你对属性 data-的理解 data-*1 是HTML5新增的自定义属性，可以用来页面间跳转时携带数据
data-* 便是 HTML5 中用来存放数据的标签。使用 data-* 时，data- 之后的单词必须是小写的，但是可以用多个 - 连接。而在对应的 DOM 方法中，我们可以通过 element.dataset[属性名] 进行访问。在这里的属性名可以使用驼峰（转换规则和 vue 的组件名称转换一样）。
相比之前的自定义属性存放数据，使用 data-* 的方法，在数据的获取上会比较方便
CSS #Question: 有用过 CSS 预处理器吗？喜欢用哪个？原理是什么？ CSS预处理器 可使CSS具备更加简洁、适应性更强、可读性更强、层级关系更加明显、更易于代码的维护等诸多好处。 CSS 预处理器种类繁多，目前Sass、Less、用的比较多:
嵌套：反映层级和约束 变量和计算： 减少重复代码 Extend 和 Mixin 代码片段 (用的少) 循环：适用于复杂有规律的样式 import css 文件模块化 JavaScript #Question: 如何快速让一个数组乱序，写出来 使用array.sort()进行乱序存在一定问题，增大样本进行实验之后可以发现这种乱序方案并不是完全随机的（所有元素会大概率停留在自己的初始位置）（v8 处理排序是小于 10 个是插入排序，大于 10 个是快排，排序算法复杂度介于 O(n)与 O(n2)之间，也就是存在两个元素都没有比较的机会，因此不是完全随机），这里可以使用Fisher–Yates shuffle（洗牌算法）
let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; arr.</description></item><item><title>Currying in JavaScript (カリー化 &amp; 柯里化)</title><link>https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/</link><pubDate>Sat, 09 Oct 2021 15:24:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/</guid><description>Currying in JavaSctipt Functional programming is a style of programming that attempts to pass functions as arguments(callbacks) and return functions without side-effects(changes to the program&amp;rsquo;s state).
So many languages adopted this programming style. Javascript, Haskell, Erlang, Clojure, and Scala are the most popular among them.
And with its ability to pass the return functions, it brought so many conscepts: Pure Functions, Currying, Higher-Order functions.
What is Currying? Currying is a process in functionnal programming in which we can transform a function with multiple arguments into a sequence of nesting functions.</description></item><item><title>毎日のフロントエンド　23</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/</link><pubDate>Fri, 08 Oct 2021 22:28:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/</guid><description>第二十三日 HTML #Question: 关于&amp;lt;form&amp;gt;标签的 enctype 属性你有哪些了解 form 标签的 enctype(是表单提交属性之一) 属性指定将数据回发到服务器时浏览器如果对表单数据进行编码，其有三种编码形式
当 method 属性值为 post 时，enctype 就是将表单的内容提交给服务器的 MIME1 类型 。可能的取值有：
application/x-www-form-urlencoded：未指定属性时的默认值
application/x-www-form-urlencoded 编码类型会将表单中发送到服务器之前都会进行编码(空格转换为 &amp;ldquo;+&amp;rdquo; 加号，特殊符号转换为 ASCII HEX 值)，数据编码成键值对的形式，当表单的 action 为 post 时，它会把 form 数据封装到 http body 中，然后发送到服务器； 当表单的 action 为 get 时，它会把表单中发送的数据转换成一个字符串(如：a=1&amp;amp;b=2&amp;amp;c=3)并使用?连接到 url 后面。在不指定 enctype 属性时 application/x-www-form-urlencoded 是默认属性 multipart/form-data: 不对字符进行编码，在使用包含文件(如图片、mp4 等文件)上传控件的表单时必须使用该值
text/plain: 数据以纯文本格式进行编码，空格转换为 &amp;ldquo;+&amp;rdquo; 加号，但不对特殊字符编码
Example:
&amp;lt;body&amp;gt; &amp;lt;form action=&amp;#34;&amp;#34; enctype=&amp;#34;application/x-www-form-urlencoded&amp;#34;&amp;gt; First name: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;fname&amp;#34; /&amp;gt; Last name: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;lname&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;提交&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; 以上代码说明如下：</description></item><item><title>JavaScript Tips and Tricks</title><link>https://youkoucoding.github.io/p/javascript-tips-and-tricks/</link><pubDate>Fri, 08 Oct 2021 00:47:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/javascript-tips-and-tricks/</guid><description>1. Quick console.log() Get rid of writing console.log again and again and make it shorter by using the following code snippet.
let clog = console.log.bind(document); clog(&amp;#39;This will be printed in console.&amp;#39;); clog(123); // 123 2. Sprend Operator The spread operator is a new addition t othe set of operators in ES6. It takes an iterable object(e.g array) and expands it into individual elements. Below is an example code of spread operator usage.</description></item><item><title>毎日のフロントエンド　22</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/</link><pubDate>Thu, 07 Oct 2021 11:06:55 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/</guid><description>第二十二日 HTML #Question: js放在html的&amp;lt;body&amp;gt;和&amp;lt;head&amp;gt;有什么区别 在浏览器渲染页面之前，它需要通过解析HTML标记然后构建DOM树。在这个过程中，如果解析器遇到了一个脚本(script)，它就会停下来，并且执行这个脚本，然后才会继续解析 HTML。如果遇到了一个引用外部资源的脚本(script)，它就必须停下来等待这个脚本资源的下载，而这个行为会导致一个或者多个的网络往返，并且会延迟页面的首次渲染时间
外部引入的脚本(script)会阻塞浏览器的并行下载
浏览器解析HTML顺序1
js 放在 &amp;lt;head&amp;gt; 中，如果不添加 async 或者 defer 时，当浏览器遇到 script 时，会阻塞 DOM 树的构建，进而影响页面的加载。当 js 文件较多时，页面白屏的时间也会变长。
把 js 放到 &amp;lt;body&amp;gt; 里（一般在 &amp;lt;/body&amp;gt; 的上面）时，由于 DOM 是顺序解析的，因此 js 不会阻塞 DOM 的解析。对于必须要在 DOM 解析前就要加载的 js，我们需要放在 &amp;lt;head&amp;gt; 中。
一般情况下是在网站中，同步在 &amp;lt;head&amp;gt; 加载的脚本通常是业务必须的，比如说我要注册一个 window 对象，或者用 document.write 写入一些内容，或者是业务需求，我们可以用 head 来做加载:头部给 script 标签加入 async 的属性，表示它是异步加载的脚本，不会对 html 进行阻塞，这也是大部分网站的做法
Conclusion 对于必须要在 DOM 加载之前运行的 JavaScript 脚本，我们需要把这些脚本放置在页面的 head 中，而不是通过外部引用的方式，因为外部的引用增加了网络的请求次数；并且我们要确保内敛的这些 JavaScript 脚本是很小的，最好是压缩过的，并且执行的速度很快，不会造成浏览器渲染的阻塞</description></item><item><title>毎日のフロントエンド　21</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/</link><pubDate>Wed, 06 Oct 2021 12:26:28 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/</guid><description>第二十一日 HTMl #Question: 谈谈对input元素中readonly和disabled属性的理解 相同点：
都会使文本框变成只读，不可编辑 不同点：
disabled 属性在将 input 文本框变成只读不可编辑的同时，还会使文本框变灰, 不允许填写和使用,但是readonly不会 disabled 属性修饰后的文本框内容，在不可编辑的同时，通过 js 也是获取不到的。但是用 readonly 修饰后的文本框内容，是可以通过 js 获取到的，也就只是简单的不可编辑而已 disabled 属性对 input 文本框，单选 radio, 多选 checkbox 都适用，但是 readonly 就不适用，用它修饰后的单选以及多选按钮仍然是可以编辑状态的。(readonly只针对input和textarea有效，而 disabled 对于所有的表单元素都有效) readonly 直译为 “只读”，一般用于只允许用户填写一次的信息，提交过一次之后，就不允许再次修改了 disabled 的数据是不会被获取和上传，readonly 的数据会被获取和上传 Summary：
readonly：不可编辑、可复制、可选择、可以接收焦点但不能被修改，后台会接收到传值 disabled：不可编辑、不可复制、不可选择、不能接收焦点，后台也不会接收到传值 CSS #Question: 说说对line-height是如何理解的？ line-height
The line-height CSS property sets the height of a line box. It&amp;rsquo;s commonly used to set the distance between lines of text.</description></item><item><title>毎日のフロントエンド　20</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/</link><pubDate>Tue, 05 Oct 2021 11:27:36 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/</guid><description>第二十日 HTML #Question: 请描述 HTML 元素的显示优先级 在 html 中，帧元素（frameset）的优先级最高(已不提倡使用)，表单元素比非表单元素的优先级要高。
frameset &amp;gt; 表单元素 &amp;gt; 非表单元素
表单元素: 文本输入框，密码输入框，单选框，复选框，文本输入域，列表框等等 非表单元素: a，div, table, span 等等 有窗口元素比无窗口元素的优先级高
有窗口元素: select 元素，object 元素，以及 frames 元素等等 无窗口元素: 大部分 html 元素都是无窗口元素 CSS #Question: 要让 Chrome 支持小于 12px 的文字怎么做？ Chrome 中有最小字号的限制，一般为 12px。原因是 Chrome 认为小于这个字号会影响阅读。
当需要小于 12px 字体的时候，有以下几个方法可以使用。
-webkit-text-size-adjust:none; 这个属性在高版本的 Chrome 中已经被废除。
使用 transform: scale(0.5, 0.</description></item><item><title>毎日のフロントエンド　19</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/</link><pubDate>Mon, 04 Oct 2021 15:37:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/</guid><description>第十九日 HTML #Question: 说说你对HTML中的置换元素和非置换元素的理解 置换元素（Replaced Element） 简单来说，置换元素可以设置宽 高,他们有自己的属性，和 inline-block 有一样的属性
主要是指 img、input、textarea、select、object 等这类默认就有 CSS 格式化外表范围的元素。
浏览器根据元素的标签和属性，来决定元素的具体显示内容
如：浏览器根据标签的 src 属性显示图片。根据 type 属性决定显示输入框还是按钮 非置换元素（non-Replaced Element） 就是除了 img、input、textarea、select、object 等置换元素以外的元素
内容直接展示给浏览器。例如标签，标签里的内容会被浏览器直接显示给用户
CSS #Question: CSS的属性content有什么作用呢？有哪些场景可以用到 :before 和 :after 默认 display: inline; 必须设置 content 属性，否则一切都是无用功， content 属性也只能应用在 :before 和 :after 伪元素上 默认 user-select: none;，就是 :before 和 :after 的内容无法被用户选中 伪元素可以和伪类结合使用形如：.target:hover:after :before 和 :after 是在 CSS2 中提出来的，所以兼容 IE8 ::before 和 ::after 是 CSS3 中的写法，为了将伪类和伪元素区分开 不可通过 DOM 使用，它只是纯粹的表象。在特殊情况下，从一个访问的角度来看，当前屏幕阅读不支持生成的内容 content 定义用法 content 属性与 :before 及 :after 伪元素配合使用，在元素头或尾部来插入生成内容</description></item><item><title>毎日のフロントエンド　18</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/</link><pubDate>Sat, 02 Oct 2021 23:10:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/</guid><description>第十八日 HTML #Question: 怎样在页面上实现一个圆形的可点击区域？ 用 canvas 画布，弧线画圆，然后计算鼠标的坐标是否落在圆内 利用 SVG 作出圆形，然后添加点击事件 用一个 div,给 div 添加圆角属性50%，在 div 上添加点击事件 利用 &amp;lt;map&amp;gt; 和 &amp;lt;area&amp;gt; 标签设置圆形点击区域&amp;lt;area&amp;gt; &amp;amp; &amp;lt;map&amp;gt; 1 &amp;lt;!-- svg 圆 --&amp;gt; &amp;lt;svg width=&amp;#34;100%&amp;#34; height=&amp;#34;100%&amp;#34; version=&amp;#34;1.1&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; &amp;gt; &amp;lt;circle cx=&amp;#34;100&amp;#34; cy=&amp;#34;50&amp;#34; r=&amp;#34;40&amp;#34; stroke=&amp;#34;black&amp;#34; stroke-width=&amp;#34;2&amp;#34; fill=&amp;#34;red&amp;#34; onclick=&amp;#34;alert(3)&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; CSS #Question: 什么是 FOUC？ 如何避免 FOUC 的？ FOUC 浏览器样式闪烁
FOUC 即 Flash of Unstyled Content，是指页面一开始以样式 A（或无样式）的渲染，突然变成样式 B。原因是样式表的晚于 HTML 加载导致页面重新进行绘制。
产生原因
通过 @import 方式导入CSS style 标签在 body 中或底部 有几个样式表，放在html结构的不同位置 解决方案： 把 link 标签将样式放在 head 中</description></item><item><title>毎日のフロントエンド　17</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/</link><pubDate>Fri, 01 Oct 2021 23:29:44 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/</guid><description>第十七日 HTML #Question: 你认为 table 的作用和优缺点是什么呢？ 优点：特定的布局时，可以很块完成布局，样式好控制，特别是居中、对齐。 缺点：结构比较繁杂，非常多的 DOM 节点，会导致页面加载变慢、不利于 SEO，相对于目前比较流行的布局来讲。如 flex，div+css，grid 等 作用：以前用来布局和展示表格，现在一般只用来展示表格 CSS #Question: 解释下 CSS sprites 的原理和优缺点分别是什么？ 简介 CSS Sprites 是一种网页图片应用处理方式。它允许将一个页面涉及到的所有零星图片都包含到一张大图中， 利用 CSS 的background-image，background- repeat，background-position的组合进行背景定位， 访问页面时避免图片载入缓慢的现象。
优点 CSS Sprites能很好地减少网页的 http 请求，从而大大的提高页面的性能，这是 CSS Sprites 最大的优点，也是其被广泛传播和应用的主要原因；
CSS Sprites能减少图片的字节；
CSS Sprites解决了网页设计师在图片命名上的困扰，只需对一张集合的图片命名，不需要对每一个小图片进行命名，从而提高了网页制作效率。
CSS Sprites只需要修改一张或少张图片的颜色或样式来改变整个网页的风格。
缺点 图片合并麻烦：图片合并时，需要把多张图片有序的合理的合并成一张图片，并留好足够的空间防止版块出现不必要的背景。
图片适应性差：在高分辨的屏幕下自适应页面，若图片不够宽会出现背景断裂。
图片定位繁琐：开发时需要通过工具测量计算每个背景单元的精确位置。
可维护性差：页面背景需要少许改动，可能要修改部分或整张已合并的图片，进而要改动 css。在避免改动图片的前提下，又只能（最好）往下追加图片，但这样增加了图片字节。</description></item><item><title>React HooksのUseEffect</title><link>https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/</link><pubDate>Thu, 30 Sep 2021 14:24:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/</guid><description>useState: 执行副作用 副作用的定义 通常，副作用是指一段和当前执行结果无关的代码。比如说要修改函数外部的某个变凉，或者发起一个请求等。 在函数组建本次执行中，useEffect 中代码的执行是不影响渲染出来的 UI。
Side effects are all the operations that affect your componet and can&amp;rsquo;t be done during rendering. Things like fetching data, subscriptions or manually changing the DOM are all examples of side effects.
Usage useEffect(callback, dependencies); callback, 要执行的回调函数；
dependencies 可选的依赖项数组。可选， 如果没有依赖项，callback 在函数组建每次执行完成之后都执行;如果依赖项是空数组，则只在第一渲染时实行回调函数； 如果指定依赖项，则在依赖项变化时才执行 callback
useEffect 是每次组件 render 结束后，判断依赖项并执行。
No dependencies array: the function runs after every render Empty dependencies array: the function runs only after the first render (use this for the stuff it&amp;rsquo;s doing will never get stale) Dependencies array with some values: the function runs only if any of those values change 此外，useEffect 允许返回一个函数，用与在组件销毁时，做一些清理操作，防止内存泄漏。 例如，移除监听事件。 类似于 类组件中的 componentWillUnmount function MyComponent() { React.</description></item><item><title>毎日のフロントエンド　16</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/</link><pubDate>Thu, 30 Sep 2021 09:55:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/</guid><description>第十六日 HTML ##Question: 元素的 alt 和 title 有什么区别；title 属性,alt属性の役割と違う・使い分け &amp;lt;head&amp;gt;内に書き込む要素としての title タグではない。
&amp;lt;img alt=&amp;#34;画像だよ&amp;#34; title=&amp;#34;こっちのtitleだよ&amp;#34; /&amp;gt; alt 属性 最常见用于 &amp;lt;img&amp;gt;标签上，alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。
推荐您在文档的每个图像中都使用这个属性(SEO 需要)。 这样即使图像无法显示，用户还是可以看到关于丢失了什么东西的一些信息。而且对于残疾人来说，alt 属性通常是他们了解图像内容的唯一方式。
title 属性 title 属性规定关于元素的额外信息。
这些信息通常会在鼠标移到元素上时显示一段工具提示文本（tooltip text）。
title 属性有一个很好的用途，即为链接添加描述性文字，特别是当连接本身并不是十分清楚的表达了链接的目的。这样就使得访问者知道那些链接将会带他们到什么地方。另外一个潜在的应用就是为图像提供额外的说明信息，比如日期或者其他非本质的信息。
title 属性常与 form 以及 a 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。当然 title 属性是比较广泛使用的，可以用在除了 base，basefont，head，html，meta，param，script 和 title 之外的所有标签。但是并不是必须的。
title 属性と alt 属性の違い
title 属性はマウスオーバー時にツールチップで表示されるテキストを入力する。 title 属性は img 以外に a タグや link タグなどあらゆる要素に指定していい。 alt 属性は画像の代替テキストを指定するタグで、画像リンク切れ時や音声読み上げブラウザで使われる。 alt 属性が使われるのは img タグのみで、内容がカラでも存在は必須。 &amp;lt;title&amp;gt; 标签</description></item><item><title>毎日のフロントエンド　15</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/</link><pubDate>Wed, 29 Sep 2021 09:49:10 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/</guid><description>第十五日 HTML #Question: title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别 title: 网页的标题，tag 标签标题。
h1： 网页内部的标题
Attention: 如果 title 为空，但是页面存在 h1,b,strong 标签，搜索引擎会默认页面 title 为 h1 内的内容，所以 得出结论 h1 是在没有外界干扰下除 title 以外第二个能强调页面主旨的标记，在一个页面中应该使用且只使用一次 h1 标记。
b： 加粗(bold)，是实体标签， 应当使用 CSS 而不是 &amp;lt;b&amp;gt;
strong: 语义化的 b， 属于逻辑标签。
Attention: 尽量使用 strong
i： 斜体，是实体标签，应当使用 CSS 而不是 &amp;lt;i&amp;gt;
em: 语义化的i，逻辑标签， i, em 同样表示强调，但是成都没有 strong 高</description></item><item><title>React HooksのUseState</title><link>https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/</link><pubDate>Wed, 29 Sep 2021 00:28:55 +0900</pubDate><guid>https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/</guid><description>useState: 让函数组建具有维持状态的能力 Example import React, { useState } from &amp;#39;react&amp;#39;; const Example = () =&amp;gt; { const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;{count}&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;+&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); }; Usage useState(initialState) 参数 initialState 是创建 state 的初始值， 它可以是任意类型
useState()的返回值是一个有着两个元素的数组。 第一个数组元素用来读取 state 的值， 第二个则是用来设置这个 state 的值的函数。 state为只读变量， 且必须通过setCount来设置 state
如果要创建多个 state， 需要多次调用useState
const [age, setAge] = useState(99); const [fruit, setFruit] = useState(&amp;#39;banana&amp;#39;); const [todos, setTodos] = useState([{ text: &amp;#39;react hooks&amp;#39; }]); Principles useState中的 set 与 class 组件中 setState 类似， 但是 class 组件中的 state 只有一个，因此在类组件中，一般采用对象作为一个 state； useState可以多次创建，更加语义化。</description></item><item><title>毎日のフロントエンド　14</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/</link><pubDate>Tue, 28 Sep 2021 15:34:08 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/</guid><description>第十四日 HTML #Question: 为什么 HTML5 只需要写 &amp;lt;!DOCTYPE HTML&amp;gt; 就可以？ The html document type declaration, also known as DOCTYPE, is the first line of code required in every HTML or xHTML document. The DOCTYPE declaration us an instruction to the web browser about what version of HTML the page is written in. This ensures that the web page is parsed the same way by different web browsers.
The declaration of HTML5 DOCTYPE is much simpler: it no longer requires a reference to DTDs as it is no longer based on SGML.</description></item><item><title>毎日のフロントエンド　13</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/</link><pubDate>Mon, 27 Sep 2021 21:33:31 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/</guid><description>第十三日 HTML #Question: html5 中的 form 怎么关闭自动完成？ 操作表单 form 的 autocomplete 属性值, 默认是开启的。
&amp;lt;form action=&amp;#34;demo_form.html&amp;#34; method=&amp;#34;get&amp;#34; autocomplete=&amp;#34;off&amp;#34;&amp;gt; First name:&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;fname&amp;#34; /&amp;gt;&amp;lt;br /&amp;gt; E-mail: &amp;lt;input type=&amp;#34;email&amp;#34; name=&amp;#34;email&amp;#34; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; CSS #Question: ::before和:after中单冒号和双冒号的区别是什么，这两个伪元素有什么作用 :表示伪类，是一种样式，比如:hover, :active 等
::表示伪元素，是具体的内容，比如::before 是在元素前面插入内容，::after 则是在元素后面插入内容，不过需要 content 配合，并且插入的内容是 inline 的
:before 和 :after 其实还是表示伪元素，在 css3 中已经修订为::before 和::after 了，只是为了能兼容 IE 浏览器，所以也可以表示成:before 和:after
JavaScript #Question: 说说你对 javascript 的作用域的理解 作用域就是一块封闭的区域，外部不能访问到这块区域里的变量、函数等，被{}包裹的就叫一个作用域（全局作用域是特殊的）</description></item><item><title>毎日のフロントエンド　12</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/</link><pubDate>Sun, 26 Sep 2021 23:36:48 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/</guid><description>第十二日 HTML #Question: 常见的浏览器内核都有哪些？并介绍下你对内核的理解 内核主要分为渲染引擎和 JS 引擎。前者负责页面的渲染，后者负责执行解析 JavaScript。之后，由于 JS 引擎越来越独立，现在所说的浏览器内核大都指渲染引擎
目前主流的内核有以下 4 个：
Trident: 由微软开发，即我们熟知的 IE 内核 Gecko: 使用 C++ 开发的渲染引擎，包括了 SpiderMonkey 即我们熟悉的 FireFox Presto: Opera 使用的内核 Webkit: Safari 使用的内核 Chrome 浏览器内核： 统称为 Chromium 内核，以前是 Webkit 内核，现在是Blink内核 CSS #Question: 说说你对 css 盒子模型的理解 基本概念
标准(W3C)盒子模型(box-sizing: content-box;)：包括 margin,border,padding,content,并且 content 部分不包括其他部分 标准盒子模型 IE 盒子模型(box-sizing: border-box;)：包括 margin,border,padding,content，content包含了border和padding IE盒子模型 补充说明：
CSS盒模型， 有内外两个部分。 外部属性 控制盒子本体是否占满一整行； 内部则控制：内部元素的属性。 例如：display: inline-block,外部是，inline 不占据整行； 内部是 block则表明内部遵循块状特性。 因此， display: inline; 可理解为 display: inline-inline;， display: block; 可理解为 display: block-block;</description></item><item><title>毎日のフロントエンド　11</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/</link><pubDate>Sat, 25 Sep 2021 23:02:39 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/</guid><description>第十一日 HTML #Question: 你对标签语义化的理解是什么？
什么是 HTML 语义化标签 语义化的标签，旨在让标签有自己的含义。
&amp;lt;p&amp;gt;一行文字&amp;lt;/p&amp;gt; &amp;lt;span&amp;gt;一行文字&amp;lt;/span&amp;gt; 如上代码，p 标签与 span 标签都区别之一就是，p 标签的含义是：段落。而 span 标签责没有独特的含义。
语义化标签的优势 语义化更具有可读性，便于团队开发维护 在没有 css 的情况下，页面也可以呈现出也很好的内容结构和代码结构 SEO，搜索引擎能更好的理解页面中各部分的关系，可更快更准确的搜索到信息 常见的语义化标签 因此我们在写页面结构时，应尽量使用有 语义的 HTML 标签
&amp;lt;title&amp;gt;：页面主体内容。 &amp;lt;hn&amp;gt;：h1~h6，分级标题，与 协调有利于搜索引擎优化。 &amp;lt;ul&amp;gt;：无序列表。 &amp;lt;li&amp;gt;：有序列表。 &amp;lt;header&amp;gt;：页眉通常包括网站标志、主导航、全站链接以及搜索框。 &amp;lt;nav&amp;gt;：标记导航，仅对文档中重要的链接群使用。 &amp;lt;main&amp;gt;：页面主要内容，一个页面只能使用一次。如果是 web 应用，则包围其主要功能。 &amp;lt;article&amp;gt;：定义外部的内容，其中的内容独立于文档的其余部分。 &amp;lt;section&amp;gt;：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。 &amp;lt;aside&amp;gt;：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。 &amp;lt;footer&amp;gt;：页脚，只有当父级是 body 时，才是整个页面的页脚。 &amp;lt;small&amp;gt;：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。 &amp;lt;strong&amp;gt;：和 em 标签一样，用于强调文本，但它强调的程度更强一些。 &amp;lt;em&amp;gt;：将其中的文本表示为强调的内容，表现为斜体。 &amp;lt;mark&amp;gt;：使用黄色突出显示部分文本。 &amp;lt;figure&amp;gt;：规定独立的流内容（图像、图表、照片、代码等等）（默认有 40px 左右 margin）。 &amp;lt;figcaption&amp;gt;：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。 &amp;lt;cite&amp;gt;：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。 &amp;lt;blockquoto&amp;gt;：定义块引用，块引用拥有它们自己的空间。 &amp;lt;q&amp;gt;：短的引述（跨浏览器问题，尽量避免使用）。 &amp;lt;time&amp;gt;：datetime 属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。 &amp;lt;abbr&amp;gt;：简称或缩写。 &amp;lt;dfn&amp;gt;：定义术语元素，与定义必须紧挨着，可以在描述列表 dl 元素中使用。 &amp;lt;address&amp;gt;：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。 &amp;lt;del&amp;gt;：移除的内容。 &amp;lt;ins&amp;gt;：添加的内容。 &amp;lt;code&amp;gt;：标记代码。 &amp;lt;meter&amp;gt;：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签） &amp;lt;progress&amp;gt;：定义运行中的进度（进程）。 CSS #Question: css 常用的布局方式有哪些？</description></item><item><title>毎日のフロントエンド　10</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/</link><pubDate>Thu, 23 Sep 2021 23:39:38 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/</guid><description>第十日 HTML #Question: viewport 常见设置都有哪些？
viewport 就是视区窗口，也就是浏览器中显示网页的部分。PC 端上基本等于设备显示区域，但在移动端上viewport 会超出设备的显示区域 (即会有横向滚动条出现)。设备默认的 viewport 在 980 - 1024 之间。
设置 解释 width 设置 layout viewport 的宽度，为一个正整数，或字符串&amp;quot;width-device&amp;quot; initial-scale 设置页面的初始缩放值，为一个数字，可以带小数 minimum-scale 允许用户的最小缩放值，为一个数字，可以带小数 maximum-scale 允许用户的最大缩放值，为一个数字，可以带小数 height 设置 layout viewport 的高度，这个属性对我们并不重要，很少使用 user-scalable 是否允许用户进行缩放，值为&amp;quot;no&amp;quot;或&amp;quot;yes&amp;quot;, no 代表不允许，yes 代表允许 // width=device-width, initial-scale=1.0 是为了兼容不同浏览器 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&amp;#34; /&amp;gt; dpr 与 CSS 像素。CSS 像素的 1px 在 PC 端上与设备的物理像素基本一致，而到手机端就会有两个物理像素对应一个 CSS 像素的情况出现（如 iPhone 的视网膜屏）。 所以 iPhone 上的 dpr = 2 即 2 个物理像素 / 一个 CSS 像素（独立像素）</description></item><item><title>毎日のフロントエンド　9</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/</link><pubDate>Thu, 23 Sep 2021 16:48:11 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/</guid><description>第九日 HTML #Question: 浏览器内多个标签页之间的通信方式有哪些？(网页间 消息 通讯)
是什么？ 在浏览器中，两个不同页面（A 页面的 window ！= B 页面的 window）网页之间的消息传递
消息传递方式 1. WebSocket - 可跨域 WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。
WebSocket 教程
2. postMessage - 可跨域 window.postMessage() 方法安全地启用 Window 对象之间的跨源通信
对将接收消息的窗口的引用，获得此类引用的方法包括：
&amp;lt;iframe&amp;gt; Window.open （生成一个新窗口然后引用它） Window.opener （引用产生这个的窗口） 3. Worker 之 ShareWorker webworker，作为浏览器的一个新特性，可以提供一个额外的线程来执行一些 js 代码（真正的多线程），并且不会影响到浏览器用户界面，但是不能 DOM 操作。
SharedWorker 可以被多个 window 共同使用，所以可以用来跨页面传输数据，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)。
4. Server-Sent Events HTML5 服务器发送事件（server-sent event）允许网页获得来自服务器的更新。 Server-Sent 事件指的是网页自动获取来自服务器的更新。</description></item><item><title>毎日のフロントエンド　8</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/</link><pubDate>Wed, 22 Sep 2021 16:40:32 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/</guid><description>第八日 CSS #Question: 清除浮动的方式有哪些及优缺点？
现阶段 较多使用Flex 布局 浮动带来的问题是盒子塌陷问题 什么是盒子塌陷？ 外部盒子本应该包裹住内部的浮动盒子，结果却没有
原因 父元素只包含浮动元素，那么它的高度就会塌缩为零, 前提是没有设置高度height属性，或者设置为 auto，就会出现盒子塌陷，如果父元素不包含任何的可见背景，这个问题会很难被注意到。 因为子元素设置了 float 属性，而 float 属性会把元素从标准文档流中抽离，直接结果就是外部盒子丢了两个孩子，因为内部没有其它盒子了，所以外部盒子只包裹文本节点内容，却把两个内部盒子扔在外面了。
解决方案 把外部盒子也从标准文档流中抽离
缺点是： 父元素加上 float 有可能影响整个页面 在外部盒子内最下方添上带 clear 属性的空盒子： 把 &amp;lt;div style=&amp;quot;clear:both;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;放在盒内底部
给外部盒子添加： overflow:hidden 清除浮动
用after伪元素清除浮动
.clearfix { \*zoom: 1; } .clearfix:before, .clearfix:after { display: table; line-height: 0; content: &amp;#39;&amp;#39;; } .clearfix:after { clear: both; } 当然，还有前文提到的 BFC</description></item><item><title>毎日のフロントエンド　7</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/</link><pubDate>Tue, 21 Sep 2021 10:52:54 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/</guid><description>第七日 HTML #Question: iframe 框架都有哪些优缺点？
The &amp;lt;iframe&amp;gt; HTML element represents a nested browsing context, embedding another HTML page into the current one.
&amp;lt;iframe&amp;gt;: The Inline Frame element - HTML: HyperText Markup Language | MDN
iFrame — A love story. by Max Rafferty | Slices of Bread | Medium
Advantages of &amp;lt;iframe&amp;gt;:
iframe can display the embedded web page intact. If there are multiple pages referencing iframe, you only need to modify the content of iframe, and then you can change the content of every page you call, which is convenient and fast.</description></item><item><title>毎日のフロントエンド　6</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/</link><pubDate>Mon, 20 Sep 2021 16:14:06 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/</guid><description>第六日 HTML #Question: label 都有哪些作用？并举相应的例子说明
The &amp;lt;label&amp;gt; HTML element represents a caption for an item in a user interface.
表示用户界面中某个元素的说明。
Associating a &amp;lt;label&amp;gt; with an &amp;lt;input&amp;gt; element offers some major advantages:
A screen reader will read out the label when the user is focused on the form &amp;lt;input&amp;gt;, making it easier for an assistive technology user to understand what data should be entered.
When a user clicks or touches a label, the browser passes the focus to its associated input.</description></item><item><title>毎日のフロントエンド　5</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/</link><pubDate>Sun, 19 Sep 2021 12:16:31 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/</guid><description>第五日 HTML #Question: 简述超链接 target 属性的取值和作用
target Where to display the linked URL. The following keywords have special meanings for where load the URL
value 描述 description _self （默认）在相同的框架中打开被链接文档 the current browsing context(default) _blank 在新窗口中打开被链接文档 usually a new tab, but users can configure browers to open a new window instead _parent 在父框架集中打开被链接文档 the parent browsing context of the current one.</description></item><item><title>毎日のフロントエンド　4</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/</link><pubDate>Sat, 18 Sep 2021 13:33:07 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/</guid><description>第四天 HTML #Question: HTML5 的文件离线储存怎么使用，工作原理是什么？
TL;DR &amp;ndash; HTML5 local storage is an alternative to cookies, allowing web applications to store user information in their browser.
With web storagem web applications can store data locally within the user&amp;rsquo;s browser.
Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.</description></item><item><title>毎日のフロントエンド　3</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/</link><pubDate>Thu, 16 Sep 2021 17:39:42 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/</guid><description>第三天 HTML #Question: HTML 全局属性(global attribute)有哪些（包含HTML5）?
Global attributes - HTML: HyperText Markup Language | MDN
Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.
document.body.__proto__
accesskey: 生成键盘快捷键提示。Provides a hint for generating a keyboard shortcut for the current element. autocapitalize: 控制用户的文本输入 是否 如何 自动大写。 Controls whether and how text input is automatically capitalized as it is entered/edited by user.</description></item><item><title>毎日のフロントエンド　2</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/</link><pubDate>Wed, 15 Sep 2021 19:48:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/</guid><description>第二天 HTML #Question: HTML 的元素有哪些（包含 HTML5）？
块级元素 Block
Block elements are meant to structure the main parts of your page, by dividing your content in coherent blocks.
常用：div、p、ul、li、ol 定义页面结构（Structure elements）: aside、footer、header、nav、section、main 文章：address、article、figure、figcaption、h1、h2、h3、h4、h5、h6、pre 表格：table、thead、tbody、tfoot、th、td、caption 表单：form 其他：canvas 行内元素 Inline
Inline elements are meant to differentiate part of a text, to give it a oarticular function or meaning. Inline elements usually comprise a single or few words.
常用：a、img、span 文本：em、i、strong、small 表单：button、input、label、option、progress、select、textarea 媒体：audio、video Block elements can contain either block or inline elements.</description></item><item><title>毎日のフロントエンド　1</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/</link><pubDate>Tue, 14 Sep 2021 11:58:23 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/</guid><description>第一天 HTML #Question: 页面导入样式时，使用 link 和@import 有什么区别？
&amp;lt;link&amp;gt; 是HTML的标签。 The @import is used to import style rules from other style sheets.
&amp;lt;!-- @import Syntax --&amp;gt; @import url; @import url list-of-media-queries; @import url supports(supports-query); @import url supports(supports-query) list-of-media-queries; &amp;lt;link&amp;gt; 引入的样式，在页面加载时，同时加载。 @import 引入的样式需要等页面加载完成之后再加载。
&amp;lt;link&amp;gt; 不存在兼容性问题，@import 不兼容 ie5 以下
&amp;lt;link&amp;gt; 可通过 js 操作 DOM 动态引入样式， @import 不可以
CSS #Question: 圣杯布局和双飞翼布局的理解和区别，并用代码实现
即 css 三栏布局&amp;mdash;改变 viewpoint 宽度，两个边栏的宽度不变(左右定宽)，只会中间的区域变化， 且 中间部分优先渲染</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（六）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</link><pubDate>Mon, 13 Sep 2021 17:34:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</guid><description>What is &amp;ldquo;Lifting State up&amp;rdquo; and Why we need it? Lifting state up is a common pattern that is essential for React developer to know. It helps us avoid more complex pattern for managing our state.
Often there will be a need to share state between different components. The common approach to share state between two components is to move the state to common parent of the two compenont.
我们可以很清楚的明白 React 状态提升主要就是用来处理父组件和子组件的数据传递的；他可以让我们的数据流动的形式是自顶向下单向流动的，所有组件的数据都是来自于他们的父辈组件，也都是由父辈组件来统一存储和修改，再传入子组件当中。</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（五）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</link><pubDate>Sun, 12 Sep 2021 17:48:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</guid><description>防抖 与 节流 Debouncing and Throttling in Javascript Debouncing and Throttling are two widely-used techniques to improve the performance of code that gets executed repeatedly within a short time(a peroid of time).
devbounce-throttle
Debouncing 防抖 用来实现高频触发函数调用时，实际只调用最后一次函数执行。
即： 触发事件后过一段时间才执行函数， 如果在这段时间内再次触发，则重新计时。
用于可能出现高频调用的 DOM 或 样式修改， 这种高频调用会导致页面高频重排重绘，DOM 闪烁抖动，影响页面性能。
Implementing Debounce: Start with o timeout If the debounced function is called again, reset the timer to the speccial delay In case of timeout, call the debounced function.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（四）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</link><pubDate>Sat, 11 Sep 2021 15:14:04 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid><description>关键知识点六： Restful API 设计的几个最佳实践 steps toward the glory of REST Richardson Maturity Model
Level 0 The Starting point for the model is using HTTP as a transport system for remote interactions, but without using any of the mechanisms of the web.If you use SOAP or XML-RPC it&amp;rsquo;s basically the same mechanism, the only difference is that you wrap the XML messages in some kind of envelope.
Level 1 - Resources At level One, rather than making all the requests to s singular service endpoint, we start talking to individual resources.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（三）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</link><pubDate>Fri, 10 Sep 2021 18:02:49 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</guid><description>知识点五： Restful API 设计 1. Endpoint 表示 API 的具体地址
在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中 不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&amp;quot;集合&amp;quot;（collection），所以 API 中的名词也应该使用复数。
# Example 应使用 HTTPs 协议 https://api.example.com/v1/books https://api.example.com/v1/movies 2. HTTP METHOD 对于资源的具体操作，应由 HTTP 动词表示。
# 常用方法, (对应 SQL 语句) GET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE）：在服务器新建一个资源。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。 DELETE（DELETE）：从服务器删除资源。 # 具体的使用实例 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 3. Filtering 如果记录数量很大，服务器不可能将全部数据返回，此时，API 应提供参数，用于过滤返回结果。
# 以下是一些常用参数 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page=2&amp;amp;per_page=100：指定第几页，以及每页的记录数。 ?sortby=name&amp;amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件 参数的设计允许存在冗余，例如：GET /zoo/ID/animals 等价于 GET /animals?</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（二）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</link><pubDate>Thu, 09 Sep 2021 20:17:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid><description>关键知识点四： Restful API What is REST REST is acronym for REpresentational State Transfer. It is architectural style for distributed hyermedia systems and was first presented by Roy Fielding in 2000 in his famous dissertation.
Principles of REST Client-server
By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（一）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link><pubDate>Wed, 08 Sep 2021 23:50:49 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid><description>第一章 知识点一： 用 create-react-app 初始化项目： 1. Quick Start npx create-react-app react-jira --template typescript # or npm init react-app react-jira # or yarn create react-app react-jira npx create-react-app my-app --use-npm # if you prefer to use npm 2. Folder Structure For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won’t see them.
字体，图片等也同样应置于 scr 目录中</description></item><item><title>Install Go on Mac with Homebrew</title><link>https://youkoucoding.github.io/p/golang-config/</link><pubDate>Tue, 07 Sep 2021 23:46:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/golang-config/</guid><description>Precondition: macOS Big Sur 11.5.2
Golang&amp;rsquo;s installation and configuration with homebrew in Fish shell 1. Install golang with homebrew brew update brew search golang brew info golang # show the information of golang brew install golang 2. Setup the workspace: Add environment variables: First, we&amp;rsquo;ll need to tell Go the location of our workspace.
We&amp;rsquo;ll add some environment variables into shell config.
bash or zsh The config files is located at home directory:</description></item><item><title>Chinese Test</title><link>https://youkoucoding.github.io/p/test-chinese/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/test-chinese/</guid><description>正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。
奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。
引用 思念是最暖的忧伤像一双翅膀
让我停不了飞不远在过往游荡
不告而别的你 就算为了我着想
这么沉痛的呵护 我怎么能翱翔
最暖的憂傷 - 田馥甄
图片 Photo by Florian Klauer on Unsplash Photo by Luca Bravo on Unsplash</description></item><item><title>Markdown Syntax Guide</title><link>https://youkoucoding.github.io/p/markdown-syntax-guide/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/markdown-syntax-guide/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Rich Content</title><link>https://youkoucoding.github.io/p/rich-content/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/rich-content/</guid><description>&lt;p>Hugo ships with several &lt;a class="link" href="https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes" target="_blank" rel="noopener"
>Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a class="link" href="https://gohugo.io/about/hugo-and-gdpr/" target="_blank" rel="noopener"
>Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p></description></item><item><title>Placeholder Text</title><link>https://youkoucoding.github.io/p/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/placeholder-text/</guid><description>&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://youkoucoding.github.io/p/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p></description></item><item><title>Emoji Support</title><link>https://youkoucoding.github.io/p/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/emoji-support/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p></description></item></channel></rss>