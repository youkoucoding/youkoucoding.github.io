<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技術の手帳</title><link>https://youkoucoding.github.io/</link><description>Recent content on 技術の手帳</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 19 Oct 2021 12:55:27 +0900</lastBuildDate><atom:link href="https://youkoucoding.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>毎日のフロントエンド　33</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/</link><pubDate>Tue, 19 Oct 2021 12:55:27 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/frontend-33-cover.jpg" alt="Featured image of post 毎日のフロントエンド　33" />&lt;h1 id="第三十三日">第三十三日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-html-和-html5-有什么区别呢">&lt;strong>Question:&lt;/strong> html 和 html5 有什么区别呢&lt;/h3>
&lt;h4 id="文档声明区别">文档声明区别&lt;/h4>
&lt;ol>
&lt;li>HTML 文档的类型声明为：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD HTML 4.01//EN&amp;#34; &amp;#34;http://www.w3.org/TR/html4/strict.dtd&amp;#34;&amp;gt;&lt;/span>
//或
&lt;span class="cp">&amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD XHTML 1.0 Strict//EN&amp;#34; &amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;#34;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>HTML5 文档的类型声明为：&lt;/li>
&lt;/ol>
&lt;p>&lt;code>&amp;lt;!DOCTYPE html&amp;gt;&lt;/code>&lt;/p>
&lt;h4 id="结构语义区别">结构语义区别&lt;/h4>
&lt;p>&lt;code>HTML&lt;/code>：没有体现结构语义的标签，如&lt;code>&amp;lt;div id='nav'&amp;gt;&amp;lt;/div&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;code>HTML5&lt;/code>：添加了许多具有语义化的标签，如：&lt;code>&amp;lt;article&amp;gt;&lt;/code>、&lt;code>&amp;lt;aside&amp;gt;&lt;/code>、&lt;code>&amp;lt;audio&amp;gt;&lt;/code>，更利于 &lt;strong>SEO&lt;/strong>&lt;/p>
&lt;p>相对于 HTML，HTML5 中新增和修改了一些元素&lt;/p>
&lt;h4 id="绘图区别">绘图区别&lt;/h4>
&lt;p>HTML5：HTML5 的 &lt;code>canvas&lt;/code> 使用脚本（通常使用 JavaScript）在网页是绘制图像，可以控制画布上每个像素&lt;/p>
&lt;h4 id="音频的视频的支持">音频的视频的支持&lt;/h4>
&lt;p>HTML：如果不使用 Flash 播放器支持，它不支持音频和视频&lt;/p>
&lt;p>HTML5：使用&lt;code>&amp;lt;audio&amp;gt;&lt;/code>和&lt;code>&amp;lt;vedio&amp;gt;&lt;/code>标签来支持音频和视频控制。&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-用-css-绘制一个三角形1">&lt;strong>Question:&lt;/strong> 用 CSS 绘制一个三角形&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>用伪元素来实现这种装饰性的效果，&lt;code>content&lt;/code> 为空，就不需要 &lt;code>width&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">triangle&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">after&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">35&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="kc">transparent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border-bottom-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">lightgreen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-说说对-this-的理解">&lt;strong>Question:&lt;/strong> 说说对 &lt;code>this&lt;/code> 的理解&lt;/h3>
&lt;h4 id="一一般函数">一，一般函数&lt;/h4>
&lt;p>函数中的 this 永远指向函数的调用者（在代码执行时才能确定），谁最终调用这个函数，this 就指向谁:&lt;/p>
&lt;ul>
&lt;li>在全局环境中，&lt;code>this&lt;/code> 指向 &lt;code>window&lt;/code>（如果开启严格模式，this 将指向&lt;code>undefined&lt;/code>)&lt;/li>
&lt;li>如果函数是通过对象调用的，那么 this 就指向这个&lt;strong>对象&lt;/strong>（但要小心 this 绑定丢失&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，尤其要注意将函数作为值向函数中传入赋值时发生隐式丢失）&lt;/li>
&lt;li>如果函数是通过 &lt;code>call&lt;/code>、&lt;code>apply&lt;/code>、&lt;code>bind&lt;/code> 进行绑定，那么 this 就指向被绑定的对象&lt;/li>
&lt;li>如果函数是通过&lt;code>new&lt;/code>绑定的（&lt;strong>构造函数&lt;/strong>），那么&lt;code>this&lt;/code>就指向&lt;code>new&lt;/code>出来的对象:
&lt;ul>
&lt;li>使用 new 来调用函数的时候会自动执行下面的操作：
&lt;ol>
&lt;li>创建（或这说构造）一个全新的对象&lt;/li>
&lt;li>这个新的对象会被执行&lt;code>[[Prototype]]&lt;/code>连接&lt;/li>
&lt;li>这个新对象会绑定到函数调用的&lt;code>this&lt;/code>&lt;/li>
&lt;li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会&lt;strong>自动返回这个新对象&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>显示绑定：使用&lt;code>call，apply&lt;/code>的话，在使用回调函数的情况中会出现违背预期的结果。因为 call，apply 都会&lt;strong>立即执行。&lt;/strong> 而硬绑定 bind 则&lt;strong>不会立即执行&lt;/strong>。符合我们对回调函数执行的要求&lt;/p>
&lt;/blockquote>
&lt;h4 id="二箭头函数">二，箭头函数&lt;/h4>
&lt;p>&lt;strong>箭头函数&lt;/strong>中的&lt;code>this&lt;/code>例外，它指向定义时所在的位置。或者可以说&lt;strong>箭头函数&lt;/strong>的&lt;code>this&lt;/code>继承自外层作用域，只要确定了外层作用域的 this，就知道箭头函数中的 this 指向谁了。&lt;/p>
&lt;h4 id="types-of-binding-in-js">Types of Binding in JS&lt;/h4>
&lt;ul>
&lt;li>Default Binding&lt;/li>
&lt;li>Implicit Binding&lt;/li>
&lt;li>Explicit Binding&lt;/li>
&lt;li>Constructor call Binding&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Default Binding in JavaScript&lt;/em>&lt;/strong>&lt;/p>
&lt;p>One of the first rule to remember is that:
&lt;strong>If the function housing a this reference is a standalone function, then that function is bound to the global object.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">alert&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; is calling&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Kingsley&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">alert&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// Kingsley is calling
&lt;/span>&lt;span class="c1">// TypeError: `this` is `undefined` when in &amp;#39;use strict&amp;#39;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;em>Implicit Binding in JavaScript&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Another scenario to look out for is whether the function is attached to an object (its context) &lt;strong>at the call site&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>A function can use an object as its context only if that object is bound to it at the call site.&lt;/strong> This form of binding is known as implicit binding.&lt;/p>
&lt;p>An easy way to figure out which object &lt;code>this&lt;/code> is &lt;strong>implicitly bound to&lt;/strong> is to look at which object is to the left of the dot &lt;code>(.)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">alert&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; years old&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">myObj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">22&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">alert&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">alert&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">nestedObj&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">26&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">alert&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">alert&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">myObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alert&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// `this` is bound to `myObj` -- 22 years old
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">myObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">nestedObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alert&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// `this` is bound to `nestedObj` -- 26 years old
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;em>Explicit binding in JavaScript&lt;/em>&lt;/strong>&lt;/p>
&lt;p>&lt;code>call()&lt;/code> and &lt;code>apply()&lt;/code>.&lt;/p>
&lt;p>Along with a couple other set of utility functions, these two utilities are available to all functions in JavaScript via the &lt;code>[[Prototype]]&lt;/code> mechanism.&lt;/p>
&lt;blockquote>
&lt;p>Hard binding is a perfect way to lock a context into a function call and truly make that function into a method.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Hard binding
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">alert&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">myObj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">22&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">alert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">myObj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">bar&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 22
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 22
&lt;/span>&lt;span class="c1">// a hard-bound `bar` can no longer have its `this` context overridden
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// still 22
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;em>Constructor Call Binding in JavaScript&lt;/em>&lt;/strong>&lt;/p>
&lt;p>When a function is invoked with the &lt;code>new&lt;/code> keyword in front of it, otherwise known as a constructor call, the following things occur:&lt;/p>
&lt;ol>
&lt;li>A brand new object is created (or constructed)&lt;/li>
&lt;li>The newly constructed object is &lt;code>[[Prototype]]&lt;/code>-linked to the function that constructed it&lt;/li>
&lt;li>The newly constructed object is set as the &lt;code>this&lt;/code> binding for that function call.&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 118;
flex-basis: 283px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/this-1.png" data-size="1000x847">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/this-1.png"
width="1000"
height="847"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/this-1_hu71e203915231571c8ed66559528d62d1_163838_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/this-1_hu71e203915231571c8ed66559528d62d1_163838_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="this-1">
&lt;/a>
&lt;figcaption>this-1&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 119;
flex-basis: 287px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/this-2.png" data-size="1000x834">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/this-2.png"
width="1000"
height="834"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/this-2_hua82d7b21903e14cc2323062876f2ae4f_135325_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/this-2_hua82d7b21903e14cc2323062876f2ae4f_135325_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="this-2">
&lt;/a>
&lt;figcaption>this-2&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.freecodecamp.org/news/what-is-this-in-javascript/" target="_blank" rel="noopener"
>What Does &amp;lsquo;this&amp;rsquo; Mean in JavaScript? The this Keyword Explained with Examples&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/#css" target="_blank" rel="noopener"
>毎日のフロントエンド　 6 - CSS&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://github.com/getify/You-Dont-Know-JS/issues/1031" target="_blank" rel="noopener"
>&amp;ldquo;this &amp;amp; object prototypes&amp;rdquo;: Chapter 2 &amp;lsquo;Explicit Binding&amp;rsquo; - question about explicit binding losing the &amp;ldquo;this&amp;rdquo; binding · Issue #1031 · getify/You-Dont-Know-JS&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>毎日のフロントエンド　32</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-32/</link><pubDate>Mon, 18 Oct 2021 17:44:05 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-32/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-32/frontend-31-cover.jpg" alt="Featured image of post 毎日のフロントエンド　32" />&lt;h1 id="第三十二日">第三十二日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-说说对-html-元素的显示优先级的理解">&lt;strong>Question:&lt;/strong> 说说对 &lt;code>HTML&lt;/code> 元素的显示优先级的理解&lt;/h3>
&lt;p>Day20 类似。&lt;/p>
&lt;p>帧元素（&lt;code>frameset&lt;/code>) 优先级最高 &lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code> 表单元素 &lt;code>&amp;gt;&lt;/code> 非表单元素，即 &lt;code>input type=&amp;quot;radio&amp;quot;&lt;/code> 之类的表单控件 &lt;code>&amp;gt;&lt;/code> 普通的如 &lt;code>a,div&lt;/code> 等元素。&lt;/p>
&lt;p>从有窗口和无窗口元素来分，有窗口元素 &amp;gt; 无窗口元素。有窗口元素如 &lt;code>Select&lt;/code> 元素、&lt;code>Object&lt;/code> 元素。&lt;/p>
&lt;p>&lt;code>z-index&lt;/code> 属性也可以改变显示优先级，但只对同种类型的元素才有效。&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-line-height三种赋值方式有何区别">&lt;strong>Question:&lt;/strong> &lt;code>line-height&lt;/code>三种赋值方式有何区别&lt;/h3>
&lt;p>&lt;code>line-height&lt;/code> 可以有带单位及不带单位的写法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">150&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于 &lt;code>line-height&lt;/code> 有继承性，直接在某个元素上使用 line-height，以下这三种写法是没有区别的，比如给所有的 p 标签添加行高属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">150&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>三种方式的区别在于，给父元素设置行高的时候子元素的继承方式:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>带有单位的 &lt;code>line-height&lt;/code> 会被计算成 &lt;code>px&lt;/code> 后继承。子元素的 &lt;code>line-height&lt;/code> &lt;code>=&lt;/code> 父元素的 &lt;code>line-height * font-size&lt;/code> （如果是 px 了就直接继承）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而不带单位的 &lt;code>line-height&lt;/code> 被继承的是倍数，子元素的 &lt;code>line-height&lt;/code> &lt;code>=&lt;/code> 子元素的 &lt;code>font-size *&lt;/code> 继承的&lt;strong>倍数&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-造成内存泄漏的操作有哪些">&lt;strong>Question:&lt;/strong> 造成内存泄漏的操作有哪些&lt;/h3>
&lt;ol>
&lt;li>闭包&lt;/li>
&lt;li>无效的全局变量&lt;/li>
&lt;li>&lt;code>addEventListener&lt;/code> didn&amp;rsquo;t remove 副作用未清除&lt;/li>
&lt;li>&lt;code>setInterval&lt;/code> didn&amp;rsquo;t clear&lt;/li>
&lt;li>还有一种是递归的时候不用尾调用优化，如果层级比较深的话会造成内存消耗激增，甚至程序崩溃，但是只要递归完成了，这些内存会被释放&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/6844903556739235848" target="_blank" rel="noopener"
>line-height 3 种设置方式的区别 - 掘金&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　31</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/</link><pubDate>Sun, 17 Oct 2021 16:01:03 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/frontend-31-cover.jpg" alt="Featured image of post 毎日のフロントエンド　31" />&lt;h1 id="第三十一日">第三十一日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-dom-和-bom-有什么区别">&lt;strong>Question:&lt;/strong>　 &lt;code>DOM&lt;/code> 和 &lt;code>BOM&lt;/code> 有什么区别&lt;/h3>
&lt;blockquote>
&lt;p>&lt;code>BOM&lt;/code> 是 &lt;code>Browser Object Model&lt;/code> 的缩写，即浏览器对象模型。&lt;code>DOM&lt;/code> 是 &lt;code>Document Object Model&lt;/code> 的缩写，即文档对象模型。都是浏览器提供给 JavaScript 的 API 接口&lt;/p>
&lt;/blockquote>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 165;
flex-basis: 397px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/bom_dom.jpeg" data-size="663x400">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/bom_dom.jpeg"
width="663"
height="400"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/bom_dom_hu0f440bc4148fb20e12b68ac0e5bdfe3a_47335_480x0_resize_q75_box.jpeg 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/bom_dom_hu0f440bc4148fb20e12b68ac0e5bdfe3a_47335_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="BOM-DOM">
&lt;/a>
&lt;figcaption>BOM-DOM&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="bom-指-浏览器对象模型">BOM 指 浏览器对象模型&lt;/h4>
&lt;p>提供了独立于内容而与浏览器窗口进行交互的对象。描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，譬如可以弹出新的窗口，改变状态栏中的文本。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 309;
flex-basis: 741px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/bom.jpeg" data-size="847x274">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/bom.jpeg"
width="847"
height="274"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/bom_hu90620aca69e6a91e51217c5b7eb90702_11597_480x0_resize_q75_box.jpeg 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/bom_hu90620aca69e6a91e51217c5b7eb90702_11597_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="BOM">
&lt;/a>
&lt;figcaption>BOM&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="dom-指-文档对象模型">DOM 指 文档对象模型&lt;/h4>
&lt;p>DOM 是针对 HTML 的基于树的 API。描述了处理网页内容的方法和接口，是 HTML 的 API，DOM 把整个页面规划成由节点层级构成的文档。
&lt;figure
class="gallery-image"
style="
flex-grow: 137;
flex-basis: 329px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/dom.jpeg" data-size="665x485">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/dom.jpeg"
width="665"
height="485"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/dom_hu3699dad03004dc9539a3595d222ffbe7_6463_480x0_resize_q75_box.jpeg 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/dom_hu3699dad03004dc9539a3595d222ffbe7_6463_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="DOM">
&lt;/a>
&lt;figcaption>DOM&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>只有 JS 的宿主环境是浏览器的时候才有 DOM 和 BOM ，在 Node 中是没有这两个对象的&lt;/strong>&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question让网页的字体变得清晰变细用-css-怎么做">&lt;strong>Question:&lt;/strong>　让网页的字体变得清晰，变细用 CSS 怎么做&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>font-weight&lt;/code> + &lt;code>font-family&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>font-weight&lt;/code> 来控制粗细还需要对应的字体有没有对应的变种字体。因此这就和 font-family 相关。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-webkit-font-smoothing: antialiased;&lt;/code>&lt;/p>
&lt;ul>
&lt;li>这个属性是 Chrome 的抗锯齿属性。加上后会显得细一些，但是只针对 webkit 内核的浏览器才有效。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question写一个方法把-0-和-1-互转0-置-11-置-0">&lt;strong>Question:&lt;/strong>　写一个方法把 0 和 1 互转（0 置 1，1 置 0）&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">change&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;number&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">newStrArr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">newStr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">newStrArr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">newStr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">val&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;10101&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">change&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//01010
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10101&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">change&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//1010
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.javascripttutorial.net/javascript-bom/" target="_blank" rel="noopener"
>JavaScript Browser Object Model (BOM)&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.javascripttutorial.net/javascript-dom/" target="_blank" rel="noopener"
>JavaScript DOM Tutorial&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/haizlin/fe-interview/blob/master/category/history.md" target="_blank" rel="noopener"
>fe-interview/history.md haizlin/fe-interview&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　30</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-30/</link><pubDate>Sat, 16 Oct 2021 10:26:51 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-30/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-30/frontend-30-cover.jpg" alt="Featured image of post 毎日のフロントエンド　30" />&lt;h1 id="第三十日">第三十日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-网页上的验证码是为了解决什么问题说说了解的验证码种类有哪些">&lt;strong>Question:&lt;/strong> 网页上的验证码是为了解决什么问题？说说了解的验证码种类有哪些&lt;/h3>
&lt;ol>
&lt;li>图形验证码&lt;/li>
&lt;li>字符验证码 文字+混淆 如早期的 7456 这种结果的验证码&lt;/li>
&lt;li>复杂字符验证码 复杂文字+混淆 如加入中文等本土化的增加识别难度&lt;/li>
&lt;li>计算验证码 数字+运算符+混淆 如 1+2=? 需要识别表达式增加识别难度&lt;/li>
&lt;li>精确识别 文字+混淆文字 如选出 优贝在线 中的 贝字，或者选出所有的筷子，所有的红绿灯（12306）&lt;/li>
&lt;li>滑动拼图验证 图像+滑块+图像凹槽 如常见的滑动拼图，提供商有易盾之类的&lt;/li>
&lt;li>拼图验证 图像+打乱 需要用户去拼合完成。teamviewer 和 google&lt;/li>
&lt;li>物理验证&lt;/li>
&lt;li>手机短信验证码&lt;/li>
&lt;li>手机语音验证码&lt;/li>
&lt;/ol>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-描述下了解的图片格式及使用场景">&lt;strong>Question:&lt;/strong> 描述下了解的图片格式及使用场景&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>格式&lt;/th>
&lt;th>优点&lt;/th>
&lt;th>缺点&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>gif&lt;/td>
&lt;td>文件小，支持动画、透明，无兼容性问题&lt;/td>
&lt;td>只支持 256 种颜色&lt;/td>
&lt;td>色彩简单的 logo、icon、动图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jpg&lt;/td>
&lt;td>色彩丰富，文件小&lt;/td>
&lt;td>有损压缩，反复保存图片质量下降明显&lt;/td>
&lt;td>色彩丰富的图片/渐变图像&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>png&lt;/td>
&lt;td>无损压缩，支持透明，简单图片尺寸小&lt;/td>
&lt;td>不支持动画，色彩丰富的图片尺寸大&lt;/td>
&lt;td>logo/icon/透明图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>webp&lt;/td>
&lt;td>文件小，支持有损和无损压缩，支持动画、透明&lt;/td>
&lt;td>浏览器兼容性不好&lt;/td>
&lt;td>支持 webp 格式的 app 和 webview&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>▍PNG&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点：PNG 格式图片是无损压缩的图片，能在保证最不失真的情况下尽可能压缩图像文件的大小；图片质量高；色彩表现好；支持透明效果；提供锋利的线条和边缘，所以做出的 logo 等小图标效果会更好；更好地展示文字、颜色相近的图片。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：占内存大,会导致网页加载速度慢；对于需要高保真的较复杂的图像，PNG 虽然能无损压缩，但图片文件较大，不适合应用在 Web 页面上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>适用场景：主要用于小图标或颜色简单对比强烈的小的背景图。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>▍JPG&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点：占用内存小，网页加载速度快。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：JPG 格式图片是有损压缩的图片，有损压缩会使原始图片数据质量下降，即 JPG 会在压缩图片时降低品质。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>适用场景：由于这种格式图片对色彩表现比较好，所以适用于色彩丰富的图片。主要用于摄影作品或者大的背景图等。不合适文字比较多的图片。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>▍SVG&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点：SVG 是矢量图形，不受像素影响，在不同平台上都表现良好；可以通过 JS 控制实现动画效果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：DOM 比正常的图形慢，而且如果其结点多而杂，就更慢；不能与 HTML 内容集成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>适用场景：主要用于设计模型的展示等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>▍WebP&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点：WebP 格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器宽带资源和数据空间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：相较编码 JPEG 文件，编码同样质量的 WebP 文件需要占用更多的计算资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>适用场景：WebP 既支持有损压缩也支持无损压缩。将来可能是 JPEG 的代替品。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-写一个方法判断字符串是否为回文字符串">&lt;strong>Question:&lt;/strong> 写一个方法判断字符串是否为回文字符串&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://leetcode-cn.com/problems/valid-palindrome/" target="_blank" rel="noopener"
>Loading Question&amp;hellip; - 力扣（LeetCode）&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。
说明：本题中，我们将空字符串定义为有效的回文串。&lt;/p>
&lt;p>示例 1:&lt;/p>
&lt;p>输入: &amp;ldquo;A man, a plan, a canal: Panama&amp;rdquo;
输出: true
示例 2:&lt;/p>
&lt;p>输入: &amp;ldquo;race a car&amp;rdquo;
输出: false&lt;/p>
&lt;h4 id="solution">Solution&lt;/h4>
&lt;ul>
&lt;li>获取有效的字符串，我们利用正则去匹配字母和数字，因为忽略大小写，所以我们转成小写&lt;/li>
&lt;li>然后利用 &lt;code>split('')&lt;/code> 把字符串分割成数组，再用数组的 &lt;code>reverse()&lt;/code> 去反转，再用 &lt;code>join(‘’)&lt;/code> 去拼接&lt;/li>
&lt;li>最后进行比较&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @param {string} s
&lt;/span>&lt;span class="cm"> * @return {boolean}
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">isPalindrome&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[^a-zA-Z0-9]/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toLowerCase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">strReverse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">strReverse&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/haizlin/fe-interview/issues/107" target="_blank" rel="noopener"
>[css] 描述下你所了解的图片格式及使用场景 · haizlin/fe-interview&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　29</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-29/</link><pubDate>Fri, 15 Oct 2021 22:05:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-29/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-29/frontend-29-cover.jpg" alt="Featured image of post 毎日のフロントエンド　29" />&lt;h1 id="第二十九日">第二十九日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="quesion-了解什么是无障碍-webwai吗在开发过程中要怎么做呢">&lt;strong>#Quesion:&lt;/strong> 了解什么是无障碍 web（WAI）吗？在开发过程中要怎么做呢&lt;/h3>
&lt;p>无障碍 &lt;code>Web&lt;/code> == 有良好访问性的 &lt;code>Web&lt;/code>&lt;/p>
&lt;ol>
&lt;li>页面的内容结构&lt;/li>
&lt;/ol>
&lt;p>应该让标题、段落、列表等各司其职，让整个页面内容结构清晰，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">article&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">h2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">静夜思&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/h2&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">唐&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nx">李白&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/p&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="nx">床前明月光&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nx">疑是地上霜&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">br&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;span class="nx">举头望明月&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nx">低头思故乡&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">ul&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="nx">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">译文&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/a&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/li&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="nx">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">注释&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/a&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/li&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="nx">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">作者介绍&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/a&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/li&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/ul&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/article&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>好的语义，屏幕阅读器会：&lt;/p>
&lt;ul>
&lt;li>在你浏览内容时，读取每个标题，通知标题是什么，段落是什么等&lt;/li>
&lt;li>它会在每个元素之后停止，让你有个短暂的停歇&lt;/li>
&lt;li>你可以跳转到上一个/下一个标题&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>简写和缩写&lt;/li>
&lt;li>&lt;code>form&lt;/code> 表单&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">form&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">label&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">姓名&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/label&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">label&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">年龄&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/label&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">label&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gender&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">性别&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/label&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">select&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gender&amp;#34;&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gender&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">男&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/option&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">女&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/option&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/select&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/form&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>&amp;lt;label&amp;gt;&lt;/code> 标签可以让提示文本和输入框完美的对应起来，还可以扩大激活输入框的范围，方便用户选择和输入&lt;/p>
&lt;ol start="4">
&lt;li>键盘可访问性&lt;/li>
&lt;/ol>
&lt;p>键盘可访问包括按 tab 键能让页面中的元素获得焦点、按 Return/Enter 键能激活该元素、表单元素 &lt;code>&amp;lt;select&amp;gt;&lt;/code> 在获得焦点时按方向键可以上下切换选项。自带键盘可访问性的标签有&lt;code>&amp;lt;a&amp;gt;&lt;/code>、&lt;code>&amp;lt;button&amp;gt;&lt;/code>、&lt;code>&amp;lt;label&amp;gt;&lt;/code>以及表单元素&lt;/p>
&lt;ol start="5">
&lt;li>&lt;code>alt&lt;/code> 属性&lt;/li>
&lt;/ol>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="quesion-请描述-css-的权重计算规则">&lt;strong>#Quesion:&lt;/strong> 请描述 css 的权重计算规则&lt;/h3>
&lt;p>权重值计算&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>选择器&lt;/th>
&lt;th>例&lt;/th>
&lt;th>权重值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>!important&lt;/code>&lt;/td>
&lt;td>&lt;code>!important&lt;/code>&lt;/td>
&lt;td>&lt;code>Infinity&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>内联样式&lt;/td>
&lt;td>&lt;code>style=&amp;quot;..&amp;quot;&lt;/code>&lt;/td>
&lt;td>1000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ID&lt;/td>
&lt;td>&lt;code>#id&lt;/code>&lt;/td>
&lt;td>100&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>class&lt;/td>
&lt;td>&lt;code>.class&lt;/code>&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>属性&lt;/td>
&lt;td>&lt;code>[type='text']&lt;/code>&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>伪类&lt;/td>
&lt;td>&lt;code>:hover&lt;/code>&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>标签&lt;/td>
&lt;td>&lt;code>p&lt;/code>&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>伪元素&lt;/td>
&lt;td>&lt;code>::first-line&lt;/code>&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>相邻选择器、子代选择器、通配符&lt;/td>
&lt;td>&lt;code>\* &amp;gt; +&lt;/code>&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>1000&amp;gt;100。也就是说从左往右逐个等级比较，前一等级相等才往后比&lt;/li>
&lt;li>在权重相同的情况下，后面的样式会覆盖掉前面的样式&lt;/li>
&lt;li>继承属性没有权重&lt;/li>
&lt;li>通配符、子选择器、相邻选择器等的。虽然权值为 0，但是也比继承的样式优先&lt;/li>
&lt;li>ie6 以上才支持 important，并且尽量少用&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="quesion-写一个获取数组的最大值最小值的方法">&lt;strong>#Quesion:&lt;/strong> 写一个获取数组的最大值、最小值的方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Array&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">62&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">91&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">78&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">62&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// 91
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Array&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">27&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">78&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">62&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// 27
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// or
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">maxValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">minValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">//es6
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/anjia/blog/issues/44" target="_blank" rel="noopener"
>CSS 是怎样确定图像大小的？ · Issue #44 · anjia/blog&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　28</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-28/</link><pubDate>Thu, 14 Oct 2021 17:36:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-28/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-28/frontend-28-cover.jpg" alt="Featured image of post 毎日のフロントエンド　28" />&lt;h1 id="第二十八日">第二十八日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-说说你对meta标签的理解">&lt;strong>#Question:&lt;/strong> 说说你对&lt;code>&amp;lt;meta&amp;gt;&lt;/code>标签的理解&lt;/h3>
&lt;p>&lt;code>meta&lt;/code>标签 **元数据(Metadata)**是&lt;code>HTML&lt;/code>语言&lt;code>&amp;lt;head&amp;gt;&lt;/code>区的一个辅助性标签，它位于 HTML 文档头部的&lt;code>head&lt;/code>和&lt;code>title&lt;/code>之间，它提供用户不可见的信息。&lt;/p>
&lt;p>元数据可以被使用浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 Web 服务调用&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>值&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>charset (HTML5)&lt;/code>&lt;/td>
&lt;td>&lt;code>character_set&lt;/code>&lt;/td>
&lt;td>定义文档的字符编码。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>content&lt;/code>&lt;/td>
&lt;td>&lt;code>text&lt;/code>&lt;/td>
&lt;td>定义与 &lt;code>http-equiv&lt;/code> 或 &lt;code>name&lt;/code> 性相关的元信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>http-equiv&lt;/code>&lt;/td>
&lt;td>&lt;code>content-type、default-style、refresh&lt;/code>&lt;/td>
&lt;td>把 &lt;code>content&lt;/code> 属性关联到 HTTP 头部。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>application-name、author、description、generator、keywords&lt;/code>&lt;/td>
&lt;td>把&lt;code> content&lt;/code> 属性关联到一个名称&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>scheme &lt;/code>&lt;/td>
&lt;td>&lt;code>format/URI &lt;/code>&lt;/td>
&lt;td>HTML5 不支持。 定义用于翻译 content 属性值的格式。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-rgba-和-opacity-这两个的透明效果有什么区别呢">&lt;strong>#Question:&lt;/strong> &lt;code>rgba()&lt;/code> 和 &lt;code>opacity&lt;/code> 这两个的透明效果有什么区别呢&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>rgba&lt;/code> 只对颜色有影响。如果放在 &lt;code>background&lt;/code> 上的话，只对背景颜色有影响。不会影响元素中的其他内容以及子元素内容&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>opacity&lt;/code> 的透明效果是作用整个元素以及其子元素上的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-解释下列段代码的意思">&lt;strong>#Question:&lt;/strong> 解释下列段代码的意思&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// $$(&amp;#39;*&amp;#39;) 为获取所有 dom 元素，返回数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">[].&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// forEach 的回调函数，这里的 a 是数组中每个 dom 元素，不是 a 标签
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">outline&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="c1">// ～～是取整 1&amp;lt;&amp;lt;24 是位运算 结果为 16777216
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 之后的 toString(16) 为进行 16 进制的转换 即颜色
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s1">&amp;#39;1px solid #&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">~~&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">))).&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="作用">作用&lt;/h4>
&lt;blockquote>
&lt;p>在你的 Chrome 浏览器的控制台中输入这段代码，你会发现不同 &lt;code>HTML&lt;/code> 层都被使用不同的颜色添加了一个高亮的边框。简单来说，这段代码只是首先获取了所有的页面元素，然后使用一个不同的颜色为它们添加了一个 &lt;code>1px&lt;/code> 的边框。&lt;/p>
&lt;/blockquote>
&lt;h4 id="解析">解析&lt;/h4>
&lt;ul>
&lt;li>&lt;code>[].forEach.call()&lt;/code> =&amp;gt; 调用引用数组的 forEach 方法&lt;/li>
&lt;li>&lt;code>$$('*')&lt;/code> =&amp;gt; &lt;code>document.querySelectorAll('*')&lt;/code>&lt;/li>
&lt;li>&lt;code>~~a&lt;/code> =&amp;gt; &lt;code>parseInt(a)&lt;/code>&lt;/li>
&lt;li>&lt;code>1&amp;lt;&amp;lt;24&lt;/code> =&amp;gt; 对二进数 1 小数点右移 24 位&lt;/li>
&lt;li>&lt;code>(parseInt(Math.random()\*(1&amp;lt;&amp;lt;24)).toString(16))&lt;/code> =&amp;gt; 获得了一个位于 0-16777216 之间的随机整数，也就是随机颜色，再使用 &lt;code>toString(16)&lt;/code>将它转化为十六进制数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="p">[].&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelectorAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">outline&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="s1">&amp;#39;1px solid #&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://segmentfault.com/a/1190000004279791" target="_blank" rel="noopener"
>HTML meta 标签总结与属性使用介绍 - SegmentFault 思否&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta" target="_blank" rel="noopener"
>&lt;!-- raw HTML omitted -->：文档级元数据元素 - HTML（超文本标记语言） | MDN&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://my.oschina.net/l3ve/blog/330358" target="_blank" rel="noopener"
>从一行代码里面学点 JavaScript - L3ve 的绝对领域 - OSCHINA - 中文开源技术交流社区&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://dailc.github.io/2018/03/12/whenyouenteraurl.html" target="_blank" rel="noopener"
>从输入 URL 到页面加载的过程？如何由一道题完善自己的前端知识体系！ | Dailc 的个人主页&lt;/a>&lt;/p></description></item><item><title>fetch and Axios</title><link>https://youkoucoding.github.io/p/fetch-and-axios/</link><pubDate>Thu, 14 Oct 2021 15:41:59 +0900</pubDate><guid>https://youkoucoding.github.io/p/fetch-and-axios/</guid><description>&lt;img src="https://youkoucoding.github.io/p/fetch-and-axios/fetch-axios-cover.jpg" alt="Featured image of post fetch and Axios" />&lt;h1 id="which-should-be-used-axios-or-fetch">Which should be used? Axios or fetch()&lt;/h1>
&lt;h2 id="difference-between-fetch-and-axios-for-making-http-requests">Difference between Fetch and Axios for making http requests&lt;/h2>
&lt;h3 id="general">General&lt;/h3>
&lt;p>One the fundamental tasks of any web application is to communicate with servers through the http protocol. This can be easily achieved using Fetch or Axios.&lt;/p>
&lt;ul>
&lt;li>&lt;code>fetch()&lt;/code> The Fetch API provides a &lt;code>fetch()&lt;/code> method defined on the window object. It also provides a JavaScript interface for accessing and manipulating parts of the Http pipeline(requests and responses). The fetch method has &lt;strong>one mandatory argument&lt;/strong> - URL of the resource to be fetched. The method retuirns a &lt;strong>Promise&lt;/strong> that can be used to retrieve the response of the request.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// fetch
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;api&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Code for handling the response
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Code for handling the error
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Axios&lt;/code>: Axios is JavaScript library used to make HTTP requests from &lt;strong>nodejs or XMLHttpRequests&lt;/strong> from the browser and it supports the Promise API that is native to JS ES6. It can be used intercept HTTP requests and respones and enables client-side protection against XSRF. It also has the ability to cancel requests.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Axios
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">axios&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;url&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Code for handling the response
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Code for handling the error
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Axios&lt;/th>
&lt;th>Fetch&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Axios has url in request object.&lt;/td>
&lt;td>Fetch has no url in request object.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios is a stand-alone third party package that can be easily installed.&lt;/td>
&lt;td>Fetch is built into most modern browsers; no installation is required as such.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios enjoys built-in XSRF protection.&lt;/td>
&lt;td>Fetch does not.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios uses the data property.&lt;/td>
&lt;td>Fetch uses the body property.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios’ data contains the object.&lt;/td>
&lt;td>Fetch’s body has to be stringified.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios request is ok when status is 200 and statusText is ‘OK’.&lt;/td>
&lt;td>Fetch request is ok when response object contains the ok property.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios performs &lt;strong>automatic transforms of JSON data.&lt;/strong>&lt;/td>
&lt;td>Fetch is a two-step process when handling JSON data- first, to make the actual request; second, to call the .json() method on the response.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios allows cancelling request and request timeout.&lt;/td>
&lt;td>Fetch does not.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios has the ability to intercept HTTP requests.&lt;/td>
&lt;td>Fetch, by default, doesn’t provide a way to intercept requests.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios has built-in support for download progress.&lt;/td>
&lt;td>Fetch does not support upload progress.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Axios has wide browser support.&lt;/td>
&lt;td>Fetch only supports Chrome 42+, Firefox 39+, Edge 14+, and Safari 10.1+ (This is known as Backward Compatibility).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="details">Details&lt;/h3>
&lt;h4 id="1-syntax-differences">1. Syntax Differences&lt;/h4>
&lt;p>Both Axios and Fetch API returns Promises when you make an HTTP request.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// POST in axios
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;http://localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Accept&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;application/json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;application/json;charset=UTF-8&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;David&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">axios&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With Axios, we can create a config object using specified parameters like baseUrl, params, headers, auth, responseType to send with the request. It will return a Promise that resolves with either a response object or an error object. Besides, the following can be found in the returned object from the Promise.&lt;/p>
&lt;ul>
&lt;li>&lt;code>data&lt;/code>:- the actual response body&lt;/li>
&lt;li>&lt;code>status&lt;/code>:- HTTP status of the call, like 200 or 404&lt;/li>
&lt;li>&lt;code>statusText&lt;/code>:- HTTP status returned as a text message&lt;/li>
&lt;li>&lt;code>headers&lt;/code>:- the server sends headers back&lt;/li>
&lt;li>&lt;code>config&lt;/code>:- request configuration&lt;/li>
&lt;li>&lt;code>request&lt;/code>:- XMLHttpRequest object&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// POST in fetch()
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;http://localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Accept&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;application/json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;application/json;charset=UTF-8&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;David&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}),&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// The url (path to the resource you want to fetch) argument is mandatory
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similar to Axios, it returns a Promise that the response object can resolve. We can optionally pass options in the second argument in the &lt;code>fetch()&lt;/code> method.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Key Differences:&lt;/strong>
&lt;ul>
&lt;li>With Axios, the &lt;code>data&lt;/code> is sent through the data property of the options, but Fetch API uses the &lt;code>body&lt;/code> property.&lt;/li>
&lt;li>Fetch response requires additional validation as it always returns a response object no matter whether it is successful or not.&lt;/li>
&lt;li>The data in fetch() has been serialized to a String (Stringified).&lt;/li>
&lt;li>The URL is provided to fetch() as an argument. But, in Axios, it is set in the options object.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="2-json-data-conversion">2. JSON Data Conversion&lt;/h4>
&lt;p>With &lt;strong>Fetch API&lt;/strong>, handling JSON data is a 2 step process. First, you must make the request and then call the &lt;code>.json()&lt;/code> function on the response since Fetch API sends data with the body property.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;localhost:3000/api&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// first step
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// second step
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With &lt;strong>Axios&lt;/strong>, the data is sent through the data property of the options, and it automatically stringifies the data in the response.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">axios&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-error-handling">3. Error Handling&lt;/h4>
&lt;p>Error handling with &lt;strong>Axios&lt;/strong> is easy because bad responses (such as 404 or 500) will end up causing the Promise to be rejected by throwing an exception. Therefore, to handle 404 or 400 errors with Axios, you need to use the catch() block as shown below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">axios&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;response&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// The request was made and the server responded with a status code that falls out of the range of 200
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Something like 4xx or 500
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// The request was made but no response was received
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Something happened in setting up the request that triggered an Error
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When using fetch(), you need to read the response object since bad responses are still resolved using the then() method. A Fetch API Promise will be &lt;strong>rejected only if the request cannot be completed in a scenario like a network failure&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">statusText&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-simultaneous-requests">4. Simultaneous Requests&lt;/h4>
&lt;p>Both &lt;strong>Axios&lt;/strong> and Fetch API can handle multiple requests in parallel. Axios uses the &lt;code>axios.all()&lt;/code> method that allows passing an array of requests. Then assign the properties of the response array to distinct variables using &lt;code>axios.spread()&lt;/code> as shown here.&lt;/p>
&lt;p>With &lt;strong>Fetch API&lt;/strong>, you can use the built-in &lt;code>Promise.all()&lt;/code> method to accomplish the same by passing all fetch requests to &lt;code>Promise.all()&lt;/code> as an array. Next, you can use an async function to handle the response as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// axios
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">axios&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:3000/api/page&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spread&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Both requests are now complete
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">login&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">login&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">// fetch
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:3000/api/page&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="nx">res1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res2&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">res1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">res2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">login&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">login&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="5-response-timeout">5. Response timeout&lt;/h4>
&lt;p>If you make a request without defining a timeout it will cause the request to hang and slow down the application. So, we need to set a response timeout for HTTP requests.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">axios&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;post&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">timeout&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 3 seconds timeout
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;David&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/* handle the response */&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;timeout exceeded&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Axios sets the timeout to 0 by default. So, always remember to specify a timeout for each request. You may also use a request interceptor to set the request timeout automatically.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// fetch
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">controller&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">AbortController&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">signal&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">signal&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;David&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}),&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">promise&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://localhost:3000/api/home&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">timeoutId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">abort&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">promise&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/* handle the response */&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;timeout exceeded&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the above example, you can see that &lt;code>fetch()&lt;/code> response timeout functionality through &lt;code>AbortController&lt;/code> interface. In addition, the read-only signal property of &lt;code>AbortController&lt;/code> allows you to interact with or abort a request.&lt;/p>
&lt;p>If the server doesn&amp;rsquo;t respond within the specified time(3 seconds), &lt;code>controller.abort()&lt;/code> is invoked, and the request is aborted.&lt;/p>
&lt;h4 id="6-intercepting-requests-and-responses">6. Intercepting Requests and Responses&lt;/h4>
&lt;blockquote>
&lt;p>Fetch API doesn’t offer a way to intercept requests by default.&lt;/p>
&lt;/blockquote>
&lt;h4 id="7-request-uploaddownload-progress">7. Request Upload/Download Progress&lt;/h4>
&lt;p>If your HTTP request takes a significant time to complete, using a progress indicator will surely help to improve the user experience.
If you use Axios, you can easily use the &lt;strong>Axios Progress Bar module&lt;/strong> to implement a nice progress indicator.&lt;/p>
&lt;blockquote>
&lt;p>But Fetch API doesn’t have in-built support for progress bars.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This comparison demonstrates that Axios keeps the code minimal for applications that require efficient error handling or HTTP interceptions. it supports almost all modern browsers and NodeJS environments.&lt;/p>
&lt;p>On the other hand, Fetch API isn’t far off either as a native method supported by all the major browsers (it doesn’t support IE).&lt;/p>
&lt;p>However, we can not stick to a single aspect in choosing the best option. Instead, you need to evaluate all these features and decide what’s best for your project based on its requirements.&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://blog.logrocket.com/axios-or-fetch-api/" target="_blank" rel="noopener"
>Axios or fetch(): Which should you use? - LogRocket Blog&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.bitsrc.io/performing-http-requests-fetch-vs-axios-b62b44fed10d" target="_blank" rel="noopener"
>Performing HTTP Requests: Fetch Vs Axios | by Piumi Liyana Gunawardhana&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　27</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/</link><pubDate>Wed, 13 Oct 2021 11:09:57 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/frontend-27-cover.jpg" alt="Featured image of post 毎日のフロントエンド　27" />&lt;h1 id="第二十七日">第二十七日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-说说对影子shadowdom-的了解">&lt;strong>#Question:&lt;/strong> 说说对影子&lt;code>(Shadow)DOM&lt;/code> 的了解&lt;/h3>
&lt;p>&lt;strong>Shadow DOM&lt;/strong>: A set of JavaScript APIs for attaching an encapsulated &amp;ldquo;shadow&amp;rdquo; DOM tree to an element &amp;mdash; which is rendered separately from the main document DOM &amp;mdash; and controlling associated functionality.In this way, you can keep an element&amp;rsquo;s features private, so they can be scripted and styled without the fear of collision with other parts of the document.&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/shadowdom.svg" >
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/shadowdom.svg"
loading="lazy"
alt="shadowdom">
&lt;/a>
&lt;figcaption>shadowdom&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>There are some bits of shadow DOM terminology to be aware of:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Shadow host&lt;/strong>: The regular DOM node that the shadow DOM is attached to.&lt;/li>
&lt;li>&lt;strong>Shadow tree&lt;/strong>: The DOM tree inside the shadow DOM&lt;/li>
&lt;li>&lt;strong>Shadow boundary&lt;/strong>: The place where the shadow DOM ends, and the regular DOM begins&lt;/li>
&lt;li>&lt;strong>Shadow root&lt;/strong>: the root node of shadow tree&lt;/li>
&lt;/ul>
&lt;p>&lt;code>shadow Dom&lt;/code>是&lt;code>html&lt;/code>给出的一个用来封装的虚拟 DOM 与普通的 DOM 不相同，他更像伪类元素，去修饰 DOM，或者说，他是一个 DOM 的 HTML 组件，常见标签为 video 等媒体标签（这些已经封装好的标签，有对应样式）&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-怎样修改-chrome-记住密码后自动填充表单的黄色背景">&lt;strong>#Question:&lt;/strong> 怎样修改 chrome 记住密码后自动填充表单的黄色背景&lt;/h3>
&lt;p>当记住用户名和密码后，下次填写表单时，被记住的部分会被填充为淡黄色&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">input&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">&amp;amp;:&lt;/span>&lt;span class="kp">-webkit-&lt;/span>&lt;span class="err">autofill&lt;/span> &lt;span class="err">{&lt;/span>
&lt;span class="k">box-shadow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="nb">rgba&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kc">inset&lt;/span> &lt;span class="cp">!important&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="n">text-fill-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#000&lt;/span> &lt;span class="cp">!important&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">transition&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">background-color&lt;/span> &lt;span class="mi">5000&lt;/span>&lt;span class="kt">s&lt;/span> &lt;span class="kc">ease-in-out&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="kt">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="err">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-说说对arguments的理解它是数组吗">&lt;strong>#Question:&lt;/strong> 说说对&lt;code>arguments&lt;/code>的理解，它是数组吗&lt;/h3>
&lt;h4 id="the-arguments-object">THE arguments object&lt;/h4>
&lt;p>&lt;code>arguments&lt;/code> is an &lt;code>Array&lt;/code>-like object accessible inside &lt;code>functions&lt;/code> that contains the values of the arguments passed to that function.&lt;/p>
&lt;blockquote>
&lt;p>ES6 compatible code, the &lt;code>rest parameters&lt;/code> should be preferred.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;Array-like&amp;rdquo; means that &lt;code>arguments&lt;/code> has a &lt;code>length&lt;/code> property and properties indexed from zero, but it doesn&amp;rsquo;t have &lt;code>Array&lt;/code>&amp;rsquo;s built-in methods like &lt;code>forEach()&lt;/code> or &lt;code>map()&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>arguments&lt;/code>是一个对象。&lt;/p>
&lt;p>&lt;code>js&lt;/code>不能像&lt;code>Java&lt;/code>一样实现重载，&lt;code>arguments&lt;/code> 对象可以模拟重载。&lt;/p>
&lt;p>&lt;code>js&lt;/code>中每个函数都会有&lt;code>arguments&lt;/code>这个实例，它引用着函数的实参，可以用数组下标的方式&amp;quot;&lt;code>[]&lt;/code>&amp;ldquo;引用&lt;code>arguments&lt;/code>的元素。&lt;code>arguments.length&lt;/code>为函数实参个数，&lt;code>arguments.callee&lt;/code>引用函数自身。&lt;/p>
&lt;p>Feature：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>arguments&lt;/code>对象和&lt;code>Function&lt;/code>是分不开的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因为&lt;code>arguments&lt;/code>这个对象不能显式创建。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>arguments&lt;/code>对象只有函数开始时才可用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Usage：&lt;/p>
&lt;p>虽然&lt;code>arguments&lt;/code>对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同: &lt;code>arguments[0], arguments[1]...&lt;/code>&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://polymer-library.polymer-project.org/2.0/docs/devguide/shadow-dom" target="_blank" rel="noopener"
>Shadow DOM concepts - Polymer Project&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank" rel="noopener"
>Web Components | MDN&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noopener"
>The arguments object - JavaScript | MDN&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　26</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/</link><pubDate>Tue, 12 Oct 2021 17:18:24 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/frontend-26-cover.jpg" alt="Featured image of post 毎日のフロントエンド　26" />&lt;h1 id="第二十六日">第二十六日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-解释下你对-gbk-和-utf-8-的理解并说说页面上产生乱码的可能原因">&lt;strong>#Question:&lt;/strong> 解释下你对 GBK 和 UTF-8 的理解？并说说页面上产生乱码的可能原因&lt;/h3>
&lt;p>GBK 与 UTF-8 之区别&lt;/p>
&lt;ul>
&lt;li>GBK 编码：是指中国的中文字符，其它它包含了简体中文与繁体中文字符&lt;/li>
&lt;li>UTF-8 编码：它是一种全国家通过的一种编码，如果你的网站涉及到多个国家的语言&lt;/li>
&lt;/ul>
&lt;p>&lt;code>&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;&lt;/code>&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-说说对-z-index-的理解">&lt;strong>#Question:&lt;/strong> 说说对 z-index 的理解&lt;/h3>
&lt;p>帧元素（&lt;code>frameset&lt;/code>) 优先级最高 &amp;raquo;&amp;gt; 表单元素 &amp;gt; 非表单元素，即 &lt;code>input type=&amp;quot;radio&amp;quot;&lt;/code> 之类的表单控件 &amp;gt; 普通的如 &lt;code>a&lt;/code>,&lt;code>div&lt;/code> 等元素。&lt;/p>
&lt;p>从有窗口和无窗口元素来分，有窗口元素 &amp;gt; 无窗口元素。有窗口元素如 Select 元素、Object 元素。&lt;/p>
&lt;p>&lt;code>z-index&lt;/code> 属性也可以改变显示优先级，但只对同种类型的元素才有效。&lt;/p>
&lt;h4 id="z-index">z-index&lt;/h4>
&lt;p>&lt;code>z&lt;/code> 表示三维坐标的 Z 轴。&lt;/p>
&lt;p>&lt;code>CSS&lt;/code>允许我们对&lt;code>z-index&lt;/code>属性设置三种值(&lt;strong>绝对定位方案将一个元素从常规流中移除的情况下&lt;/strong>)&lt;/p>
&lt;ol>
&lt;li>auto (自动，默认值)&lt;/li>
&lt;li>整数: 数值越大，元素也就越靠近观察者。 数值越小，元素看起来也就越远
&lt;ul>
&lt;li>如果有两个元素放在了一起，占据了二维平面上一块共同的区域，那么有着较大 &lt;code>z-index&lt;/code> 值的元素就会掩盖或者阻隔有着较低 &lt;code>z-index&lt;/code> 值的元素在共同区域的那一部分&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>inherit&lt;/li>
&lt;/ol>
&lt;h4 id="problem">Problem&lt;/h4>
&lt;ul>
&lt;li>当一个设置了 &lt;code>z-index&lt;/code> 值的定位元素与常规文档流中的元素相互重叠的时候，谁会被置于上方？&lt;/li>
&lt;li>当定位元素与浮动元素相互重叠的时候，谁会被置于上方？&lt;/li>
&lt;li>当定位元素被嵌套在其他定位元素中时会发生什么？&lt;/li>
&lt;/ul>
&lt;h4 id="explanation">Explanation&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 166;
flex-basis: 400px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/z-index.png" data-size="600x360">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/z-index.png"
width="600"
height="360"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/z-index_hu954daca1308c380e9687beae41fcf26b_6493_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/z-index_hu954daca1308c380e9687beae41fcf26b_6493_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="层叠上下文中的七种层叠等级">
&lt;/a>
&lt;figcaption>层叠上下文中的七种层叠等级&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>在一个层叠上下文中一共可以有 7 种层叠等级，列举如下：&lt;/p>
&lt;ol>
&lt;li>背景和边框 —— 形成层叠上下文的元素的背景和边框。 层叠上下文中的最低等级&lt;/li>
&lt;li>负 &lt;code>z-index&lt;/code> 值 —— 层叠上下文内有着负 &lt;code>z-index&lt;/code> 值的子元素&lt;/li>
&lt;li>块级盒 —— 文档流中非行内非定位子元素&lt;/li>
&lt;li>浮动盒 —— 非定位浮动元素&lt;/li>
&lt;li>行内盒 —— 文档流中行内级别非定位子元素&lt;/li>
&lt;li>&lt;code>z-index: 0&lt;/code> —— 定位元素。 这些元素形成了新的层叠上下文&lt;/li>
&lt;li>正 &lt;code>z-index&lt;/code> 值 —— 定位元素。 层叠上下文中的最高等级&lt;/li>
&lt;/ol>
&lt;p>这七个层叠等级构成了层叠次序的规则。 在层叠等级七上的元素会比在等级一至六上的元素显示地更上方（更靠近观察者）&lt;/p>
&lt;p>&lt;strong>事实上，大多数的一切都比 z-index 为 0 的层叠等级低&lt;/strong>&lt;/p>
&lt;h4 id="summary">Summary&lt;/h4>
&lt;p>当将除了&lt;code>auto&lt;/code>以外的&lt;code>z-index&lt;/code>值赋给一个元素，你就创建了一个&lt;strong>新的层叠上下文，它独立于其他的层叠上下文&lt;/strong>&lt;/p>
&lt;p>层叠上下文、层叠层和确定哪个元素在上哪个元素在下的层叠次序规则。&lt;/p>
&lt;p>定位元素(&lt;strong>绝对定位方案将一个元素从常规流中移除的情况下&lt;/strong>)还会产生新的层叠上下文，而这整一个层叠层会显示在另一个层叠上下文中的所有层叠层的上面或者下面&lt;/p>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-说说-bindcallapply-的区别并手写实现一个-bind-的方法">&lt;strong>#Question:&lt;/strong> 说说 bind、call、apply 的区别？并手写实现一个 bind 的方法&lt;/h3>
&lt;p>Basic rules worth remembering:&lt;/p>
&lt;ul>
&lt;li>&lt;code>this&lt;/code> always refers to an object.&lt;/li>
&lt;li>&lt;code>this&lt;/code> refers to an object which calls the function it contains.&lt;/li>
&lt;li>In the global context &lt;code>this&lt;/code> refers to either window object or is undefined if the &lt;code>strict mode&lt;/code> is used.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>call&lt;/code> 和 &lt;code>apply&lt;/code> 都是为了解决改变 &lt;code>this&lt;/code> 的指向, 同时执行函数。作用都是相同的，只是传参的方式不同。&lt;/p>
&lt;p>除了第一个参数外，call 可以接收一个参数列表，apply 只接受一个参数数组。
&lt;code>bind&lt;/code>绑定完之后返回一个新的函数，不执行。&lt;/p>
&lt;p>js 函数是一个 &lt;code>Function&lt;/code> 的对象，因此存在&lt;code>Function&lt;/code>的构造函数, 和原型对象:&lt;/p>
&lt;h4 id="custom-call">custom call&lt;/h4>
&lt;p>The basic principle of a call function:&lt;/p>
&lt;ol>
&lt;li>Calling the prototype function call changes the pointing of this.&lt;/li>
&lt;li>Whatever arguments we have passed to &lt;code>func.call&lt;/code> should be passed to orginal &lt;code>func&lt;/code> as &lt;code>arg1, arg2, ...&lt;/code>&lt;/li>
&lt;li>Does not cause side effect to &lt;code>obj&lt;/code>(original object) and &lt;code>func&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Our custom newCall will be also be attached to the Function prototype
&lt;/span>&lt;span class="c1">// null or undefined should be replaced with the global object(or window)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">Function&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">newCall&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// this &amp;#34;this&amp;#34; is the function we want to use (on the chain of Function.prototype)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// got the func&amp;#39;s arguments by delete the first argument, context(the context we want to refer), it is a array right now
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// This &amp;#39;context&amp;#39; is the obj our want to refer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 执行完后,删除 should delete this property after execution
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 返回函数执行后的结果
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="custom-apply">custom apply&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nb">Function&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">newApply&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">result&lt;/span>
&lt;span class="c1">// 判断 arguments[1] 是不是 undefined
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="custom-bind">custom bind&lt;/h4>
&lt;p>The bind method creates and returns a &lt;code>new function&lt;/code>, called a bound function. This bound function wraps the original function object.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nb">Function&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">newBind&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;function&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">TypeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Error&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="mi">_&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 返回一个函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">F&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 因为返回了一个函数，我们可以 new F()，所以需要判断
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">F&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="mi">_&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">_&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://webdesign.tutsplus.com/zh-hans/articles/what-you-may-not-know-about-the-z-index-property--webdesign-16892" target="_blank" rel="noopener"
>关于 z-index 那些你不知道的事&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/@ankur_anand/implement-your-own-call-apply-and-bind-method-in-javascript-42cc85dba1b" target="_blank" rel="noopener"
>Implement your own — call(), apply() and bind() method in JavaScript | by Ankur Anand | Medium&lt;/a>&lt;/p>
&lt;p>:point_up: &lt;a class="link" href="https://medium.com/@vinodron/for-everyone-reading-this-article-authors-code-is-bad-in-terms-of-readability-and-performance-9fb74faa26d9" target="_blank" rel="noopener"
>For everyone reading this article — authors code is bad in terms of readability and performance. | by Андрей Виноградов | Medium&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　25</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/</link><pubDate>Mon, 11 Oct 2021 16:07:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/frontend-25-cover.jpg" alt="Featured image of post 毎日のフロントエンド　25" />&lt;h1 id="第二十五日">第二十五日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-请说说scriptscript-async和script-defer的区别">&lt;strong>#Question:&lt;/strong> 请说说&lt;code>&amp;lt;script&amp;gt;&lt;/code>、&lt;code>&amp;lt;script async&amp;gt;&lt;/code>和&lt;code>&amp;lt;script defer&amp;gt;&lt;/code>的区别&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 236px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/script-explanation.png" data-size="801x814">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/script-explanation.png"
width="801"
height="814"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/script-explanation_hu2c488d3cb9c590adb6551005aa71eb5c_53713_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/script-explanation_hu2c488d3cb9c590adb6551005aa71eb5c_53713_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="script deference">
&lt;/a>
&lt;figcaption>script deference&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;script&amp;gt;&lt;/code> : 加载的时候是同步的会阻塞后面代码的执行，加载立即执行&lt;/li>
&lt;li>&lt;code>&amp;lt;script async&amp;gt;&lt;/code>: 异步加载，加载和执行是并行的&lt;/li>
&lt;li>&lt;code>&amp;lt;script defer&amp;gt;&lt;/code>: 异步加载，需等到所有文档加载完才执行&lt;/li>
&lt;li>&lt;code>async&lt;/code> &lt;code>defer&lt;/code>这两个属性无法应用于内联&lt;code>script&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The modern websites, scripts are often &amp;ldquo;heavier&amp;rdquo; than HTML: their download size is larger, anb processing time is also longer.&lt;/p>
&lt;ul>
&lt;li>Scripts with &lt;code>defer&lt;/code> never block the page&lt;/li>
&lt;li>Scripts with &lt;code>defer&lt;/code> always execute when the DOM is ready(but before &lt;code>DOMContentLoaded&lt;/code> event).&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>async&lt;/code> attribute means that a script is completely independent:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The browser doesn&amp;rsquo;t block on &lt;code>async&lt;/code> script like &lt;code>defer&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Other scripts don&amp;rsquo;t wait for &lt;code>async&lt;/code> scripts, and &lt;code>async&lt;/code> scripts don&amp;rsquo;t wait for them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>DOMContentLoaded&lt;/code> and async scripts don&amp;rsquo;t wait for each other:&lt;/p>
&lt;ul>
&lt;li>&lt;code>DOMContentLoaded&lt;/code> may happen both before an async script (if an async script finishes loading after the page is complete)&lt;/li>
&lt;li>&amp;hellip; or after an async script(if an async script is short or was in HTTP-cache)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In other words, &lt;code>async&lt;/code> scripts load in the background and run when ready. The DOM and other scripts don&amp;rsquo;t wait for them, and they don&amp;rsquo;t wait for anything. A fully independent script that runs when loaded.&lt;/p>
&lt;h4 id="summary">Summary&lt;/h4>
&lt;p>Both &lt;code>async&lt;/code> and &lt;code>defer&lt;/code> have one commmon thing: &lt;strong>donwloading of such scripts don&amp;rsquo;t block page rendering.&lt;/strong>&lt;/p>
&lt;p>So the user can read page content and get acquainted with the page immediately.&lt;/p>
&lt;p>In practice:&lt;/p>
&lt;ul>
&lt;li>&lt;code>defer&lt;/code> is used for scripts that need the whole DOM and/or their relative execution order is important.&lt;/li>
&lt;li>&lt;code>Async&lt;/code> is used for independent scripts, like &lt;strong>counters or ads.&lt;/strong> And their relative execution order does not matter.&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-在页面中的应该使用奇数还是偶数的字体为什么呢">&lt;strong>#Question:&lt;/strong> 在页面中的应该使用奇数还是偶数的字体？为什么呢？&lt;/h3>
&lt;ol>
&lt;li>尽量使用偶数字号&lt;/li>
&lt;li>偶数字号容易和页面其他标签的其他属性形成比例关系&lt;/li>
&lt;/ol>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-写一个判断设备来源的方法">&lt;strong>#Question:&lt;/strong> 写一个判断设备来源的方法&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/matthewhudson/current-device" target="_blank" rel="noopener"
>current-device: The easiest way to write conditional CSS and/or JavaScript based on device operating system&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>navigator.userAgent&lt;/code>&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://javascript.info/script-async-defer" target="_blank" rel="noopener"
>Scripts: async, defer&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　24</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/</link><pubDate>Sat, 09 Oct 2021 23:29:09 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/frontend-24-cover.jpg" alt="Featured image of post 毎日のフロントエンド　24" />&lt;h1 id="第二十四日">第二十四日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-说说你对属性-data-的理解">&lt;strong>#Question:&lt;/strong> 说说你对属性 data-的理解&lt;/h3>
&lt;p>&lt;code>data-*&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 是&lt;code>HTML5&lt;/code>新增的自定义属性，可以用来页面间跳转时携带数据&lt;/p>
&lt;p>&lt;code>data-*&lt;/code> 便是 &lt;code>HTML5&lt;/code> 中用来存放数据的标签。使用 &lt;code>data-*&lt;/code> 时，&lt;code>data-&lt;/code> 之后的单词&lt;strong>必须是小写的&lt;/strong>，但是可以用多个 - 连接。而在对应的 &lt;code>DOM&lt;/code> 方法中，我们可以通过 &lt;code>element.dataset[属性名]&lt;/code> 进行访问。在这里的属性名可以使用驼峰（转换规则和 &lt;code>vue&lt;/code> 的组件名称转换一样）。&lt;/p>
&lt;p>相比之前的自定义属性存放数据，使用 &lt;code>data-*&lt;/code> 的方法，在数据的获取上会比较方便&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-有用过-css-预处理器吗喜欢用哪个原理是什么">&lt;strong>#Question:&lt;/strong> 有用过 &lt;em>CSS 预处理器&lt;/em>吗？喜欢用哪个？原理是什么？&lt;/h3>
&lt;p>&lt;code>CSS&lt;/code>预处理器 可使&lt;code>CSS&lt;/code>具备更加简洁、适应性更强、可读性更强、层级关系更加明显、更易于代码的维护等诸多好处。
CSS 预处理器种类繁多，目前&lt;code>Sass&lt;/code>、&lt;code>Less&lt;/code>、用的比较多:&lt;/p>
&lt;ol>
&lt;li>嵌套：反映层级和约束&lt;/li>
&lt;li>变量和计算： 减少重复代码&lt;/li>
&lt;li>&lt;code>Extend&lt;/code> 和 &lt;code>Mixin&lt;/code> 代码片段 (用的少)&lt;/li>
&lt;li>循环：适用于复杂有规律的样式&lt;/li>
&lt;li>&lt;code>import css&lt;/code> 文件模块化&lt;/li>
&lt;/ol>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-如何快速让一个数组乱序写出来">&lt;strong>#Question:&lt;/strong> 如何快速让一个数组乱序，写出来&lt;/h3>
&lt;blockquote>
&lt;p>使用&lt;code>array.sort()&lt;/code>进行乱序存在一定问题，增大样本进行实验之后可以发现这种乱序方案并不是完全随机的（所有元素会大概率停留在自己的初始位置）（v8 处理排序是小于 10 个是插入排序，大于 10 个是快排，排序算法复杂度介于 O(n)与 O(n2)之间，也就是存在两个元素都没有比较的机会，因此不是完全随机），这里可以使用&lt;strong>Fisher–Yates shuffle&lt;/strong>（洗牌算法）&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">let&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// or
&lt;/span>&lt;span class="c1">// return a new Array
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">swap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index2&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index1&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">shuffle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nb">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(;&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">randomIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nx">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">randomIndex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>补充知识： js &lt;code>AST&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Howto/Use_data_attributes" target="_blank" rel="noopener"
>使用数据属性 | MDN&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://segmentfault.com/a/1190000016231512" target="_blank" rel="noopener"
> AST 抽象语法树——最基础的 javascript 重点知识 &lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Currying in JavaScript (カリー化 &amp; 柯里化)</title><link>https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/</link><pubDate>Sat, 09 Oct 2021 15:24:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/</guid><description>&lt;img src="https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/currying-cover.png" alt="Featured image of post Currying in JavaScript (カリー化 &amp; 柯里化)" />&lt;h1 id="currying-in-javasctipt">Currying in JavaSctipt&lt;/h1>
&lt;p>Functional programming is a style of programming that attempts to pass functions as arguments(callbacks) and return functions without side-effects(changes to the program&amp;rsquo;s state).&lt;/p>
&lt;p>So many languages adopted this programming style. &lt;code>Javascript&lt;/code>, &lt;code>Haskell&lt;/code>, &lt;code>Erlang&lt;/code>, &lt;code>Clojure&lt;/code>, and &lt;code>Scala&lt;/code> are the most popular among them.&lt;/p>
&lt;p>And with its ability to pass the return functions, it brought so many conscepts: &lt;strong>Pure Functions&lt;/strong>, &lt;strong>Currying&lt;/strong>, &lt;strong>Higher-Order functions&lt;/strong>.&lt;/p>
&lt;h2 id="what-is-currying">What is Currying?&lt;/h2>
&lt;p>Currying is a &lt;strong>process&lt;/strong> in functionnal programming in which we can transform a function with multiple arguments into a sequence of nesting functions. It returns a new functon that expects the next argument inline.&lt;/p>
&lt;p>Currying doesn&amp;rsquo;t call a function. It just transforms it.&lt;/p>
&lt;p>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。&lt;/p>
&lt;p>It keeps returning a new function (that expects the current argument) until all the arguments are exhausted. The arguments are kept &lt;code>alive&lt;/code>(via &lt;code>closure&lt;/code>) and all are used in execution when the final function tin the currying chain is returnd and executed.&lt;/p>
&lt;pre tabindex="0">&lt;code>Currying is the process of turning a function with mutiple arity(the number of arguments of operator taken by a function) into a function with less arity.
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 2-arity function
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>SO, currying transforms a function with multiple arguments into a sequence/series of functions each taking &lt;em>single argument&lt;/em>.&lt;/strong>&lt;/p>
&lt;p>Currying is a transformation of functions that translates a function from callbale as &lt;code>f(a, b, c)&lt;/code> into callable as &lt;code>f(a)(b)(c)&lt;/code>.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;p>We&amp;rsquo;ll create a helper function &lt;code>curry(fn)&lt;/code> that performs currying for a two-argument &lt;code>fn&lt;/code>. In other words, &lt;code>curry(fn)&lt;/code> for two-argument &lt;code>fn(a, b)&lt;/code> translates it into a function that runs as &lt;code>fn(a)(b)&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// curry(fn) does the currying transform
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">curry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//usage
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">curriedSum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">curry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">curriedSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you see the implementation is straightforward: &lt;strong>Just two wrapper&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The result of &lt;code>curry(fn)&lt;/code> is a wrapper &lt;code>function(a)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When it is called like &lt;code>curriedSum(1)&lt;/code>, the argument is saved in the Lexical Environment&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, and a new wrapper is returned &lt;code>function(b)&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>Then this wrapper is called with &lt;code>2&lt;/code> as an argument, and it passes the call to the original &lt;code>sum&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h4 id="_lodash">&lt;code>_lodash&lt;/code>&lt;/h4>
&lt;p>More advanced implementations of currying, such as &lt;code>_.curry&lt;/code> from &lt;strong>lodash&lt;/strong> library, return a wrapper that allows a function to be called both normally and partially:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// using _.curry from lodash library
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">curriedSum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">curry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">curriedSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 3, still callable normally
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">curriedSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 3, called partially
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="what-for">What for?&lt;/h3>
&lt;p>For instance, we have the logging function &lt;code>log(date, importance, message)&lt;/code> that formats and outputs the information. In real projects such functions have many useful features like sending logs over the network, here we&amp;rsquo;ll just use &lt;code>alert&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">importance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`[&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getHours&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMinutes&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">][&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">importance&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">]&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// curry it
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">log&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">curry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// how it works
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s1">&amp;#39;DEBUG&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;some bugs&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// log(a, b, c)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">())(&lt;/span>&lt;span class="s1">&amp;#39;DEBUG&amp;#39;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="s1">&amp;#39;some bugs&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//log(a)(b)(c)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Usage
&lt;/span>&lt;span class="c1">// logNow will be the partial of log with fixed first argument
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">logNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="c1">// use it
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">logNow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [HH:mm] INFO message
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now &lt;code>logNow&lt;/code> is &lt;code>log&lt;/code> with first argument, in other words &amp;ldquo;partially applied function&amp;rdquo; or &amp;ldquo;partial&amp;rdquo; for short.&lt;/p>
&lt;p>We can go further and make a convenience function for current debug logs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">let&lt;/span> &lt;span class="nx">debugNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">logNow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DEBUG&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">debugNow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [HH:mm] DEBUG message
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>We didn&amp;rsquo;t lose anyhing after currying: &lt;code>log&lt;/code> is still callable normally&lt;/li>
&lt;li>We can easily generate partial functions such as for today log.&lt;/li>
&lt;/ol>
&lt;h3 id="advanced-curry-implementation">Advanced curry implementation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">curry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">func&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">curried&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="nx">func&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">func&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(...&lt;/span>&lt;span class="nx">args2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">curried&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// usage
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">curriedSum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">curry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">curriedSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 6, still callable normally
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">curriedSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 6, currying of 1st arg
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">curriedSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 6, full currying
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;code>Function.length&lt;/code>: The &lt;code>length&lt;/code> property indicates the number of parameters expected by the function.&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>If passed &lt;code>args&lt;/code> count is the same or more than the orignal function has in its definition (&lt;code>func.length&lt;/code>), then just pass the call to it using &lt;code>func.apply&lt;/code>&lt;/li>
&lt;li>Otherwise, get a partial: we don&amp;rsquo;t call &lt;code>func&lt;/code> just yet. Instead, another wrapper is returned, that will re-apply &lt;code>curried&lt;/code> providing previous arguments together with the new ones.&lt;/li>
&lt;/ol>
&lt;p>Thenm if we call it, again we&amp;rsquo;ll get either a new partial (if not enough arguments) or, finally, the result.&lt;/p>
&lt;h2 id="when">When&lt;/h2>
&lt;p>Currying comes in handy when you want to:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Write little code modules that can be reused and configured with ease, much like what we do with npm.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Avoid frequently calling a function with the same argument.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>&lt;em>Currying&lt;/em> is a transform that makes &lt;code>fn(a,b,c)&lt;/code> callbale as &lt;code>fn(a)(b)(c)&lt;/code>. JavaScript implementations usually both keep the function callable normally and return the partial if the arguments count is not enough.&lt;/p>
&lt;p>&lt;em>Currying&lt;/em> allows us to easily get partials. As we&amp;rsquo;ve seen in the logging example, after currying the three argement unniversal function &lt;code>log(date, importance, message)&lt;/code> gives us partials when called with one argument or two arguments(&lt;code>log(date, importance)&lt;/code>).&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://javascript.info/currying-partials" target="_blank" rel="noopener"
>Currying&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://kenju.gitbooks.io/js_step-up-to-intermediate/content/content/part03/currying.html" target="_blank" rel="noopener"
>カリー化&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html#%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E5%8F%8C%E5%85%B3%E8%AF%AD%E5%92%96%E5%96%B1" target="_blank" rel="noopener"
>柯里化（curry） · 函数式编程指北&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://amnsingh.medium.com/lexical-environment-the-hidden-part-to-understand-closures-71d60efac0e0" target="_blank" rel="noopener"
>Lexical Environment — The hidden part to understand Closures | by Amandeep Singh | Medium&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>毎日のフロントエンド　23</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/</link><pubDate>Fri, 08 Oct 2021 22:28:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/frontend-23-cover.jpg" alt="Featured image of post 毎日のフロントエンド　23" />&lt;h1 id="第二十三日">第二十三日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-关于form标签的-enctype-属性你有哪些了解">&lt;strong>#Question:&lt;/strong> 关于&lt;code>&amp;lt;form&amp;gt;&lt;/code>标签的 &lt;code>enctype&lt;/code> 属性你有哪些了解&lt;/h3>
&lt;p>&lt;code>form&lt;/code> 标签的 &lt;code>enctype&lt;/code>(是表单提交属性之一) 属性指定将数据回发到服务器时浏览器如果对表单数据进行编码，其有三种编码形式&lt;/p>
&lt;p>当 &lt;code>method&lt;/code> 属性值为 &lt;code>post&lt;/code> 时，&lt;code>enctype&lt;/code> 就是将表单的内容提交给服务器的 &lt;code>MIME&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 类型 。可能的取值有：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>application/x-www-form-urlencoded&lt;/code>：未指定属性时的默认值&lt;/p>
&lt;ul>
&lt;li>&lt;code>application/x-www-form-urlencoded&lt;/code> 编码类型会将表单中发送到服务器之前都会进行编码(空格转换为 &amp;ldquo;&lt;code>+&lt;/code>&amp;rdquo; 加号，特殊符号转换为 &lt;code>ASCII HEX&lt;/code> 值)，数据编码成键值对的形式，当表单的 &lt;code>action&lt;/code> 为 &lt;code>post&lt;/code> 时，它会把 &lt;code>form&lt;/code> 数据封装到 &lt;code>http body&lt;/code> 中，然后发送到服务器；&lt;/li>
&lt;li>当表单的 &lt;code>action&lt;/code> 为 &lt;code>get&lt;/code> 时，它会把表单中发送的数据转换成一个字符串(如：&lt;code>a=1&amp;amp;b=2&amp;amp;c=3&lt;/code>)并使用?连接到 &lt;code>url&lt;/code> 后面。在不指定 &lt;code>enctype&lt;/code> 属性时 &lt;code>application/x-www-form-urlencoded&lt;/code> 是默认属性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>multipart/form-data&lt;/code>: &lt;strong>不对字符进行编码&lt;/strong>，在使用包含文件(如图片、mp4 等文件)上传控件的表单时必须使用该值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>text/plain&lt;/code>: &lt;strong>数据以纯文本格式进行编码&lt;/strong>，空格转换为 &amp;ldquo;&lt;code>+&lt;/code>&amp;rdquo; 加号，但不对特殊字符编码&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">action&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="na">enctype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
First name: &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fname&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span> Last name:
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;lname&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;submit&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;提交&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上代码说明如下：&lt;/p>
&lt;ol>
&lt;li>&lt;code>form&lt;/code> 的提交行为需要通过 &lt;code>type=submit&lt;/code> 实现&lt;/li>
&lt;li>&lt;code>form&lt;/code> 中的 &lt;code>method&lt;/code> 属性不指定时，默认的提交方式为 &lt;code>get&lt;/code> 请求，那么也就是说如果不指定 &lt;code>method&lt;/code> 为 &lt;code>post&lt;/code>，那么是不会使用 &lt;code>enctype&lt;/code> 属性的。&lt;/li>
&lt;li>&lt;code>form&lt;/code> 表单的 &lt;code>enctype&lt;/code> 属性是 &lt;code>application/x-www-form-urlencoded&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-说说-css-的优先级是如何计算的">&lt;strong>#Question:&lt;/strong> 说说 CSS 的优先级是如何计算的&lt;/h3>
&lt;h4 id="选择器种类">选择器种类&lt;/h4>
&lt;p>严格来讲，选择器的种类可以分为三种：&lt;strong>标签名选择器&lt;/strong>、&lt;strong>类选择器&lt;/strong> 和 &lt;strong>ID 选择器&lt;/strong>。而所谓的后代选择器和群组选择器只不过是对前三种选择器的扩展应用。而 在标签内写入 &lt;strong>style=&amp;quot;&amp;quot;&lt;/strong> 的方式，应该是&lt;strong>CSS&lt;/strong>的一种引入方式，而不是选择器，因为根本就没有用到选择器。而一般人们将上面这几种方式结合在一起，所 以就有了 5 种或 6 种选择器了。&lt;/p>
&lt;p>三种基本的选择器类型&lt;/p>
&lt;ul>
&lt;li>标签名选择器，如：&lt;code>p{}&lt;/code>，即直接使用 &lt;code>HTML&lt;/code> 标签作为选择器&lt;/li>
&lt;li>类选择器，如 &lt;code>.polaris{}&lt;/code>&lt;/li>
&lt;li>&lt;code>ID&lt;/code> 选择器，如 &lt;code>#polaris{}&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;em>伪类，属性选择器特指度等同于类&lt;/em>&lt;/li>
&lt;li>&lt;em>伪元素特指度等同于标签名选择器&lt;/em>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>扩展选择器&lt;/p>
&lt;ul>
&lt;li>后代选择器，如 &lt;code>.polaris span img{}&lt;/code>，后代选择器实际上是使用多个选择器加上&lt;strong>中间的空格&lt;/strong>来找到具体的要控制标签。&lt;/li>
&lt;li>群组选择器，如 &lt;code>div,span,img{}&lt;/code>，群组选择器实际上是对 CSS 的&lt;strong>一种简化写法&lt;/strong>，只不过把有相同定义的不同选择器放在一起，省了很多代码&lt;/li>
&lt;/ul>
&lt;h4 id="特指度-优先级计算">特指度-优先级计算&lt;/h4>
&lt;p>特指度（&lt;code>specificity&lt;/code>）。特指度表示一个 css 选择器表达式的重要程度，可以通过一个公式来计算出一个数值，数越大，越重要。这个计算叫做“I-C-E”计算公式，&lt;/p>
&lt;pre tabindex="0">&lt;code>I——Id; 100
C——Class; 10
E——Element; 1
&lt;/code>&lt;/pre>&lt;p>即，针对一个 css 选择器表达式，遇到一个&lt;strong>id&lt;/strong>就往特指度数值中加&lt;strong>100&lt;/strong>，遇到一个&lt;strong>class&lt;/strong>就往特指度数值中加&lt;strong>10&lt;/strong>，遇到一个&lt;strong>element&lt;/strong>就往特指度数值中加&lt;strong>1&lt;/strong>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 83;
flex-basis: 199px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/css-specificity.jpg" data-size="292x351">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/css-specificity.jpg"
width="292"
height="351"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/css-specificity_hu9e4dfce7146b625b75057fc17e02e545_12087_480x0_resize_q75_box.jpg 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/css-specificity_hu9e4dfce7146b625b75057fc17e02e545_12087_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="result-specificity">
&lt;/a>
&lt;figcaption>result-specificity&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>&lt;code>!important&lt;/code> 优先级最高，高于上面一切。&lt;code>*&lt;/code> 选择器最低，低于一切。&lt;/strong>&lt;/p>
&lt;h4 id="后代选择器的定位原则">后代选择器的定位原则&lt;/h4>
&lt;p>浏览器 CSS 匹配不是从左到右进行查找，而是&lt;strong>从右到左进行查找&lt;/strong>。比如 &lt;code>div #div Box p span.red{color:red;}&lt;/code>，浏览器的查找顺序如下：&lt;/p>
&lt;ol>
&lt;li>先查找 html 中所有 class=&amp;lsquo;red&amp;rsquo; 的 span 元素&lt;/li>
&lt;li>找到后，再查找其父辈元素中是否有 p 元素，再判断 p 的父元素中是否有 id 为 divBox 的 div 元素，如果都存在则匹配上。&lt;/li>
&lt;/ol>
&lt;p>浏览器&lt;strong>从右到左进行查找的好处&lt;/strong>是为了尽早过滤掉一些无关的样式规则和元素。&lt;/p>
&lt;h4 id="简洁高效的-css">简洁、高效的 CSS&lt;/h4>
&lt;p>所谓高效的 CSS 就是让浏览器在查找 style 匹配的元素的时候尽量进行少的查找&lt;/p>
&lt;p>下面列出一些常见问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>不要在&lt;code>ID选择器&lt;/code>前使用标签名&lt;/p>
&lt;ul>
&lt;li>一般写法：&lt;code>div #div Box&lt;/code>&lt;/li>
&lt;li>更好写法：&lt;code>#div Box&lt;/code>&lt;/li>
&lt;li>解释： 因为&lt;code>ID&lt;/code>选择器是唯一的，加上 &lt;code>div&lt;/code> 反而增加不必要的匹配。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>不要在 &lt;code>class选择器&lt;/code> 前使用标签名&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一般写法：&lt;code>span.red&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更好写法：&lt;code>.red&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解释：同第一条，但如果你定义了多个&lt;code>.red&lt;/code>，而且在不同的元素下是样式不一样，则不能去掉，比如你 css 文件中定义如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>p.red{color:red;}&lt;/code>&lt;/li>
&lt;li>&lt;code>span.red{color:#ff00ff}&lt;/code>&lt;/li>
&lt;li>如果是这样定义的就不要去掉，去掉后就会混淆，不过建议最好不要这样写。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>尽量少使用层级关系&lt;/p>
&lt;ul>
&lt;li>一般写法：&lt;code>#divBox p .red{color:red;}&lt;/code>&lt;/li>
&lt;li>更好写法：&lt;code>.red{..}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>class&lt;/code> 代替层级关系&lt;/p>
&lt;ul>
&lt;li>一般写法：&lt;code>#divBox ul li a{display:block;}&lt;/code>&lt;/li>
&lt;li>更好写法：&lt;code>.block{display:block;}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;code>!important&amp;gt;id&amp;gt;class&amp;gt;tag&amp;gt;*&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-01--0201--03-和-01--02-分别等于多少并解释下为什么">&lt;strong>#Question:&lt;/strong> &lt;code>0.1 + 0.2&lt;/code>、&lt;code>0.1 + 0.3&lt;/code> 和 &lt;code>0.1 \* 0.2&lt;/code> 分别等于多少？并解释下为什么&lt;/h3>
&lt;p>&lt;code>EcmaScrpt&lt;/code>规范定义 Number 的类型遵循了 IEEE754-2008 中的 64 位浮点数规则定义的小数后的有效位数至多为 52 位导致计算出现精度丢失问题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="mf">0.1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">0.2&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解决这个问题；使用原生最简单的方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nb">parseFloat&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mf">0.1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">0.2&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toFixed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>&lt;code>parseFloat(string)&lt;/code> function parses an argument(converting it to a string first if needed) and returns a floating point number or &lt;code>NaN&lt;/code> when the first non-whitespace character cannot be converted to a number.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>numObj.toFixed(digits)&lt;/code> method formats a number using fixed-point notation.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Parameter&lt;/strong>:&lt;code>digits (Optional)&lt;/code> :The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.&lt;/li>
&lt;li>&lt;strong>RETURN VALUE&lt;/strong>:A string representing the given number using fixed-point notation.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Media_type" target="_blank" rel="noopener"
>Media type - Wikipedia&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>JavaScript Tips and Tricks</title><link>https://youkoucoding.github.io/p/javascript-tips-and-tricks/</link><pubDate>Fri, 08 Oct 2021 00:47:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/javascript-tips-and-tricks/</guid><description>&lt;img src="https://youkoucoding.github.io/p/javascript-tips-and-tricks/tip-trick-js.jpg" alt="Featured image of post JavaScript Tips and Tricks" />&lt;h2 id="1-quick-consolelog">1. Quick &lt;code>console.log()&lt;/code>&lt;/h2>
&lt;p>Get rid of writing console.log again and again and make it shorter by using the following code snippet.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">let&lt;/span> &lt;span class="nx">clog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">clog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;This will be printed in console.&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">clog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 123
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-sprend-operator">2. Sprend Operator&lt;/h2>
&lt;p>The spread operator is a new addition t othe set of operators in &lt;code>ES6&lt;/code>. It takes an iterable object(e.g array) and expands it into individual elements. Below is an example code of spread operator usage.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Spread Operator
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Array COncatination
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">num_one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">num_two&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">concat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">num_one&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">num_two&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [1,2,3,4,5,6]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Copying An Array
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">alpha_copy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">alpha&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">alpha_copy&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Array literals
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">literal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">literal&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [100, 200,300,400,500,600]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-truncating-any-array">3. Truncating any Array&lt;/h2>
&lt;p>Do you know &lt;strong>the length method&lt;/strong> not only show you the size of a String but also truncates your array in any size? Check the below code example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Truncating an array
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">600&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// make size 3
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [100, 200, 300]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// []
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-smart-replacing">4. Smart Replacing&lt;/h2>
&lt;p>This tip will save you time by using loops to replace words in long string data. We will use &lt;code>repace()&lt;/code> method in JavaScript which takes two parameters one is the &lt;strong>regex&lt;/strong> of a word that you want to replace and the second is the new word.&lt;/p>
&lt;p>This comes in handy when you working on big Text data and you want to replace specific words with some new words. Check out the below code example for better understanding.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Smart Replacing
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;This is potato and potato&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/pot/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;tom&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// This is tomato and potato
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/pot/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;tom&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// This is tomato and tomato
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-numerical-separator">5. Numerical Separator&lt;/h2>
&lt;p>This simple tip will increase the readability of your big number of data in JavaScript. We will use &lt;code>&amp;quot;_&amp;quot;&lt;/code> as a numberical sepatator. Check out the below code example.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">let&lt;/span> &lt;span class="nx">data1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100300400&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">data2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100_300_400&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//100300400;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data1&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">data2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-quick-power-calculation">6. Quick Power Calculation&lt;/h2>
&lt;p>You probably use &lt;code>Math.pow()&lt;/code> method to calculate the power of any number. This trick will calculate the power in the quick form by using regular math ways.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Normal way
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 8
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Quick way
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 8
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="7-rest-parameter">7. Rest Parameter&lt;/h2>
&lt;p>Rest Parameter syntax is used to handle the infinite number of parameters in the function definition. Below example code will clear you understanding of how useful is rest of parameter is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">cal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">cal&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cal&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 27
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="8-reverse-any-string">8. Reverse Any String&lt;/h2>
&lt;p>This trick will reverse any String datra without using any loop. Take a look at the below example code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Reverse any string
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">reverse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">string&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Typescript&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// tpircsepyT
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="9-destructuring">9. Destructuring&lt;/h2>
&lt;p>Destructuring is a JavaScript expression that allows to unpact values from arrays and bind them to variables.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Destructing
&lt;/span>&lt;span class="c1">// Normal way
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">fun&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fun&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 2 4 6
&lt;/span>&lt;span class="c1">// destruting way
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fun&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 2 4 6
&lt;/span>&lt;span class="c1">// Destructing Swaping
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)[(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 4 2
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="continuing">Continuing&amp;hellip;&lt;/h2></description></item><item><title>毎日のフロントエンド　22</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/</link><pubDate>Thu, 07 Oct 2021 11:06:55 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/frontend-22-cover.jpg" alt="Featured image of post 毎日のフロントエンド　22" />&lt;h1 id="第二十二日">第二十二日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-js放在html的body和head有什么区别">&lt;strong>#Question:&lt;/strong> &lt;code>js&lt;/code>放在&lt;code>html&lt;/code>的&lt;code>&amp;lt;body&amp;gt;&lt;/code>和&lt;code>&amp;lt;head&amp;gt;&lt;/code>有什么区别&lt;/h3>
&lt;blockquote>
&lt;p>在浏览器渲染页面之前，它需要通过解析&lt;code>HTML&lt;/code>标记然后构建&lt;code>DOM&lt;/code>树。在这个过程中，如果解析器遇到了一个脚本(script)，它就会停下来，并且执行这个脚本，然后才会继续解析 HTML。如果遇到了一个引用外部资源的脚本(script)，它就必须停下来等待这个脚本资源的下载，而这个行为会导致一个或者多个的网络往返，并且会延迟页面的首次渲染时间&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>外部引入的脚本(script)会阻塞浏览器的并行下载&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>浏览器解析&lt;code>HTML&lt;/code>顺序&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;code>js&lt;/code> 放在 &lt;code>&amp;lt;head&amp;gt;&lt;/code> 中，如果不添加 &lt;code>async&lt;/code> 或者 &lt;code>defer&lt;/code> 时，当浏览器遇到 script 时，会阻塞 DOM 树的构建，进而影响页面的加载。当 js 文件较多时，页面白屏的时间也会变长。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把 js 放到 &lt;code>&amp;lt;body&amp;gt;&lt;/code> 里（一般在 &lt;code>&amp;lt;/body&amp;gt;&lt;/code> 的上面）时，由于 DOM 是顺序解析的，因此 js 不会阻塞 DOM 的解析。对于必须要在 DOM 解析前就要加载的 js，我们需要放在 &lt;code>&amp;lt;head&amp;gt;&lt;/code> 中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般情况下是在网站中，同步在 &lt;code>&amp;lt;head&amp;gt;&lt;/code> 加载的脚本通常是业务必须的，比如说我要注册一个 window 对象，或者用 document.write 写入一些内容，或者是业务需求，我们可以用 head 来做加载:&lt;strong>头部给 script 标签加入 async 的属性，表示它是异步加载的脚本，不会对 html 进行阻塞，这也是大部分网站的做法&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="conclusion">Conclusion&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>对于必须要在 &lt;code>DOM&lt;/code> 加载之前运行的 &lt;code>JavaScript&lt;/code> 脚本，我们需要把这些脚本放置在页面的 &lt;code>head&lt;/code> 中，而不是通过外部引用的方式，因为外部的引用增加了网络的请求次数；并且我们要确保内敛的这些 &lt;code>JavaScript&lt;/code> 脚本是很小的，最好是压缩过的，并且执行的速度很快，不会造成浏览器渲染的阻塞&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于支持使用 &lt;code>script&lt;/code> 标签的 &lt;code>async&lt;/code> 和 &lt;code>defer&lt;/code> 属性的浏览器，我们可以使用这两个属性；其中需要注意的点就是，&lt;code>async&lt;/code> 表示的意思是异步加载 &lt;code>JavaScript&lt;/code> 文件，它的下载过程可以在 HTML 的解析过程中进行，加载完成之后立即执行这个文件的代码，执行文件代码的过程中会阻塞 HTML 的解析，它不保证文件加载的顺序。&lt;code>defer&lt;/code> 表示的意思是在 &lt;code>HTML&lt;/code> 文档解析之后在执行加载完成的 JavaScript 文件，JavaScript 文件的下载过程可以在 HTML 的解析过程中进行，它是按照 script 标签的先后顺序来加载文件的。更多详细的解释可以参考 async vs defer attributes&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-说说浏览器解析-css-选择器的过程">&lt;strong>#Question:&lt;/strong> 说说浏览器解析 CSS 选择器的过程&lt;/h3>
&lt;p>&lt;strong>从上到下，从右到左&lt;/strong>&lt;/p>
&lt;p>因为从左到右，首先浏览器会遍历你最左边的选择器，可能是&lt;code>div&lt;/code>，可能是&lt;code>span&lt;/code>，我需要在整个页面去把匹配成功的 dom 找出来，可以说是海底捞针，但是从右到左不一样了，它通过具体的遍历条件去寻找一个最匹配的值，查找之后在向上查询，是否符合自己的选择器规则，才最后匹配成功；&lt;/p>
&lt;p>前者会浪费大量的遍历时间，造成大量错误的匹配结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">class&lt;/span> &lt;span class="nt">ul&lt;/span> &lt;span class="nt">li&lt;/span> &lt;span class="nt">span&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">css&lt;/span> &lt;span class="err">属性&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c">/* 从右向左开始解析。因为一般来说，最右侧的节点范围反而会比较大，越向左限定的条件就越多。也因此 CSS 的选择器设计上不宜嵌套过多，会带来性能上的问题。 */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-你对-new-操作符的理解是什么手动实现一个-new-方法">&lt;strong>#Question:&lt;/strong> 你对 new 操作符的理解是什么？手动实现一个 new 方法&lt;/h3>
&lt;h4 id="new-operator">new operator&lt;/h4>
&lt;p>The &lt;code>new&lt;/code> operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.&lt;/p>
&lt;blockquote>
&lt;p>new 运算符创建一个用户定义的对象类型的实例 或 具有构造函数的内置对象类型&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>new constructor[([arguments])]&lt;/code>&lt;/p>
&lt;h4 id="description">Description&lt;/h4>
&lt;p>The new keyword does the following things:&lt;/p>
&lt;ol>
&lt;li>Creates a blank, plain JavaScript object (&lt;code>{}&lt;/code>)&lt;/li>
&lt;li>Adds a property to the new object &lt;code>__proto__&lt;/code> that links to the constructor function&amp;rsquo;s &lt;strong>prototype&lt;/strong> object&lt;/li>
&lt;li>Blinds the newly created object instance as the &lt;code>this&lt;/code> context( all references to &lt;code>this&lt;/code> in the constructor function now refer to the object created in the first step).&lt;/li>
&lt;li>Returns &lt;code>this&lt;/code> if the doesn&amp;rsquo;t return an object&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;ol>
&lt;li>创建一个新对象，即 &lt;code>{}&lt;/code>&lt;/li>
&lt;li>把新对象的原型指向构造函数的 prototype&lt;/li>
&lt;li>把构造函数里的 this 指向新对象&lt;/li>
&lt;li>返回这个新对象&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">bar1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">bar2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">bar1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">bar2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">myFoo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bar 1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2021&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the code &lt;code>new Foo(...)&lt;/code> is executed, the following things happen:&lt;/p>
&lt;ol>
&lt;li>A new object is created, inheriting from &lt;code>Foo.prototype&lt;/code>&lt;/li>
&lt;li>the constructor function &lt;code>Foo&lt;/code> is called with specified arguments, and with &lt;code>this&lt;/code> bound to newly created object. &lt;code>new Foo&lt;/code> is &lt;strong>equivalent&lt;/strong> to &lt;code>new Foo()&lt;/code>, if no argument list is specified, &lt;code>Foo&lt;/code> is called without argument.&lt;/li>
&lt;li>The object &lt;strong>(not null, false 123 or other primitive types)&lt;/strong> returned by the constructor function becomes the result of the whole &lt;code>new &lt;/code> expression. If the constructor function doesn&amp;rsquo;t explicitly return an object, the object created in step one is used instead &lt;strong>(normally constructors don&amp;rsquo;t return a value, but they can choose to do so if they want to override the normal object creation process.)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h4 id="simulation-new-operator">Simulation &lt;code>new&lt;/code> operator&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="mi">_&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 1. 创建一个新对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">newObj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="c1">// 得到构造函数, 并调用 shift 得到数组的第一个参数，并且会改变元数组
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">Con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[].&lt;/span>&lt;span class="nx">shift&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 2. 把新对象的原型指向构造函数的prototype
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">newObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">__&lt;/span>&lt;span class="nx">proto__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Con&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 3. 把构造函数里的this指向新对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Con&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">newObj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 4. 返回新对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;object&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">newObj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">_&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">constructorFunction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;willian&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//&amp;#39;willian&amp;#39;, 18
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">say&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">//Hello willian
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>arguments&lt;/code> 对象来获取传入的所有参数&lt;/li>
&lt;li>&lt;code>arguments&lt;/code> 对象是所有（&lt;strong>非箭头&lt;/strong>）函数中都可用的局部变量&lt;/li>
&lt;li>可以使用 &lt;code>arguments&lt;/code> 对象在函数中引用函数的参数&lt;/li>
&lt;li>The &lt;code>shift()&lt;/code> method removes the first element from an array and returns that removed element. This method changes the length of the array.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// method Two
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="mi">_&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//将创建的对象的原型指向构造函数的原型 ==&amp;gt; 新对象.__proto__(原型) == fn.prototype
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 将this指向新对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//判断返回值 （如果构造函数本身有返回值且是对象类型，就返回本身的返回值，如果没有才返回新对象）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">ret&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nb">Object&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">ret&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://developers.google.com/speed/docs/insights/BlockingJS" target="_blank" rel="noopener"
>移除会阻止内容呈现的 JavaScript  |  PageSpeed Insights  |  Google Developers&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://levelup.gitconnected.com/all-about-script-87fea475b976" target="_blank" rel="noopener"
>All about &lt;!-- raw HTML omitted -->. In this article, you’ll learn about… | by Oussema Miled | Level Up Coding&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://github.com/haizlin/fe-interview/issues/74#issuecomment-643983992" target="_blank" rel="noopener"
>只谈 js 文件和 html dom 标签&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html" target="_blank" rel="noopener"
>async vs defer attributes - Growing with the Web&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>毎日のフロントエンド　21</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/</link><pubDate>Wed, 06 Oct 2021 12:26:28 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/frontend-21-cover.jpg" alt="Featured image of post 毎日のフロントエンド　21" />&lt;h1 id="第二十一日">第二十一日&lt;/h1>
&lt;h2 id="html">HTMl&lt;/h2>
&lt;h3 id="question-谈谈对input元素中readonly和disabled属性的理解">&lt;strong>#Question:&lt;/strong> 谈谈对&lt;code>input&lt;/code>元素中&lt;code>readonly&lt;/code>和&lt;code>disabled&lt;/code>属性的理解&lt;/h3>
&lt;p>相同点：&lt;/p>
&lt;ul>
&lt;li>都会使文本框变成只读，不可编辑&lt;/li>
&lt;/ul>
&lt;p>不同点：&lt;/p>
&lt;ol>
&lt;li>&lt;code>disabled&lt;/code> 属性在将 &lt;code>input&lt;/code> 文本框变成只读不可编辑的同时，还会使文本框变灰, 不允许填写和使用,但是&lt;code>readonly&lt;/code>不会&lt;/li>
&lt;li>&lt;code>disabled&lt;/code> 属性修饰后的文本框内容，在不可编辑的同时，通过 &lt;strong>js 也是获取不到的&lt;/strong>。但是用 readonly 修饰后的文本框内容，是可以通过 js 获取到的，也就只是简单的不可编辑而已&lt;/li>
&lt;li>&lt;code>disabled&lt;/code> 属性对 &lt;code>input&lt;/code> 文本框，单选 &lt;code>radio&lt;/code>, 多选 &lt;code>checkbox&lt;/code> 都适用，但是 &lt;code>readonly&lt;/code> 就不适用，用它修饰后的单选以及多选按钮仍然是可以编辑状态的。(&lt;code>readonly&lt;/code>只针对&lt;code>input&lt;/code>和&lt;code>textarea&lt;/code>有效，而 disabled 对于所有的表单元素都有效)&lt;/li>
&lt;li>&lt;code>readonly&lt;/code> 直译为 “只读”，一般用于只允许用户填写一次的信息，提交过一次之后，就不允许再次修改了&lt;/li>
&lt;li>&lt;code>disabled&lt;/code> 的数据是不会被获取和上传，&lt;code>readonly&lt;/code> 的数据会被获取和上传&lt;/li>
&lt;/ol>
&lt;p>Summary：&lt;/p>
&lt;ol>
&lt;li>&lt;code>readonly&lt;/code>：不可编辑、可复制、可选择、可以接收焦点但不能被修改，后台会接收到传值&lt;/li>
&lt;li>&lt;code>disabled&lt;/code>：不可编辑、不可复制、不可选择、不能接收焦点，后台也不会接收到传值&lt;/li>
&lt;/ol>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-说说对line-height是如何理解的">&lt;strong>#Question:&lt;/strong> 说说对&lt;code>line-height&lt;/code>是如何理解的？&lt;/h3>
&lt;p>&lt;code>line-height&lt;/code>&lt;/p>
&lt;p>The &lt;code>line-height&lt;/code> CSS property sets the height of a line box. It&amp;rsquo;s commonly used to set the distance between lines of text. On block-level elements, it specifies the &lt;strong>minimum height of line boxes&lt;/strong> within the element. On ono-replaced inline elements, it specifies the height that is used to calculate line box height&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>&lt;code>line-height&lt;/code> 在日常用的最多的是让单行文字垂直居中（其实不需要设置 height，一个 line-height 即可）。&lt;/p>
&lt;p>&lt;code>line-height - font-size&lt;/code> 为行距，一般会近似平分到文字的上下两边，使文字看上去垂直居中。如果需要多行文字的垂直居中，还需要加上 &lt;code>vertical-align: middle;&lt;/code>&lt;/p>
&lt;p>&lt;code>line-height&lt;/code> 可以&lt;strong>不设置单位&lt;/strong>，表示 &lt;code>font-size&lt;/code> 的倍数&lt;/p>
&lt;p>对于非替换元素的纯内联元素，其高度是由 &lt;code>line-height&lt;/code> 所决定的&lt;/p>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-写一个方法验证是否为中文2">&lt;strong>#Question:&lt;/strong> 写一个方法验证是否为中文&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">//使用的Unicode 编码 4e00 和 9fa5 分别表示第一个汉字和最后一个汉字的编码
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">isChinese&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">reg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sr">/^[\u4e00-\u9fa5]+$/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">reg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/6844903721025929223" target="_blank" rel="noopener"
>CSS 深入理解之 line-height&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/CSS/line-height#values" target="_blank" rel="noopener"
>line-height - CSS: Cascading Style Sheets | MDN&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://github.com/haizlin/fe-interview/issues/72#issuecomment-544332674" target="_blank" rel="noopener"
>中文字符对应编写正则&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>毎日のフロントエンド　20</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/</link><pubDate>Tue, 05 Oct 2021 11:27:36 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/frontend-20-cover.jpg" alt="Featured image of post 毎日のフロントエンド　20" />&lt;h1 id="第二十日">第二十日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-请描述-html-元素的显示优先级">&lt;strong>#Question:&lt;/strong> 请描述 HTML 元素的显示优先级&lt;/h3>
&lt;p>在 html 中，帧元素（&lt;code>frameset&lt;/code>）的优先级最高(已不提倡使用)，表单元素比非表单元素的优先级要高。&lt;/p>
&lt;p>&lt;code>frameset &amp;gt; 表单元素 &amp;gt; 非表单元素&lt;/code>&lt;/p>
&lt;ul>
&lt;li>表单元素:
&lt;ul>
&lt;li>文本输入框，密码输入框，单选框，复选框，文本输入域，列表框等等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非表单元素:
&lt;ul>
&lt;li>&lt;code>a&lt;/code>，&lt;code>div&lt;/code>, &lt;code>table&lt;/code>, &lt;code>span&lt;/code> 等等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>有窗口元素比无窗口元素的优先级高&lt;/p>
&lt;ul>
&lt;li>有窗口元素:
&lt;ul>
&lt;li>select 元素，object 元素，以及 frames 元素等等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>无窗口元素:
&lt;ul>
&lt;li>大部分 html 元素都是无窗口元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-要让-chrome-支持小于-12px-的文字怎么做">&lt;strong>#Question:&lt;/strong> 要让 Chrome 支持小于 12px 的文字怎么做？&lt;/h3>
&lt;p>Chrome 中有最小字号的限制，一般为 &lt;code>12px&lt;/code>。原因是 Chrome 认为小于这个字号会影响阅读。&lt;/p>
&lt;p>当需要小于 12px 字体的时候，有以下几个方法可以使用。&lt;/p>
&lt;p>&lt;code>-webkit-text-size-adjust:none;&lt;/code> 这个属性&lt;strong>在高版本的 Chrome 中已经被废除。&lt;/strong>&lt;/p>
&lt;p>使用 &lt;code>transform: scale(0.5, 0.5);&lt;/code>，但使用 transform 需要注意下面几点：&lt;/p>
&lt;ul>
&lt;li>&lt;code>transform&lt;/code> 对行内元素无效，因此要么使用 &lt;code>display: block;&lt;/code> 要么使用 &lt;code>display: inline-block;&lt;/code>&lt;/li>
&lt;li>&lt;code>transform&lt;/code> 即使进行了缩放，原来元素还是会占据对应的位置。因此需要做调整，最好是在外面再包一层元素，以免影响其他元素&lt;/li>
&lt;li>使用图片&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>最方便是切图&lt;/p>
&lt;/blockquote>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-写一个验证身份证号的方法">&lt;strong>#Question:&lt;/strong> 写一个验证身份证号的方法&lt;/h3>
&lt;blockquote>
&lt;p>身份证号码的组成：地址码 6 位+年份码 4 位+月份码 2 位+日期码 2 位+顺序码 3 位+校验码 1 位&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">check&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">reg&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="sr">/^[1-9]\d{5}(19|20)\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|(10|20|30|31))\d{3}[0-9Xx]$/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">reg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// regexObj.test(str) return a boolean
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/868a7d16fb68" target="_blank" rel="noopener"
>HTML 元素的显示优先级 - 简书&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/haizlin/fe-interview/issues/68" target="_blank" rel="noopener"
>Issue #68 haizlin/fe-interview&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　19</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/</link><pubDate>Mon, 04 Oct 2021 15:37:26 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/frontend-19-cover.jpg" alt="Featured image of post 毎日のフロントエンド　19" />&lt;h1 id="第十九日">第十九日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-说说你对html中的置换元素和非置换元素的理解">&lt;strong>#Question:&lt;/strong> 说说你对&lt;code>HTML&lt;/code>中的置换元素和非置换元素的理解&lt;/h3>
&lt;h4 id="置换元素replaced-element">置换元素（&lt;code>Replaced Element&lt;/code>）&lt;/h4>
&lt;blockquote>
&lt;p>简单来说，置换元素可以设置宽 高,他们有自己的属性，和 &lt;code>inline-block&lt;/code> 有一样的属性&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>主要是指 &lt;code>img&lt;/code>、&lt;code>input&lt;/code>、&lt;code>textarea&lt;/code>、&lt;code>select&lt;/code>、&lt;code>object&lt;/code> 等这类默认就有 &lt;code>CSS&lt;/code> 格式化外表范围的元素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浏览器根据元素的标签和属性，来决定元素的具体显示内容&lt;/p>
&lt;ul>
&lt;li>如：浏览器根据标签的 &lt;code>src&lt;/code> 属性显示图片。根据 &lt;code>type&lt;/code> 属性决定显示输入框还是按钮&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="非置换元素non-replaced-element">非置换元素（&lt;code>non-Replaced Element&lt;/code>）&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>就是除了 img、input、textarea、select、object 等置换元素以外的元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内容直接展示给浏览器。例如标签，标签里的内容会被浏览器直接显示给用户&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-css的属性content有什么作用呢有哪些场景可以用到">&lt;strong>#Question:&lt;/strong> &lt;code>CSS&lt;/code>的属性&lt;code>content&lt;/code>有什么作用呢？有哪些场景可以用到&lt;/h3>
&lt;h4 id="before-和-after">&lt;code>:before&lt;/code> 和 &lt;code>:after&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>默认 &lt;code>display: inline;&lt;/code>&lt;/li>
&lt;li>必须设置 &lt;code>content&lt;/code> 属性，否则一切都是无用功， content 属性也只能应用在 &lt;code>:before&lt;/code> 和 &lt;code>:after&lt;/code> &lt;strong>伪元素&lt;/strong>上&lt;/li>
&lt;li>默认 &lt;code>user-select: none;&lt;/code>，就是 &lt;code>:before&lt;/code> 和 &lt;code>:after&lt;/code> 的内容无法被用户选中&lt;/li>
&lt;li>伪元素可以和伪类结合使用形如：&lt;code>.target:hover:after&lt;/code>&lt;/li>
&lt;li>:before 和 :after 是在 CSS2 中提出来的，所以兼容 IE8&lt;/li>
&lt;li>&lt;code>::before&lt;/code> 和 &lt;code>::after&lt;/code> 是 CSS3 中的写法，为了将&lt;strong>伪类&lt;/strong>和伪元素区分开&lt;/li>
&lt;li>不可通过 DOM 使用，它只是纯粹的表象。在特殊情况下，从一个访问的角度来看，当前屏幕阅读不支持生成的内容&lt;/li>
&lt;/ul>
&lt;h4 id="content-定义用法">&lt;code>content&lt;/code> 定义用法&lt;/h4>
&lt;p>&lt;code>content&lt;/code> 属性与 &lt;code>:before&lt;/code> 及 &lt;code>:after&lt;/code> &lt;strong>伪元素&lt;/strong>配合使用，在元素头或尾部来插入生成内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">normal&lt;/span> &lt;span class="c">/* Keywords that cannot be combined with other values */&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">none&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;prefix&amp;#39;&lt;/span> &lt;span class="c">/* &amp;lt;string&amp;gt; value, non-latin characters must be encoded e.g. \00A0 for &amp;amp;nbsp; */&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">url&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="o">://&lt;/span>&lt;span class="nt">www&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nt">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">html&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c">/* &amp;lt;uri&amp;gt; value */&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">chapter_counter&lt;/span> &lt;span class="c">/* &amp;lt;counter&amp;gt; values */&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">attr&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">value&lt;/span> &lt;span class="nt">string&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c">/* attr() value linked to the HTML attribute value */&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">open-quote&lt;/span> &lt;span class="c">/* Language- and position-dependant keywords */&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">close-quote&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">no-open-quote&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">no-close-quote&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">open-quote&lt;/span> &lt;span class="nt">chapter_counter&lt;/span> &lt;span class="c">/* Except for normal and none, several values can be used simultaneously */&lt;/span>
&lt;span class="nt">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">inherit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-attribute-和-property-有什么不同">&lt;strong>#Question:&lt;/strong> &lt;code>attribute&lt;/code> 和 &lt;code>property&lt;/code> 有什么不同&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>property&lt;/code>是 &lt;code>DOM&lt;/code> 中的属性，是 JavaScript 里的对象&lt;/p>
&lt;ul>
&lt;li>JavaScript の世界の住人&lt;/li>
&lt;li>扱いやすいようにパースされている&lt;/li>
&lt;li>動的（なこともある）&lt;/li>
&lt;li>&lt;code>element.property&lt;/code> 例：&lt;code>p.className&lt;/code>&lt;/li>
&lt;li>&lt;code>$().prop&lt;/code>&lt;/li>
&lt;li>可以读取标签自带属性，包括没有写出来的&lt;/li>
&lt;li>不能读取 &lt;code>attribute&lt;/code> 设置的属性&lt;/li>
&lt;li>是元素（对象）的属性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>attribute&lt;/code> 是 &lt;code>HTML&lt;/code> 标签上的特性，它的值&lt;strong>只能是字符串&lt;/strong>,直接在 html 标签添加的都是&lt;code>attribute&lt;/code>属性&lt;/p>
&lt;ul>
&lt;li>&lt;code>HTML&lt;/code> の世界の住人&lt;/li>
&lt;li>&lt;code>HTML&lt;/code> に書いたものがそのまま出る&lt;/li>
&lt;li>静的&lt;/li>
&lt;li>&lt;code>get/setAttribute()&lt;/code> 例如：&lt;code>a.getAttribute('href')&lt;/code>&lt;/li>
&lt;li>&lt;code>$().attr&lt;/code>&lt;/li>
&lt;li>不能读取 &lt;code>property&lt;/code> 设置的属性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://qiita.com/jkr_2255/items/66a16bd969454ee8b114" target="_blank" rel="noopener"
>Attribute と Property - Qiita&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　18</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/</link><pubDate>Sat, 02 Oct 2021 23:10:17 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/frontend-18-cover.jpg" alt="Featured image of post 毎日のフロントエンド　18" />&lt;h1 id="第十八日">第十八日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-怎样在页面上实现一个圆形的可点击区域">&lt;strong>#Question:&lt;/strong> 怎样在页面上实现一个圆形的可点击区域？&lt;/h3>
&lt;ol>
&lt;li>用 &lt;code>canvas&lt;/code> 画布，弧线画圆，然后计算鼠标的坐标是否落在圆内&lt;/li>
&lt;li>利用 &lt;code>SVG&lt;/code> 作出圆形，然后添加点击事件&lt;/li>
&lt;li>用一个 &lt;code>div&lt;/code>,给 &lt;code>div&lt;/code> 添加圆角属性&lt;code>50%&lt;/code>，在 div 上添加点击事件&lt;/li>
&lt;li>利用 &lt;code>&amp;lt;map&amp;gt;&lt;/code> 和 &lt;code>&amp;lt;area&amp;gt;&lt;/code> 标签设置圆形点击区域&lt;!-- raw HTML omitted -->&lt;code>&amp;lt;area&amp;gt; &amp;amp; &amp;lt;map&amp;gt;&lt;/code> &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="c">&amp;lt;!-- svg 圆 --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">svg&lt;/span>
&lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100%&amp;#34;&lt;/span>
&lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100%&amp;#34;&lt;/span>
&lt;span class="na">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;1.1&amp;#34;&lt;/span>
&lt;span class="na">xmlns&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2000/svg&amp;#34;&lt;/span>
&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">circle&lt;/span>
&lt;span class="na">cx&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>
&lt;span class="na">cy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;50&amp;#34;&lt;/span>
&lt;span class="na">r&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;40&amp;#34;&lt;/span>
&lt;span class="na">stroke&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;black&amp;#34;&lt;/span>
&lt;span class="na">stroke-width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>
&lt;span class="na">fill&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;red&amp;#34;&lt;/span>
&lt;span class="na">onclick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;alert(3)&amp;#34;&lt;/span>
&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">svg&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-什么是-fouc-如何避免-fouc-的">&lt;strong>#Question:&lt;/strong> 什么是 &lt;code>FOUC&lt;/code>？ 如何避免 &lt;code>FOUC&lt;/code> 的？&lt;/h3>
&lt;p>&lt;strong>FOUC 浏览器样式闪烁&lt;/strong>&lt;/p>
&lt;p>&lt;code>FOUC&lt;/code> 即 &lt;code>Flash of Unstyled Content&lt;/code>，是指页面一开始以样式 A（或无样式）的渲染，突然变成样式 B。原因是样式表的晚于 HTML 加载导致页面重新进行绘制。&lt;/p>
&lt;p>产生原因&lt;/p>
&lt;ul>
&lt;li>通过 @import 方式导入CSS&lt;/li>
&lt;li>&lt;code>style&lt;/code> 标签在 &lt;code>body&lt;/code> 中或底部&lt;/li>
&lt;li>有几个样式表，放在html结构的不同位置&lt;/li>
&lt;/ul>
&lt;p>解决方案： &lt;strong>把 &lt;code>link&lt;/code> 标签将样式放在 &lt;code>head&lt;/code> 中&lt;/strong>&lt;/p>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-你理解的use-strict-是什么使用它有什么优缺点">&lt;strong>#Question:&lt;/strong> 你理解的&lt;code>use strict&lt;/code>, 是什么?使用它有什么优缺点？&lt;/h3>
&lt;p>由于历史原因 &lt;code>JavaScript&lt;/code> 在错误提示方面做的并不完善。比如允许定义未声明的变量、不允许使用八进制数字、不允许函数参数重名、不允许删除不可删除的属性。&lt;/p>
&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为&lt;/li>
&lt;li>消除代码运行的一些不安全之处，保证代码运行的安全&lt;/li>
&lt;li>提高编译器效率，增加运行速度&lt;/li>
&lt;li>为未来新版本的 Javascript 做好铺垫 &lt;!-- raw HTML omitted -->&lt;code>use strict&lt;/code> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;p>Strict mode makes several changes to normal JavaScript semantics:&lt;/p>
&lt;ul>
&lt;li>Eliminates some JavaScript silent errors by changing them to throw errors.&lt;/li>
&lt;li>Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: &lt;strong>strict mode code can sometimes be made to run faster than identical code that&amp;rsquo;s not strict mode.&lt;/strong>&lt;/li>
&lt;li>Prohibits some syntax likely to be defined in future version of ECMAscript.&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener"
>Strict mode - JavaScript | MDN&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://www.zhangxinxu.com/wordpress/2017/05/html-area-map/" target="_blank" rel="noopener"
>HTML area map 标签及在实际开发中的应用&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a class="link" href="https://www.runoob.com/js/js-strict.html" target="_blank" rel="noopener"
>JavaScript 严格模式(use strict) | 菜鸟教程&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>毎日のフロントエンド　17</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/</link><pubDate>Fri, 01 Oct 2021 23:29:44 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/frontend-17-cover.jpg" alt="Featured image of post 毎日のフロントエンド　17" />&lt;h1 id="第十七日">第十七日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-你认为-table-的作用和优缺点是什么呢">&lt;strong>#Question:&lt;/strong> 你认为 table 的作用和优缺点是什么呢？&lt;/h3>
&lt;ul>
&lt;li>优点：特定的布局时，可以很块完成布局，样式好控制，特别是居中、对齐。&lt;/li>
&lt;li>缺点：结构比较繁杂，非常多的 DOM 节点，会导致页面加载变慢、不利于 SEO，相对于目前比较流行的布局来讲。如 &lt;code>flex&lt;/code>，&lt;code>div+css&lt;/code>，&lt;code>grid&lt;/code> 等&lt;/li>
&lt;li>作用：以前用来布局和展示表格，现在一般只用来展示表格&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-解释下-css-sprites-的原理和优缺点分别是什么">&lt;strong>#Question:&lt;/strong> 解释下 CSS sprites 的原理和优缺点分别是什么？&lt;/h3>
&lt;ol>
&lt;li>简介&lt;/li>
&lt;/ol>
&lt;p>&lt;code>CSS Sprites&lt;/code> 是一种网页图片应用处理方式。它允许将一个页面涉及到的所有零星图片都包含到一张大图中， 利用 CSS 的&lt;code>background-image&lt;/code>，&lt;code>background- repeat&lt;/code>，&lt;code>background-position&lt;/code>的组合进行背景定位， 访问页面时避免图片载入缓慢的现象。&lt;/p>
&lt;ol start="2">
&lt;li>优点&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>CSS Sprites&lt;/code>能很好地减少网页的 http 请求，从而大大的提高页面的性能，这是 CSS Sprites 最大的优点，也是其被广泛传播和应用的主要原因；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>CSS Sprites&lt;/code>能减少图片的字节；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>CSS Sprites&lt;/code>解决了网页设计师在图片命名上的困扰，只需对一张集合的图片命名，不需要对每一个小图片进行命名，从而提高了网页制作效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>CSS Sprites&lt;/code>只需要修改一张或少张图片的颜色或样式来改变整个网页的风格。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>缺点&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>图片合并麻烦：图片合并时，需要把多张图片有序的合理的合并成一张图片，并留好足够的空间防止版块出现不必要的背景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>图片适应性差：在高分辨的屏幕下自适应页面，若图片不够宽会出现背景断裂。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>图片定位繁琐：开发时需要通过工具测量计算每个背景单元的精确位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可维护性差：页面背景需要少许改动，可能要修改部分或整张已合并的图片，进而要改动 css。在避免改动图片的前提下，又只能（最好）往下追加图片，但这样增加了图片字节。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-typeofabc-和-typeof-abc都是-string-那么-typeof-是操作符还是函数">&lt;strong>#Question:&lt;/strong> &lt;code>typeof('abc')&lt;/code> 和 &lt;code>typeof 'abc'&lt;/code>都是 &lt;code>string&lt;/code>, 那么 &lt;code>typeof&lt;/code> 是操作符还是函数？&lt;/h3>
&lt;p>&lt;code>typeof&lt;/code> 是操作符，不是函数。可以添加括号，但是括号的作用是进行分组而非函数的调用。 作用是对后方表达式的返回做类型定义。在后面添加括号其实是改变计算优先级，和四则运算中的括号可以等效理解。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="k">typeof&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//&amp;#34;number&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="mi">123&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// &amp;#34;numberabc&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">123&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// &amp;#34;string&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>React HooksのUseEffect</title><link>https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/</link><pubDate>Thu, 30 Sep 2021 14:24:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/</guid><description>&lt;img src="https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/hooks-cover.jpg" alt="Featured image of post React HooksのUseEffect" />&lt;h1 id="usestate-执行副作用">useState: 执行副作用&lt;/h1>
&lt;h3 id="副作用的定义">副作用的定义&lt;/h3>
&lt;p>通常，副作用是指一段和当前执行结果无关的代码。比如说要修改函数外部的某个变凉，或者发起一个请求等。 在函数组建本次执行中，useEffect 中代码的执行是不影响渲染出来的 UI。&lt;/p>
&lt;p>Side effects are all the operations that affect your componet and can&amp;rsquo;t be done during rendering. Things like fetching data, subscriptions or manually changing the DOM are all examples of side effects.&lt;/p>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">callback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dependencies&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>callback&lt;/code>, 要执行的回调函数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dependencies&lt;/code> 可选的依赖项数组。可选， 如果没有依赖项，callback 在函数组建&lt;strong>每次&lt;/strong>执行完成之后都执行;如果依赖项是空数组，则只在第一渲染时实行回调函数； 如果指定依赖项，则在依赖项变化时才执行 callback&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>useEffect&lt;/code>&lt;/strong> 是每次组件 render 结束后，判断依赖项并执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;strong>No dependencies array:&lt;/strong> the function runs after &lt;strong>every render&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Empty dependencies array:&lt;/strong> the function runs only after the &lt;strong>first render&lt;/strong> &lt;em>(use this for the stuff it&amp;rsquo;s doing will never get stale)&lt;/em>&lt;/li>
&lt;li>&lt;strong>Dependencies array with some values:&lt;/strong> the function runs only if any of those values change&lt;/li>
&lt;li>此外，&lt;code>useEffect&lt;/code> 允许&lt;strong>返回一个函数&lt;/strong>，用与在组件销毁时，做一些清理操作，防止内存泄漏。 例如，移除监听事件。 类似于 类组件中的 &lt;code>componentWillUnmount&lt;/code>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="kd">function&lt;/span> &lt;span class="nx">MyComponent&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// I need to do this just once, after the first render
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">[]);&lt;/span>
&lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// But this other thing needs to be done after every render
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useEffect&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">BlogView&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// local state to preserve the blog content
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">blog&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setBlog&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// useEffect 的 callback 要避免直接使用 async， 需要进行封装
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">doAsynv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 当 ID 发生变化时，将当前博客清除， 以保持内容的一致性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">setBlog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 发起请求，获取数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/blog-content/${id}&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 将数据存入 state
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">setBlog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">doAsync&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">isLoading&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">blog&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>&lt;span class="nx">isLoading&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;loading...&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">blog&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Attention&lt;/strong>: If you use the dependencies array, make sure it includes all values from the component scope (such as props and state) that change over time and that are used by the effect. If you&amp;rsquo;ve forgotten a value or thinked that you don&amp;rsquo;t need it in the array, you will produce bugs, because your code will reference stale values from previous renders.&lt;/p>
&lt;/blockquote>
&lt;h2 id="something-more-about-useeffect">Something More about useEffect&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>使用多个 &lt;code>useEffect&lt;/code>, 可以实现关注点分离，即将不相关的逻辑分离到不同的 &lt;code>useEffect&lt;/code> 中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数适合放在 effect 内部还是外部？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>推荐的方案:函数在 &lt;code>useEffect&lt;/code> 内部, 如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="kd">function&lt;/span> &lt;span class="nx">ProductPage&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">productId&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">product&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setProduct&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 把这个函数移动到 effect 内部后，我们可以清楚地看到它用到的值。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">fetchProduct&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://myapi/product/&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">productId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">json&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setProduct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fetchProduct&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">productId&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// ✅ 有效，只用到了 productId
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果无法 把一个函数移动到 effect 内部，还有一些其他办法：&lt;/p>
&lt;ol>
&lt;li>尝试把那个函数移动到组件之外&lt;/li>
&lt;li>如果所调用的方法是一个纯计算，并且可以在渲染时调用，可以在 &lt;code>useEffect&lt;/code> 之外调用， 让 useEffect 依赖它的返回值&lt;/li>
&lt;li>&lt;code>useCallback&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="dependencies-of-hooks">Dependencies of Hooks&lt;/h2>
&lt;p>Hooks 中依赖项的工作机制：&lt;/p>
&lt;p>Hooks 提供了监听某个数据变化的能力，这个变化可能会触发组件的刷新， 创建副作用， 更新缓存等。要监听变化的数据，就是指定 hooks 的依赖项。&lt;/p>
&lt;p>指定依赖项的注意点：&lt;/p>
&lt;ol>
&lt;li>依赖项中指定的变量，一定要在 回调函数 中用到；&lt;/li>
&lt;li>依赖项一般是一个&lt;strong>常量数组&lt;/strong>， 而不是一个变量；&lt;/li>
&lt;li>&lt;code>React&lt;/code>会使用 &lt;em>浅比较&lt;/em> 来对比依赖项是否发生变化，所以要特别注意数组或者说对象类型（各种引用类型）。 例如： 如果是每次创建一个新的饮用类型，即使值和原来比没有变化， 也会被认为是依赖项发生了变化。
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Todo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 这里的todos是在函数内部创建的， 实际上每次运行都会产生新的数组。
&lt;/span>&lt;span class="c1">// 在依赖比较时， 被认为是发生了新的变化。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[{&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;learn something&amp;#39;&lt;/span> &lt;span class="p">}];&lt;/span>
&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;todos has changed~&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},[&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>React 会确保 setState 函数的标识是稳定的，并且不会在组件重新渲染时发生变化&lt;/strong>。这就是为什么可以安全地从 &lt;code>useEffect&lt;/code> 或 &lt;code>useCallback&lt;/code> 的依赖列表中省略 &lt;code>setState&lt;/code>。(React guarantees that setState function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.)&lt;/li>
&lt;/ol>
&lt;h2 id="hooks-使用规则">Hooks 使用规则&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>只能在函数组建的顶级作用域中使用&lt;/strong>，不能在循环，条件判断，或者嵌套函数中执行，必须在顶层&lt;/p>
&lt;ul>
&lt;li>Hooks 在组件的多次渲染之间，必须按顺序执行。即：
&lt;ol>
&lt;li>所有 Hooks 都必须被执行到。（不能将 hooks 放在可能的 return 之后）&lt;/li>
&lt;li>Hooks 必须按顺序执行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>只能在函数组件或者其他 Hooks 中使用&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果必须在类组件使用，可以： &lt;strong>利用高阶组件模式，将 Hooks 封装成高阶组件&lt;/strong>, 例程如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">useWindowSize&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./hooks/useWindowSize&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">withWindowSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">Component&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">windowSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useWindowSize&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Component&lt;/span> &lt;span class="na">windowSize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">windowSize&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...props&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="c1">// 使用以上高阶组件
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">withWindowSize&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./withWindowSize&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">class&lt;/span> &lt;span class="nx">MyComp&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">windowSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 通过windowSize 高阶组件， 给MyComp 添加 windowSize 属性
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">withWindowSize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MyComp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>&lt;code>eslint-plugin-react-hooks&lt;/code>&lt;/strong> 专门用来检查 hooks 是否被正确使用 &lt;a class="link" href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener"
>eslint-plugin-react-hooks - npm&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://dev.to/francodalessio/understanding-react-s-useeffect-hook-lbg#:~:text=The%20useEffect%20Hook,-Plain%20and%20simple&amp;amp;text=Side%20effects%20are%20all%20the,likely%20done%20in%20the%20past." target="_blank" rel="noopener"
>Understanding React&amp;rsquo;s useEffect Hook - DEV Community&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/6844904056876433415" target="_blank" rel="noopener"
>javascript 浅比较和深比较 - 掘金&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://zoeice.com/react-hook-useEffect/" target="_blank" rel="noopener"
>React Hook(useEffect) | Zoeice&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　16</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/</link><pubDate>Thu, 30 Sep 2021 09:55:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/frontend-16-cover.jpg" alt="Featured image of post 毎日のフロントエンド　16" />&lt;h1 id="第十六日">第十六日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-元素的-alt-和-title-有什么区别title-属性alt属性の役割と違う使い分け">&lt;strong>##Question:&lt;/strong> 元素的 &lt;code>alt&lt;/code> 和 &lt;code>title&lt;/code> 有什么区别；&lt;code>title&lt;/code> 属性,&lt;code>alt&lt;/code>属性の役割と違う・使い分け&lt;/h3>
&lt;p>&lt;code>&amp;lt;head&amp;gt;&lt;/code>内に書き込む要素としての title タグではない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">alt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;画像だよ&amp;#34;&lt;/span> &lt;span class="na">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;こっちのtitleだよ&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>alt&lt;/code> &lt;strong>属性&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>最常见用于 &lt;code>&amp;lt;img&amp;gt;&lt;/code>标签上，alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。&lt;/p>
&lt;p>推荐您在文档的&lt;strong>每个图像中都使用这个属性(SEO 需要)。&lt;/strong> 这样即使图像无法显示，用户还是可以看到关于丢失了什么东西的一些信息。而且对于残疾人来说，alt 属性通常是他们了解图像内容的唯一方式。&lt;/p>
&lt;ul>
&lt;li>&lt;code>title&lt;/code> &lt;strong>属性&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>title&lt;/code> 属性规定关于元素的额外信息。&lt;/p>
&lt;p>这些信息通常会在鼠标移到元素上时显示一段工具提示文本（&lt;code>tooltip text&lt;/code>）。&lt;/p>
&lt;p>&lt;code>title&lt;/code> 属性有一个很好的用途，即为链接添加描述性文字，特别是当连接本身并不是十分清楚的表达了链接的目的。这样就使得访问者知道那些链接将会带他们到什么地方。另外一个潜在的应用就是为图像提供额外的说明信息，比如日期或者其他非本质的信息。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>title&lt;/code> 属性常与 &lt;code>form&lt;/code> 以及 &lt;code>a&lt;/code> 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。当然 title 属性是比较广泛使用的，可以用在除了 base，basefont，head，html，meta，param，script 和 title 之外的所有标签。但是并不是必须的。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>title 属性と alt 属性の違い&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>title&lt;/code> 属性はマウスオーバー時にツールチップで表示されるテキストを入力する。&lt;/li>
&lt;li>&lt;code>title&lt;/code> 属性は img 以外に a タグや link タグなどあらゆる要素に指定していい。&lt;/li>
&lt;li>&lt;code>alt&lt;/code> 属性は画像の代替テキストを指定するタグで、画像リンク切れ時や音声読み上げブラウザで使われる。&lt;/li>
&lt;li>&lt;code>alt&lt;/code> 属性が使われるのは img タグのみで、内容がカラでも存在は必須。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;title&amp;gt;&lt;/code> &lt;strong>标签&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>&amp;lt;title&amp;gt;&lt;/code> 元素可定义文档的标题。&lt;/p>
&lt;p>浏览器会以特殊的方式来使用标题，并且通常把它放置在浏览器窗口的标题栏或状态栏上。同样，当把文档加入用户的链接列表或者收藏夹或书签列表时，标题将成为该文档链接的默认名称。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>&amp;lt;title&amp;gt;&lt;/code> 标签是 &lt;code>&amp;lt;head&amp;gt;&lt;/code> 标签中唯一要求包含的东西&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>一定要选择一个正确的标题(一个好的描述性的标题)，这对于定义文档并确保它能够在 Web 上有效利用来说是十分重要的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-请描述-margin-边界叠加是什么及解决方案">&lt;strong>##Question:&lt;/strong> 请描述 &lt;code>margin&lt;/code> 边界叠加是什么及解决方案&lt;/h3>
&lt;p>问题： 当两个垂直边界相遇时，它们将形成一个边界。这个边界的高度等于两个发生叠加的边界的高度中的较大者。&lt;/p>
&lt;p>&lt;code>margin&lt;/code> 边界叠加只会出现在普通文档流中，所以可以触发 &lt;code>BFC&lt;/code> 来解决&lt;/p>
&lt;p>除此之外，也可以使用 &lt;code>padding&lt;/code> 来代替 &lt;code>margin&lt;/code> 或者增加 &lt;code>border&lt;/code> 的值&lt;/p>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-返回到顶部的方法有哪些-写出其中一个">&lt;strong>##Question:&lt;/strong> 返回到顶部的方法有哪些？ 写出其中一个&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>利用 &lt;code>a&lt;/code> 标签的锚点。在顶部放一个 &lt;code>a&lt;/code> 标签 &lt;code>&amp;lt;a name=&amp;quot;top&amp;quot;&amp;gt;顶部&amp;lt;/a&amp;gt;&lt;/code>，在需要回到顶部的位置放置一个 &lt;code>a&lt;/code> 标签，地址为 &lt;code>top&lt;/code>。 &lt;code>&amp;lt;a href=&amp;quot;#top&amp;quot;&amp;gt;回到顶部&amp;lt;/a&amp;gt;&lt;/code>。要做成隐藏的锚点，可以把内部的内容去掉，&lt;code>name&lt;/code> 是必须的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>利用 &lt;code>#&lt;/code>，&lt;strong>在 url 后增加 # 不会让页面刷新，并且可以回到顶部。&lt;/strong> 可以对 &lt;code>location.href&lt;/code> 进行设置 &lt;code>location.href += '#'&lt;/code>。当这个方法执行多次即有多个 # 时，页面不会有响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>利用 &lt;code>js&lt;/code> 设置 &lt;code>scrollTop = 0&lt;/code>，一般设置在最外层，即 &lt;code>document.documentElement.scrollTop = 0&lt;/code> 就可以返回顶部。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://jill-tone.com/html_title_alt/" target="_blank" rel="noopener"
>知らないと恥ずかしい？ title 属性と alt 属性の役割と違い・使い分け方【HTML】 – Jill Tone Blog&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　15</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/</link><pubDate>Wed, 29 Sep 2021 09:49:10 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/frontend-15-cover.jpg" alt="Featured image of post 毎日のフロントエンド　15" />&lt;h1 id="第十五日">第十五日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-title-与-h1-的区别b-与-strong-的区别i-与-em-的区别">&lt;strong>#Question:&lt;/strong> &lt;code>title&lt;/code> 与 &lt;code>h1&lt;/code> 的区别、&lt;code>b&lt;/code> 与 &lt;code>strong&lt;/code> 的区别、&lt;code>i&lt;/code> 与 &lt;code>em&lt;/code> 的区别&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>title&lt;/code>: 网页的标题，tag 标签标题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>h1&lt;/code>： 网页内部的标题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Attention:&lt;/strong> 如果 title 为空，但是页面存在 h1,b,strong 标签，搜索引擎会默认页面 title 为 h1 内的内容，所以 得出结论 h1 是在没有外界干扰下除 title 以外第二个能强调页面主旨的标记，在一个页面中应该使用且&lt;strong>只使用一次 h1 标记。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>b&lt;/code>： 加粗(bold)，是实体标签， 应当使用 CSS 而不是 &lt;code>&amp;lt;b&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>strong&lt;/code>: 语义化的 b， 属于逻辑标签。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Attention:&lt;/strong> 尽量使用 &lt;code>strong&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>i&lt;/code>： 斜体，是实体标签，应当使用 CSS 而不是 &lt;code>&amp;lt;i&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>em&lt;/code>: 语义化的&lt;code>i&lt;/code>，逻辑标签， &lt;code>i&lt;/code>, &lt;code>em&lt;/code> 同样表示强调，但是成都没有 &lt;code>strong&lt;/code> 高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Attention:&lt;/strong> 物理元素是告诉浏览器我应该以何种格式显示文字，逻辑元素告诉浏览器这些文字有怎么样的重要性。对于搜索引擎来说&lt;code>em&lt;/code>和&lt;code>strong&lt;/code>比 i 和 b 要重视。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-style标签写在-body前和-body后的区别是什么">&lt;strong>#Question:&lt;/strong> &lt;code>style&lt;/code>标签写在 body&lt;em>前&lt;/em>和 body&lt;em>后&lt;/em>的区别是什么？&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>写在 body 标签前利于浏览器逐步渲染&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写在 body 标签后：由于浏览器以逐行方式对 html 文档进行解析；当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染； 在 windows 的 IE 下可能会出现 FOUC 现象（即样式失效导致的页面闪烁问题）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>加载和执行的一些优化点&lt;/p>
&lt;ul>
&lt;li>CSS 样式表置顶 （阻塞页面渲染）&lt;/li>
&lt;li>用 &lt;code>&amp;lt;link&amp;gt;&lt;/code> 代替&lt;code>@import&lt;/code> （&lt;code>@import&lt;/code> 是 CSS，不会触发浏览器并发机制；在 CSS 加载完成后进行的引入。 但现代浏览器&lt;code>@import&lt;/code> 和 &lt;code>link&lt;/code> 在表现上已经没有上述区别了）&lt;/li>
&lt;li>js 脚本置底（因为浏览器有并发限制，所以把 js 放到下边，减少占用的并发数，使得页面能够更快的渲染出来）合理使用 js 的异步加载能力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-写一个数组去重的方法支持多维数组">&lt;strong>#Question:&lt;/strong> 写一个数组去重的方法（支持多维数组）&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">flatArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">flatArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">midArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="nx">flatArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">uniqueArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">midArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">))];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">uniqueArr&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]]]);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1,2,3,4,6
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">uniqueArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">flat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">Infinity&lt;/span>&lt;span class="p">))];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>&lt;code>flat()&lt;/code> method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>flat()&lt;/code> has two alternatives: &lt;code>reduce&lt;/code> and &lt;code>concat&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://webtan.impress.co.jp/e/2013/09/06/15972" target="_blank" rel="noopener"
>title タグと h1 タグは完全同一がいい? 違ってもいい? どう使い分ける? など 10+4 記事&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://nandemo-nobiru.com/2096/" target="_blank" rel="noopener"
>文字を強調するタグ strong・b・em・i の違いと SEO 効果&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener"
>Array.prototype.flat() - JavaScript | MDN&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>React HooksのUseState</title><link>https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/</link><pubDate>Wed, 29 Sep 2021 00:28:55 +0900</pubDate><guid>https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/</guid><description>&lt;img src="https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/hooks-cover.jpg" alt="Featured image of post React HooksのUseState" />&lt;h1 id="usestate-让函数组建具有维持状态的能力">useState: 让函数组建具有维持状态的能力&lt;/h1>
&lt;h2 id="example">Example&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">useState&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Example&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setCount&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/p&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">button&lt;/span> &lt;span class="nx">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">setCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)}&lt;/span>&lt;span class="o">&amp;gt;+&amp;lt;&lt;/span>&lt;span class="err">/button&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage">Usage&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;code>useState(initialState)&lt;/code> 参数 &lt;code>initialState&lt;/code> 是创建 state 的初始值， 它可以是&lt;strong>任意类型&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>useState()&lt;/code>的返回值是一个有着两个元素的数组。 第一个数组元素用来读取 &lt;code>state&lt;/code> 的值， 第二个则是用来设置这个 state 的值的函数。 &lt;code>state&lt;/code>为只读变量， 且必须通过&lt;code>setCount&lt;/code>来设置 &lt;code>state&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果要创建多个 state， 需要多次调用&lt;code>useState&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">age&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setAge&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">99&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">fruit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setFruit&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;banana&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setTodos&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">([{&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;react hooks&amp;#39;&lt;/span> &lt;span class="p">}]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="principles">Principles&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;code>useState&lt;/code>中的 set 与 &lt;code>class&lt;/code> 组件中 &lt;code>setState&lt;/code> 类似， 但是 class 组件中的 state 只有一个，因此在类组件中，一般采用&lt;strong>对象作为一个 state&lt;/strong>； &lt;code>useState&lt;/code>可以多次创建，更加语义化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>state&lt;/code>中&lt;strong>永远不要保存可以通过计算得到的值。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>从 props 传递过来的值&lt;/strong>。 sometimes props 传递过来的值无法直接使用，而是需要通过一定的计算后再在 UI 上展示， 比如排序等。 此时， 在需要使用此数据的时候都重新排序，或者， 利用缓存机制， 而不是将结果直接置入&lt;code>state&lt;/code>&lt;/li>
&lt;li>&lt;strong>从&lt;code>URL&lt;/code>中读取的值&lt;/strong>。 例如，有时需要读取 url 中的参数，作为组件的一部分状态。 此时， 应在需要的时候读取，而不是存入 state&lt;/li>
&lt;li>&lt;strong>&lt;code>cookies&lt;/code> &lt;code>localStorage&lt;/code>中读取的值&lt;/strong>，应每次都去读取。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>毎日のフロントエンド　14</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/</link><pubDate>Tue, 28 Sep 2021 15:34:08 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/frontend-14-cover.jpg" alt="Featured image of post 毎日のフロントエンド　14" />&lt;h1 id="第十四日">第十四日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-为什么-html5-只需要写-doctype-html-就可以">&lt;strong>#Question:&lt;/strong> 为什么 HTML5 只需要写 &lt;code>&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/code> 就可以？&lt;/h3>
&lt;blockquote>
&lt;p>The html document type declaration, also known as &lt;code>DOCTYPE&lt;/code>, is the first line of code required in every HTML or xHTML document. The &lt;code>DOCTYPE&lt;/code> declaration us an instruction to the web browser about what version of HTML the page is written in. This ensures that the web page is parsed the same way by different web browsers.&lt;/p>
&lt;/blockquote>
&lt;p>The declaration of &lt;code>HTML5&lt;/code> &lt;code>DOCTYPE&lt;/code> is much simpler: it no longer requires a reference to &lt;strong>DTDs&lt;/strong> as it is &lt;strong>no longer based on &lt;code>SGML&lt;/code>&lt;/strong>.&lt;/p>
&lt;p>Doctype syntax for HTML5 and beyond:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>HTML5 与 HTML4 基于的基准不同。HTML4 基于 &lt;code>SGML&lt;/code> 因此需要除了 DOCTYPE 外还需要引入 &lt;code>DTD&lt;/code> 来告诉浏览器用什么标准进行渲染。DTD 还分为 &lt;em>标准模式、严格模式。&lt;/em>&lt;/p>
&lt;p>HTML5 不基于 SGML，因此后面就不要跟 DTD，但是需要 DOCTYPE 来规范浏览器的渲染行为。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>SGML&lt;/code> 是通用标记语言的集合。其中有 HTML、XML，因此需要用 DTD 来指定使用那种规范。&lt;/p>
&lt;/blockquote>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-positionfixed-在-ios-下无效该怎么办">&lt;strong>#Question:&lt;/strong> &lt;code>position:fixed;&lt;/code> 在 ios 下无效该怎么办？&lt;/h3>
&lt;p>移动端业务开发，iOS 下经常会有 fixed 元素和输入框(input 元素)同时存在的情况。 但是 fixed 元素在有软键盘唤起的情况下，会出现许多莫名其妙的问题。&lt;/p>
&lt;p>现象： 当采用 fixed 做吸底、吸顶布局时，如果触发键盘弹出事件则 fixed 属性会失效，布局就会被扰乱。其原因解释如下：&lt;/p>
&lt;p>软键盘唤起后，页面的 fixed 元素将失效（即无法浮动，也可以理解为变成了 absolute 定位），所以当页面超过一屏且滚动时，失效的 fixed 元素就会跟随滚动了。&lt;/p>
&lt;ul>
&lt;li>第三方库 &lt;strong>&lt;code>isScroll.js&lt;/code>&lt;/strong> 可以解决此问题。&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-什么是闭包优缺点分别是什么-what-is-a-closure">&lt;strong>#Question:&lt;/strong> 什么是闭包？优缺点分别是什么？ What is a Closure?&lt;/h3>
&lt;blockquote>
&lt;p>Closures is are frequently &lt;strong>used in JavaScript for object data privacy&lt;/strong>, in evently handlers and callback functions, and in partial application, currying(柯里化)，and other functional programming patterns.&lt;/p>
&lt;/blockquote>
&lt;h4 id="what-is-closure">What is Closure?&lt;/h4>
&lt;p>A closure is the combination of a function bundled together with references to &lt;strong>its surrounding state&lt;/strong> (the &lt;strong>lexical environment&lt;/strong>). In other words, &lt;strong>a closure gives you access to an outer function&amp;rsquo;s scope from an inner one.&lt;/strong>&lt;/p>
&lt;p>IN JavaScript, closures are created every time a function is created, at function creation time.&lt;/p>
&lt;p>To use a closure, define a function inside another function and expose it. To expose a function, return it or pass it to another function.&lt;/p>
&lt;p>The inner function will have access to the variables in the outer one&amp;rsquo;s scope, even after the outer function has returned.&lt;/p>
&lt;h4 id="examples">Examples&lt;/h4>
&lt;p>Data privacy is an essential property that helps us &lt;strong>program to an interface, not an implementation.&lt;/strong> And among other things, closures are commonly used to give objects data privacy.&lt;/p>
&lt;p>This is an important concept that helps us build more robust software because implementation details are more likely to change in breaking ways than interface contracts.&lt;/p>
&lt;p>In javascript, closures are the primary mechanism used to enable data privacy. When you use closures for data privacy, the enclosed varibles are only in scope within the containing (outer) function. You can&amp;rsquo;t get at the data from an outside scope except through the object&amp;rsquo;s provileged methods.&lt;/p>
&lt;p>闭包是可以访问另一个函数作用域的函数。由于 javascript 的特性，外层的函数无法访问内部函数的变量；而内部函数可以访问外部函数的变量（即作用域链）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 这个函数就是个闭包，可以访问外层 a 函数的变量
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>使用闭包可以&lt;strong>隐藏变量&lt;/strong>以及&lt;strong>防止变量被篡改和作用域的污染&lt;/strong>，从而实现封装&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点就是由于保留了作用域链，会增加内存的开销。因此需要注意内存的使用，并且防止内存泄露的问题。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.freecodecamp.org/news/what-is-the-doctype-declaration-in-html/" target="_blank" rel="noopener"
>What is the DOCTYPE Declaration in HTML?&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://efe.baidu.com/blog/mobile-fixed-layout/" target="_blank" rel="noopener"
>Web 移动端 Fixed 布局的解决方案 | EFE Tech&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://cnodejs.org/topic/5d39c5259969a529571d73a8" target="_blank" rel="noopener"
>关于闭包 - CNode 技术社区&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　13</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/</link><pubDate>Mon, 27 Sep 2021 21:33:31 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/frontend-13-cover.jpg" alt="Featured image of post 毎日のフロントエンド　13" />&lt;h1 id="第十三日">第十三日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-html5-中的-form-怎么关闭自动完成">&lt;strong>#Question:&lt;/strong> html5 中的 &lt;code>form&lt;/code> 怎么关闭自动完成？&lt;/h3>
&lt;p>操作表单 &lt;code>form&lt;/code> 的 &lt;code>autocomplete&lt;/code> 属性值, 默认是开启的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">action&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;demo_form.html&amp;#34;&lt;/span> &lt;span class="na">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;get&amp;#34;&lt;/span> &lt;span class="na">autocomplete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;off&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
First name:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fname&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
E-mail: &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;email&amp;#34;&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;email&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;submit&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-before和after中单冒号和双冒号的区别是什么这两个伪元素有什么作用">&lt;strong>#Question:&lt;/strong> &lt;code>::before&lt;/code>和&lt;code>:after&lt;/code>中单冒号和双冒号的区别是什么，这两个伪元素有什么作用&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;code>:&lt;/code>表示伪类，是一种样式，比如&lt;code>:hover&lt;/code>, &lt;code>:active&lt;/code> 等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>::&lt;/code>表示伪元素，是具体的内容，比如&lt;code>::before&lt;/code> 是在元素前面插入内容，&lt;code>::after&lt;/code> 则是在元素后面插入内容，不过需要 &lt;code>content&lt;/code> 配合，并且插入的内容是&lt;code> inline&lt;/code> 的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:before&lt;/code> 和 &lt;code>:after&lt;/code> 其实还是表示伪元素，在 css3 中已经修订为&lt;code>::before&lt;/code> 和&lt;code>::after&lt;/code> 了，只是为了能兼容 IE 浏览器，所以也可以表示成&lt;code>:before&lt;/code> 和&lt;code>:after&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-说说你对-javascript-的作用域的理解">&lt;strong>#Question:&lt;/strong> 说说你对 javascript 的作用域的理解&lt;/h3>
&lt;p>作用域就是一块封闭的区域，外部不能访问到这块区域里的变量、函数等，被{}包裹的就叫一个作用域（全局作用域是特殊的）&lt;/p>
&lt;ul>
&lt;li>函数作用域&lt;/li>
&lt;li>全局作用域&lt;/li>
&lt;li>块作用域&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>变量提升&lt;/strong>：在用 var 或者 function 声明一个变量和函数时，变量和函数会被提升到函数的顶部&lt;/p>
&lt;h2 id="soft-skills">Soft Skills&lt;/h2>
&lt;h3 id="question-http-都有哪些状态码">&lt;strong>#Question:&lt;/strong> http 都有哪些状态码&lt;/h3>
&lt;p>&lt;a class="link" href="https://tool.oschina.net/commons?type=5" target="_blank" rel="noopener"
>HTTP 状态码 对照详解&lt;/a>&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/wonyun/p/5807191.html" target="_blank" rel="noopener"
>css 伪元素:before 和:after 用法详解&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　12</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/</link><pubDate>Sun, 26 Sep 2021 23:36:48 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/frontend-12-cover.jpg" alt="Featured image of post 毎日のフロントエンド　12" />&lt;h1 id="第十二日">第十二日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h3 id="question-常见的浏览器内核都有哪些并介绍下你对内核的理解">&lt;strong>#Question:&lt;/strong> 常见的浏览器内核都有哪些？并介绍下你对内核的理解&lt;/h3>
&lt;p>内核主要分为&lt;em>渲染引擎&lt;/em>和 &lt;em>JS 引擎&lt;/em>。前者负责页面的渲染，后者负责执行解析 JavaScript。之后，由于 JS 引擎越来越独立，现在所说的&lt;strong>浏览器内核大都指渲染引擎&lt;/strong>&lt;/p>
&lt;p>目前主流的内核有以下 4 个：&lt;/p>
&lt;ul>
&lt;li>Trident: 由微软开发，即我们熟知的 IE 内核&lt;/li>
&lt;li>Gecko: 使用 C++ 开发的渲染引擎，包括了 SpiderMonkey 即我们熟悉的 FireFox&lt;/li>
&lt;li>Presto: Opera 使用的内核&lt;/li>
&lt;li>&lt;strong>&lt;code>Webkit&lt;/code>&lt;/strong>: &lt;code>Safari&lt;/code> 使用的内核&lt;/li>
&lt;li>&lt;strong>Chrome 浏览器内核：&lt;/strong> 统称为 &lt;code>Chromium&lt;/code> 内核，以前是 &lt;code>Webkit&lt;/code> 内核，现在是&lt;code>Blink&lt;/code>内核&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h3 id="question-说说你对-css-盒子模型的理解">&lt;strong>#Question:&lt;/strong> 说说你对 css 盒子模型的理解&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>基本概念&lt;/p>
&lt;ul>
&lt;li>标准(W3C)盒子模型(&lt;code>box-sizing: content-box;&lt;/code>)：包括 &lt;code>margin&lt;/code>,&lt;code>border&lt;/code>,&lt;code>padding&lt;/code>,&lt;code>content&lt;/code>,并且 &lt;code>content&lt;/code> 部分不包括其他部分
&lt;figure
class="gallery-image"
style="
flex-grow: 164;
flex-basis: 393px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/standard-box.png" data-size="732x446">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/standard-box.png"
width="732"
height="446"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/standard-box_hu0fdd56d10e50bdee27486adb335d3555_196883_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/standard-box_hu0fdd56d10e50bdee27486adb335d3555_196883_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="标准盒子模型">
&lt;/a>
&lt;figcaption>标准盒子模型&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;li>IE 盒子模型(&lt;code>box-sizing: border-box;&lt;/code>)：包括 &lt;code>margin&lt;/code>,&lt;code>border&lt;/code>,&lt;code>padding&lt;/code>,&lt;code>content&lt;/code>，&lt;code>content&lt;/code>包含了&lt;code>border&lt;/code>和&lt;code>padding&lt;/code>
&lt;figure
class="gallery-image"
style="
flex-grow: 171;
flex-basis: 410px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/IE-box.png" data-size="732x428">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/IE-box.png"
width="732"
height="428"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/IE-box_huc487061706811e53eb58476d1bb0f4ce_169367_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/IE-box_huc487061706811e53eb58476d1bb0f4ce_169367_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="IE盒子模型">
&lt;/a>
&lt;figcaption>IE盒子模型&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>补充说明：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>CSS&lt;/code>盒模型， 有内外两个部分。 外部属性 控制盒子本体是否占满一整行； 内部则控制：内部元素的属性。 例如：&lt;code>display: inline-block&lt;/code>,外部是，&lt;code>inline&lt;/code> 不占据整行； 内部是 &lt;code>block&lt;/code>则表明内部遵循块状特性。 因此， &lt;code>display: inline;&lt;/code> 可理解为 &lt;code>display: inline-inline;&lt;/code>， &lt;code>display: block;&lt;/code> 可理解为 &lt;code>display: block-block;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>display: inline-block&lt;/code> 简单来说就是将对象呈现为 &lt;code>inline&lt;/code> 对象，但是&lt;strong>对象的内容&lt;/strong>作为 &lt;code>block&lt;/code> 对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个 link（a 元素）inline-block 属性值，使其既具有 block 的宽度高度特性又具有 inline 的同行特性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>width/height, padding, border, margin&lt;/code> 这几个控制盒子大小的属性。 其中 &lt;code>width/height&lt;/code> 控制元素内容大小； &lt;code>margin&lt;/code> 控制元素与其他元素的距离（&lt;code>margin&lt;/code>的背景色透明， 元素 background-color，只影响到 border）； &lt;code>border&lt;/code> 是元素外围边框； &lt;code>padding&lt;/code> 控制元素内容到 border 的距离&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;h3 id="question-写一个获取当前-url-查询字符串中的参数的方法">&lt;strong>#Question:&lt;/strong> 写一个获取当前 url 查询字符串中的参数的方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">urlParams&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">search&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">search&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">search&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">search&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">search&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;amp;&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">decodeURIComponent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">urlParam&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/([^&amp;amp;=?]+)=([^&amp;amp;]+)/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">c1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">c2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="soft-skills">Soft Skills&lt;/h2>
&lt;h3 id="question-网页应用从服务器主动推送到客户端有那些方式">&lt;strong>#Question:&lt;/strong> 网页应用从服务器主动推送到客户端有那些方式&lt;/h3>
&lt;p>&lt;strong>&lt;code>WebSocket&lt;/code>&lt;/strong>&lt;/p>
&lt;p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议&lt;/p>
&lt;p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。&lt;/p>
&lt;p>&lt;strong>&lt;code>eventsource(SSE)&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>EventSource&lt;/code> 接口是 Web 内容与服务器发送的事件的接口。一个 &lt;code>EventSource&lt;/code> 实例打开一个持久连接 &lt;code>HTTP&lt;/code> 服务器，它发送事件的 &lt;code>text/event-stream&lt;/code> 格式。连接保持打开状态，直到通过调用关闭 &lt;code>EventSource.close()&lt;/code>。&lt;/p>
&lt;p>与 &lt;code>WebSocket&lt;/code> 不同，服务器发送的事件是单向的。也就是说，数据消息是从服务器到客户端（例如用户的 Web 浏览器）沿一个方向传递的&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/goloving/p/9196066.html" target="_blank" rel="noopener"
>SSE 技术详解：使用 HTTP 做服务端数据推送应用的技术&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;code>Web Push&lt;/code>&lt;/strong>&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://segmentfault.com/a/1190000015235886" target="_blank" rel="noopener"
>面试官：谈谈你对 CSS 盒模型的认识?&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/keithwang/p/3139517.html" target="_blank" rel="noopener"
>block，inline 和 inline-block 概念和区别&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　11</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/</link><pubDate>Sat, 25 Sep 2021 23:02:39 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/frontend-11-cover.jpg" alt="Featured image of post 毎日のフロントエンド　11" />&lt;h1 id="第十一日">第十一日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 你对标签语义化的理解是什么？&lt;/p>
&lt;h3 id="什么是-html-语义化标签">什么是 HTML 语义化标签&lt;/h3>
&lt;p>语义化的标签，旨在让标签有自己的含义。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>一行文字&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>一行文字&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如上代码，&lt;code>p&lt;/code> 标签与 &lt;code>span&lt;/code> 标签都区别之一就是，&lt;code>p&lt;/code> 标签的含义是：段落。而 &lt;code>span&lt;/code> 标签责没有独特的含义。&lt;/p>
&lt;h3 id="语义化标签的优势">语义化标签的优势&lt;/h3>
&lt;ul>
&lt;li>语义化更具有可读性，便于团队开发维护&lt;/li>
&lt;li>在没有 css 的情况下，页面也可以呈现出也很好的内容结构和代码结构&lt;/li>
&lt;li>&lt;code>SEO&lt;/code>，搜索引擎能更好的理解页面中各部分的关系，可更快更准确的搜索到信息&lt;/li>
&lt;/ul>
&lt;h3 id="常见的语义化标签">常见的语义化标签&lt;/h3>
&lt;blockquote>
&lt;p>因此我们在写页面结构时，应尽量使用有 语义的 HTML 标签&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>&amp;lt;title&amp;gt;&lt;/code>：页面主体内容。&lt;/li>
&lt;li>&lt;code>&amp;lt;hn&amp;gt;&lt;/code>：h1~h6，分级标题，&lt;!-- raw HTML omitted --> 与 &lt;!-- raw HTML omitted --> 协调有利于搜索引擎优化。&lt;/li>
&lt;li>&lt;code>&amp;lt;ul&amp;gt;&lt;/code>：无序列表。&lt;/li>
&lt;li>&lt;code>&amp;lt;li&amp;gt;&lt;/code>：有序列表。&lt;/li>
&lt;li>&lt;code>&amp;lt;header&amp;gt;&lt;/code>：页眉通常包括网站标志、主导航、全站链接以及搜索框。&lt;/li>
&lt;li>&lt;code>&amp;lt;nav&amp;gt;&lt;/code>：标记导航，仅对文档中重要的链接群使用。&lt;/li>
&lt;li>&lt;code>&amp;lt;main&amp;gt;&lt;/code>：页面主要内容，一个页面只能使用一次。如果是 web 应用，则包围其主要功能。&lt;/li>
&lt;li>&lt;code>&amp;lt;article&amp;gt;&lt;/code>：定义外部的内容，其中的内容独立于文档的其余部分。&lt;/li>
&lt;li>&lt;code>&amp;lt;section&amp;gt;&lt;/code>：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。&lt;/li>
&lt;li>&lt;code>&amp;lt;aside&amp;gt;&lt;/code>：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。&lt;/li>
&lt;li>&lt;code>&amp;lt;footer&amp;gt;&lt;/code>：页脚，只有当父级是 body 时，才是整个页面的页脚。&lt;/li>
&lt;li>&lt;code>&amp;lt;small&amp;gt;&lt;/code>：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。&lt;/li>
&lt;li>&lt;code>&amp;lt;strong&amp;gt;&lt;/code>：和 em 标签一样，用于强调文本，但它强调的程度更强一些。&lt;/li>
&lt;li>&lt;code>&amp;lt;em&amp;gt;&lt;/code>：将其中的文本表示为强调的内容，表现为斜体。&lt;/li>
&lt;li>&lt;code>&amp;lt;mark&amp;gt;&lt;/code>：使用黄色突出显示部分文本。&lt;/li>
&lt;li>&lt;code>&amp;lt;figure&amp;gt;&lt;/code>：规定独立的流内容（图像、图表、照片、代码等等）（默认有 40px 左右 margin）。&lt;/li>
&lt;li>&lt;code>&amp;lt;figcaption&amp;gt;&lt;/code>：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。&lt;/li>
&lt;li>&lt;code>&amp;lt;cite&amp;gt;&lt;/code>：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。&lt;/li>
&lt;li>&lt;code>&amp;lt;blockquoto&amp;gt;&lt;/code>：定义块引用，块引用拥有它们自己的空间。&lt;/li>
&lt;li>&lt;code>&amp;lt;q&amp;gt;&lt;/code>：短的引述（跨浏览器问题，尽量避免使用）。&lt;/li>
&lt;li>&lt;code>&amp;lt;time&amp;gt;&lt;/code>：datetime 属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。&lt;/li>
&lt;li>&lt;code>&amp;lt;abbr&amp;gt;&lt;/code>：简称或缩写。&lt;/li>
&lt;li>&lt;code>&amp;lt;dfn&amp;gt;&lt;/code>：定义术语元素，与定义必须紧挨着，可以在描述列表 dl 元素中使用。&lt;/li>
&lt;li>&lt;code>&amp;lt;address&amp;gt;&lt;/code>：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。&lt;/li>
&lt;li>&lt;code>&amp;lt;del&amp;gt;&lt;/code>：移除的内容。&lt;/li>
&lt;li>&lt;code>&amp;lt;ins&amp;gt;&lt;/code>：添加的内容。&lt;/li>
&lt;li>&lt;code>&amp;lt;code&amp;gt;&lt;/code>：标记代码。&lt;/li>
&lt;li>&lt;code>&amp;lt;meter&amp;gt;&lt;/code>：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）&lt;/li>
&lt;li>&lt;code>&amp;lt;progress&amp;gt;&lt;/code>：定义运行中的进度（进程）。&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> css 常用的布局方式有哪些？&lt;/p>
&lt;ul>
&lt;li>流式布局: 最基本的布局，就是顺着 html 像流水一样流下来&lt;/li>
&lt;li>绝对定位: 利用 position: absolute 进行绝对定位的布局&lt;/li>
&lt;li>&lt;code>float&lt;/code> 布局: 最初用来解决多栏布局的问题。比如 圣杯、双飞翼 的布局都可以用 float 来实现&lt;/li>
&lt;li>珊格布局: bootstrap 用的布局，把页面分为 24 分，通过 row 和 col 进行布局&lt;/li>
&lt;li>&lt;code>flex&lt;/code> 布局: css3 的布局可以非常灵活地进行布局和排版&lt;/li>
&lt;li>&lt;code>grid&lt;/code> 布局: 网格布局&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 简要描述下 JS 有哪些内置的对象 &lt;code>built-in objects&lt;/code>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener"
>JavaScript 标准内置对象 - JavaScript | MDN&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://segmentfault.com/a/1190000011467723" target="_blank" rel="noopener"
>JS 所有内置对象属性和方法汇总 - SegmentFault 思否&lt;/a>&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://segmentfault.com/a/1190000011467723" target="_blank" rel="noopener"
>JS 所有内置对象属性和方法汇总&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener"
>JavaScript 标准内置对象 - JavaScript | MDN&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　10</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/</link><pubDate>Thu, 23 Sep 2021 23:39:38 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/frontend-10-cover.jpg" alt="Featured image of post 毎日のフロントエンド　10" />&lt;h1 id="第十日">第十日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> viewport 常见设置都有哪些？&lt;/p>
&lt;p>&lt;code>viewport&lt;/code> 就是视区窗口，也就是浏览器中显示网页的部分。PC 端上基本等于设备显示区域，但在移动端上&lt;code>viewport&lt;/code> 会超出设备的显示区域 (即会有横向滚动条出现)。设备默认的 &lt;code>viewport&lt;/code> 在 &lt;code>980 - 1024&lt;/code> 之间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>设置&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>width&lt;/td>
&lt;td>设置 layout viewport 的宽度，为一个正整数，或字符串&amp;quot;width-device&amp;quot;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>initial-scale&lt;/td>
&lt;td>设置页面的初始缩放值，为一个数字，可以带小数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>minimum-scale&lt;/td>
&lt;td>允许用户的最小缩放值，为一个数字，可以带小数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maximum-scale&lt;/td>
&lt;td>允许用户的最大缩放值，为一个数字，可以带小数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>height&lt;/td>
&lt;td>设置 layout viewport 的高度，这个属性对我们并不重要，很少使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>user-scalable&lt;/td>
&lt;td>是否允许用户进行缩放，值为&amp;quot;no&amp;quot;或&amp;quot;yes&amp;quot;, no 代表不允许，yes 代表允许&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">// width=device-width, initial-scale=1.0 是为了兼容不同浏览器
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span>
&lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span>
&lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&amp;#34;&lt;/span>
&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>dpr 与 CSS 像素。CSS 像素的 1px 在 PC 端上与设备的物理像素基本一致，而到手机端就会有两个物理像素对应一个 CSS 像素的情况出现（如 iPhone 的视网膜屏）。 所以 iPhone 上的 dpr = 2 即 2 个物理像素 / 一个 CSS 像素（独立像素）&lt;/p>
&lt;/blockquote>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 对比下 px、em、rem 有什么不同？&lt;/p>
&lt;p>&lt;code>px&lt;/code>、&lt;code>em&lt;/code>、&lt;code>rem&lt;/code> 都是计量单位，都能表示&lt;em>尺寸&lt;/em>，但是有有所不同，而且其各有各的优缺点。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>px&lt;/code>表示“绝对尺寸”（并非真正的绝对），实际上就是 css 中定义的像素（此像素与设备的物理像素有一定的区别，后续详细说明见文末说明 1），利用 px 设置字体大小及元素宽高等比较稳定和精确。Px 的缺点是其不能适应浏览器缩放时产生的变化，因此一般不用于响应式网站。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>em&lt;/code>表示&lt;strong>相对尺寸&lt;/strong>, 其相对于当前对象内文本的 &lt;code>font-size&lt;/code>（如果当前对象内文本的 &lt;code>font-size&lt;/code> 计量单位也是 &lt;code>em&lt;/code>，则当前对象内文本的 &lt;code>font-size&lt;/code> 的参考对象为&lt;strong>父元素文本&lt;/strong> &lt;code>font-size&lt;/code>）。使用 &lt;code>em&lt;/code> 可以较好的相应设备屏幕尺寸的变化，但是在进行元素设置时都需要知道父元素文本的 &lt;code>font-size&lt;/code> 及当前对象内文本的 &lt;code>font-size&lt;/code>，如有遗漏可能会导致错误。&lt;/p>
&lt;ul>
&lt;li>&lt;code>em&lt;/code>子元素字体大小&lt;code>font-size&lt;/code> 的 &lt;code>em&lt;/code> 是 相对于 父元素的 &lt;code>font-size&lt;/code>&lt;/li>
&lt;li>子元素的 &lt;code>height width padding margin&lt;/code> 的 &lt;code>em&lt;/code> 值 是相对于 &lt;em>本元素&lt;/em>的&lt;code>font-size&lt;/code> 值&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
我是父元素div
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
我是子元素p
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>我是孙元素span&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* 400px */&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* 20px */&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* 200px */&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">red&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">span&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>rem&lt;/code> 其参考对象为&lt;strong>根元素 root&lt;/strong>的 &lt;code>font-size&lt;/code> 即 &lt;code>&amp;lt;html&amp;gt;&lt;/code>元素。通常做法是给 &lt;code>html&lt;/code> 元素设置一个字体大小，然后其他元素的长度单位就为 &lt;code>rem&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">html&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* 40px */&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* 300px */&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* 20px */&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">red&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">span&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.5&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当用 &lt;code>rem&lt;/code> 做响应式页面，直接在媒体中改变 &lt;code>html&lt;/code> 的 &lt;code>font-size&lt;/code> 那么用 &lt;code>rem&lt;/code> 作为单位的元素的大小都会相应改变，很方便。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>&lt;code>px&lt;/code>用于元素的边框或定位。 推荐使用 &lt;code>rem&lt;/code>(只有一个参照，方便管理)， em 容易出错&lt;/em>&lt;/strong>&lt;/p>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>&lt;strong>Question:&lt;/strong> 简要描述下什么是回调函数并写一个例子出来&lt;/p>
&lt;p>回调是把一个函数作为参数传递给另一个函数，当该函数满足某个条件时触发该参数函数。&lt;/p>
&lt;p>主要用于异步操作 例如网络请求 防止页面同步代码阻塞导致渲染线程停止&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">longTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">callback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timeout&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">callback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timeout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">longTask&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;回调任务被执行了&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;我是同步代码 不会阻塞我&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="noopener"
>移动前端开发之 viewport 的深入理解&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　9</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/</link><pubDate>Thu, 23 Sep 2021 16:48:11 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/frontend-9-cover.jpg" alt="Featured image of post 毎日のフロントエンド　9" />&lt;h1 id="第九日">第九日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 浏览器内多个标签页之间的通信方式有哪些？(网页间 消息 通讯)&lt;/p>
&lt;h3 id="是什么">是什么？&lt;/h3>
&lt;p>在浏览器中，两个不同页面（A 页面的 window ！= B 页面的 window）网页之间的消息传递&lt;/p>
&lt;h3 id="消息传递方式">消息传递方式&lt;/h3>
&lt;h4 id="1-websocket---可跨域">1. WebSocket - 可跨域&lt;/h4>
&lt;blockquote>
&lt;p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>&lt;a class="link" href="https://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener"
>WebSocket 教程&lt;/a>&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h4 id="2-postmessage---可跨域">2. postMessage - 可跨域&lt;/h4>
&lt;p>&lt;code>window.postMessage()&lt;/code> 方法安全地启用 Window 对象之间的跨源通信&lt;/p>
&lt;p>对将接收消息的窗口的引用，获得此类引用的方法包括：&lt;/p>
&lt;ol>
&lt;li>&lt;code>&amp;lt;iframe&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>Window.open&lt;/code> （生成一个新窗口然后引用它）&lt;/li>
&lt;li>&lt;code>Window.opener&lt;/code> （引用产生这个的窗口）&lt;/li>
&lt;/ol>
&lt;h4 id="3-worker-之-shareworker">3. Worker 之 ShareWorker&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>&lt;code>webworker&lt;/code>，作为浏览器的一个新特性，可以提供一个额外的线程来执行一些 js 代码（真正的多线程），并且不会影响到浏览器用户界面，但是不能 DOM 操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SharedWorker&lt;/code> 可以被多个 window 共同使用，所以可以用来跨页面传输数据，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="4-server-sent-events">4. Server-Sent Events&lt;/h4>
&lt;p>&lt;code>HTML5&lt;/code> 服务器发送事件（&lt;code>server-sent event&lt;/code>）允许网页获得来自服务器的更新。
&lt;code>Server-Sent&lt;/code> 事件指的是网页自动获取来自服务器的更新。&lt;/p>
&lt;h4 id="5-localstorage">5. localStorage&lt;/h4>
&lt;p>localstorage 是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信(ps：session 是会话级的存储空间，每个标签页都是单独的）。 直接在 window 对象上添加监听即可。&lt;/p>
&lt;h4 id="6-cookies">6. Cookies&lt;/h4>
&lt;p>Cookies 在同一个域名内，并且目录也得相同，可以参考第三方库&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/js-cookie/js-cookie" target="_blank" rel="noopener"
>js-cookie/js-cookie: A simple, lightweight JavaScript API for handling browser cookies&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="7-broadcastchannel">7. BroadcastChannel&lt;/h4>
&lt;p>只要是在同一原始域和用户代理下，所有窗口、iframe 之间都可以进行交互&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 简述下你理解的优雅降级和渐进增强&lt;/p>
&lt;h3 id="背景">背景&lt;/h3>
&lt;p>渐进增强和优雅降级这两个概念是在 CSS3 出现之后火起来的。由于低级浏览器不支持 CSS3，但是 CSS3 特效太优秀不忍放弃，所以在高级浏览器中使用 CSS3，而在低级浏览器只保证最基本的功能。二者的目的都是关注不同浏览器下的不同体验，但是它们侧重点不同，所以导致了工作流程上的不同。&lt;/p>
&lt;h3 id="渐进增强">渐进增强&lt;/h3>
&lt;p>渐进增强 &lt;code>（Progressive Enhancement）&lt;/code>：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>应关注于内容本身&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="优雅降级">优雅降级&lt;/h3>
&lt;p>优雅降级&lt;code>（Graceful Degradation）&lt;/code>：一开始就构建站点的完整功能，然后再针对低版本浏览器进行兼容。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>应针对最高级、最完善的浏览器来开发网站&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="用法简介">用法简介&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 130;
flex-basis: 313px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/frontend-9-inner.png" data-size="392x300">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/frontend-9-inner.png"
width="392"
height="300"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/frontend-9-inner_huc9c5c2ba690f77a4ed8157d24bf28ea8_26485_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/frontend-9-inner_huc9c5c2ba690f77a4ed8157d24bf28ea8_26485_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ol>
&lt;li>很久以前：浏览器前缀 CSS3 和正常 CSS3 都不支持&lt;/li>
&lt;li>不久之前：浏览器只支持前缀 CSS3，不支持正常 CSS3&lt;/li>
&lt;li>现在：浏览器既支持前缀 CSS3，又支持正常 CSS3&lt;/li>
&lt;li>未来：浏览器不支持前缀 CSS3，仅支持正常 CSS3&lt;/li>
&lt;/ol>
&lt;h3 id="如何选择">如何选择&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>若&lt;em>低版本&lt;/em>用户居多，则优先采用&lt;strong>渐进增强&lt;/strong>的开发流程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若&lt;em>高版本&lt;/em>用户居多，则为了提高大多数用户的使用体验，那当然优先采用&lt;strong>优雅降级&lt;/strong>的开发流程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多数大公司采用渐进增强的方式（通常业务优先）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 写一个判断数据类型的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">testType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^.{8}(.+)]$/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">$1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toLowerCase&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// typeof 只能判断 《基本类型》 string,number,boolean, undefined,object
&lt;/span>&lt;span class="c1">// null 会被判断成 object
&lt;/span>&lt;span class="c1">// toString()
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">([]);&lt;/span> &lt;span class="c1">//&amp;#34;[object Array]&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">({});&lt;/span> &lt;span class="c1">//&amp;#34;[object Object]&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">testType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\[object\s|\]/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">testType&lt;/span>&lt;span class="p">([]));&lt;/span> &lt;span class="c1">//&amp;#34;Array&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">testType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//&amp;#34;Number&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://xv700.gitee.io/message-communication-for-web/" target="_blank" rel="noopener"
>网页消息通信&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://segmentfault.com/a/1190000013818745" target="_blank" rel="noopener"
>前端面试题-渐进增强和优雅降级 - SegmentFault 思否&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　8</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/</link><pubDate>Wed, 22 Sep 2021 16:40:32 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/frontend-8-cover.jpg" alt="Featured image of post 毎日のフロントエンド　8" />&lt;h1 id="第八日">第八日&lt;/h1>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 清除浮动的方式有哪些及优缺点？&lt;/p>
&lt;ul>
&lt;li>现阶段 较多使用&lt;code>Flex&lt;/code> 布局&lt;/li>
&lt;li>浮动带来的问题是盒子塌陷问题&lt;/li>
&lt;/ul>
&lt;h4 id="什么是盒子塌陷">什么是盒子塌陷？&lt;/h4>
&lt;p>外部盒子本应该包裹住内部的浮动盒子，结果却没有&lt;/p>
&lt;h4 id="原因">原因&lt;/h4>
&lt;p>父元素只包含浮动元素，那么它的高度就会塌缩为零, 前提是没有设置高度&lt;code>height&lt;/code>属性，或者设置为 &lt;code>auto&lt;/code>，就会出现盒子塌陷，如果父元素不包含任何的可见背景，这个问题会很难被注意到。
因为子元素设置了 &lt;code>float&lt;/code> 属性，而 float 属性会把元素从标准文档流中抽离，直接结果就是外部盒子丢了两个孩子，因为内部没有其它盒子了，所以外部盒子只包裹文本节点内容，却把两个内部盒子扔在外面了。&lt;/p>
&lt;h4 id="解决方案">解决方案&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>把外部盒子也从标准文档流中抽离&lt;/p>
&lt;ul>
&lt;li>缺点是： 父元素加上 &lt;code>float&lt;/code> 有可能影响整个页面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在外部盒子内最下方添上带 clear 属性的空盒子： 把 &lt;code>&amp;lt;div style=&amp;quot;clear:both;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code>放在盒内底部&lt;/p>
&lt;/li>
&lt;li>
&lt;p>给外部盒子添加： &lt;code>overflow:hidden&lt;/code> 清除浮动&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用&lt;code>after&lt;/code>伪元素清除浮动&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">clearfix&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">\*&lt;/span>&lt;span class="n">zoom&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">clearfix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">before&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">clearfix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">after&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">table&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">clearfix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">after&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">clear&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">both&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>当然，还有前文提到的 &lt;code>BFC&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 写一个加密字符串的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">encodeStr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charCodeAt&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">decodeStr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fromCharCode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">decodeStr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">encodeStr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hello world&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">665&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">665&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　7</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/</link><pubDate>Tue, 21 Sep 2021 10:52:54 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/frontend-7-cover.jpg" alt="Featured image of post 毎日のフロントエンド　7" />&lt;h1 id="第七日">第七日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> iframe 框架都有哪些优缺点？&lt;/p>
&lt;p>The &lt;code>&amp;lt;iframe&amp;gt;&lt;/code> HTML element represents a nested browsing context, embedding another HTML page into the current one.&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="noopener"
>&lt;code>&amp;lt;iframe&amp;gt;&lt;/code>: The Inline Frame element - HTML: HyperText Markup Language | MDN&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/slices-of-bread/iframe-a-love-story-3dbe4e519b86" target="_blank" rel="noopener"
>iFrame — A love story. by Max Rafferty | Slices of Bread | Medium&lt;/a>&lt;/p>
&lt;p>Advantages of &lt;code>&amp;lt;iframe&amp;gt;&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>iframe&lt;/code> can display the embedded web page &lt;em>intact&lt;/em>.&lt;/li>
&lt;li>If there are multiple pages referencing iframe, you only need to modify the content of iframe, and then you can change the content of every page you call, which is convenient and fast.&lt;/li>
&lt;li>If the header and version of a web page are the same in order to unify the style, it can be written as a page, nested with iframe, which can increase code reusability.&lt;/li>
&lt;li>If you encounter slow loading third-party content such as icons and advertisements, these problems can be solved by iframe.&lt;/li>
&lt;li>可以实现跨域，每个 iframe 的源都可以不相同（方便引入第三方内容）&lt;/li>
&lt;/ul>
&lt;p>Disadvantages of &lt;code>&amp;lt;iframe&amp;gt;&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>Many pages will be generated, which is not easy to manage.&lt;/li>
&lt;li>Iframe frame structure sometimes makes people feel confused. If there are many frames, there may be up and down, left and right scrollbars, which will distract visitor&amp;rsquo;s attention and lead to poor user experience.&lt;/li>
&lt;li>The code is complex and can&amp;rsquo;t be indexed by some search engines, which is very important.&lt;/li>
&lt;li>Many mobile devices can not fully display the frame, and the device compatibility is poor.&lt;/li>
&lt;li>Iframe framework pages will increase the HTTP requests of the server, which is not advisable for large websites.&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 简述你对 &lt;strong>&lt;em>&lt;code>BFC&lt;/code>&lt;/em>&lt;/strong> 规范的理解&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener"
>Block formatting context - Developer guides | MDN&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>A &lt;strong>Block formatting Context&lt;/strong> is a part of a visual CSS rendering of a web page. It&amp;rsquo;s the region in which the layout of block boxesx occurs and in which floats intreract with other elements.&lt;/p>
&lt;p>A block formatting context is created bt at least one of the following:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The root element of the document &amp;mdash;- &lt;code>&amp;lt;html&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Floats (elements where &lt;code>float&lt;/code> &lt;em>isn&amp;rsquo;t&lt;/em> &lt;code>none&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Absolutely positioned elements (&lt;code>postion&lt;/code> is &lt;code>absolute&lt;/code> of &lt;code>fixed&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Inline-blocks (&lt;code>display: inline-block;&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Table cells (element with &lt;code>display: table-cell&lt;/code>, which is the default for HTML table cell.)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="是什么">是什么？&lt;/h3>
&lt;p>常见的&lt;code>Formatting Context&lt;/code>有 BFC、IFC（行级格式化上下文），还有 GFC（网格布局格式化上下文）和 FFC（自适应格式化上下文）&lt;/p>
&lt;p>&lt;code>BFC&lt;/code>是 &lt;strong>&lt;em>一个独立渲染区&lt;/em>&lt;/strong> 只有&lt;code>Block-level box&lt;/code>参与， 它规定了内部的&lt;code>Block-level Box&lt;/code>如何布局，并且与这个区域外部毫不相干。&lt;/p>
&lt;p>&lt;code>BFC&lt;/code> 是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。&lt;/p>
&lt;h3 id="解决了什么问题有什么作用">解决了什么问题(有什么作用)：&lt;/h3>
&lt;ul>
&lt;li>解决了 盒子内外的元素布局的相互影响，干扰。&lt;/li>
&lt;li>解决了 自适应两栏布局&lt;/li>
&lt;li>阻止父元素 高度坍塌（子元素都为 float 时，子元素脱离文档流 父元素不能被子元素撑开）（参考下文规则 6）&lt;/li>
&lt;li>可以阻止元素被浮动元素覆盖&lt;/li>
&lt;li>可以包含浮动元素——清除内部浮动&lt;/li>
&lt;li>分属于不同的 BFC 时可以阻止 margin 重叠&lt;/li>
&lt;/ul>
&lt;h3 id="如何触发-bfc">如何触发 &lt;code>BFC&lt;/code>&lt;/h3>
&lt;p>常用的四种方法：&lt;/p>
&lt;ol>
&lt;li>float &lt;code>is not&lt;/code> none&lt;/li>
&lt;li>position &lt;code>is not&lt;/code> static and relative (is fixed or absolute)&lt;/li>
&lt;li>overflow &lt;code>is&lt;/code> auto scroll and hidden&lt;/li>
&lt;li>display &lt;code>is&lt;/code> table-cell or inline-block&lt;/li>
&lt;/ol>
&lt;h3 id="bfc-的-布局规则">&lt;code>BFC&lt;/code> 的 布局规则&lt;/h3>
&lt;ol>
&lt;li>内部的 &lt;code>Box&lt;/code> 会在垂直方向，一个接一个地放置。&lt;/li>
&lt;li>&lt;code>Box&lt;/code> 垂直方向的距离由 &lt;code>margin&lt;/code> 决定。属于同一个 &lt;code>BFC&lt;/code> 的两个相邻 &lt;code>Box&lt;/code> 的 &lt;code>margin&lt;/code> 会发生重叠&lt;/li>
&lt;li>每个元素的 &lt;code>margin box&lt;/code> 的左边， 与包含块 &lt;code>border box&lt;/code> 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。&lt;/li>
&lt;li>&lt;code>BFC&lt;/code> 的区域不会与 &lt;code>float box&lt;/code> 重叠。&lt;/li>
&lt;li>&lt;code>BFC&lt;/code> 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。&lt;/li>
&lt;li>计算 &lt;code>BFC&lt;/code> 的高度时，浮动元素也参与计算， 相当于清除了内部浮动。&lt;/li>
&lt;/ol>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 统计某一字符或字符串在另一个字符串中出现的次数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">substrCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;abcdef abcdef a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">substrCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">includes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">substrCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://developpaper.com/what-are-the-advantages-and-disadvantages-of-iframe/" target="_blank" rel="noopener"
>What are the advantages and disadvantages of iframe? | Develop Paper&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/6844903476774830094" target="_blank" rel="noopener"
>[布局概念] 关于 CSS-BFC 深入理解 - 掘金&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=Onhu2DlmHAk" target="_blank" rel="noopener"
>[Jelly College] CSS tutorial lesson8:How to understand BFC quickly - YouTube&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　6</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/</link><pubDate>Mon, 20 Sep 2021 16:14:06 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/frontend-6-cover.jpg" alt="Featured image of post 毎日のフロントエンド　6" />&lt;h1 id="第六日">第六日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> label 都有哪些作用？并举相应的例子说明&lt;/p>
&lt;p>The &lt;code>&amp;lt;label&amp;gt;&lt;/code> HTML element represents a caption for an item in a user interface.&lt;/p>
&lt;p>表示用户界面中某个元素的说明。&lt;/p>
&lt;p>Associating a &lt;code>&amp;lt;label&amp;gt;&lt;/code> with an &lt;code>&amp;lt;input&amp;gt;&lt;/code> element offers some major advantages:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A screen reader will read out the label when the user is focused on the form &lt;code>&amp;lt;input&amp;gt;&lt;/code>, making it easier for an assistive technology user to understand what data should be entered.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When a user clicks or touches a label, the browser passes the focus to its associated input.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Attribute&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;code>for&lt;/code>: The value of the for attritue must be a single &lt;code>id&lt;/code> for a &lt;code>labelable&lt;/code> form-related element in the same document as the &lt;code>&amp;lt;label&amp;gt;&lt;/code> element.&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://demo.cssworld.cn/6/4-3.php" target="_blank" rel="noopener"
>focus 锚点定位和 overflow 的选项卡切换效果 » CSS 世界 demo 演示&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://codepen.io/mts123/pen/EzqdbM" target="_blank" rel="noopener"
>100dayscss-051&lt;/a>&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 用 css 创建一个三角形，并简述原理&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 242px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/css-box.png" data-size="499x494">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/css-box.png"
width="499"
height="494"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/css-box_hudbcf341c124358461fa3650f2ccd774f_15606_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/css-box_hudbcf341c124358461fa3650f2ccd774f_15606_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="css - 盒子模型">
&lt;/a>
&lt;figcaption>css - 盒子模型&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>一个盒子包括: margin+border+padding+content&lt;/li>
&lt;li>上下左右边框交界处出呈现平滑的斜线. 利用这个特点, 通过设置不同的上下左右边框宽度或者颜色可以得到小三角, 小梯形等&lt;/li>
&lt;li>调整宽度大小可以调节三角形形状&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>设置盒子的宽高度, 及上下左右边框, 会如下图：
&lt;figure
class="gallery-image"
style="
flex-grow: 102;
flex-basis: 247px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-1.gif" data-size="69x67">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-1.gif"
width="69"
height="67"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-1_hud2412fbd19246be69c29834d1e9c23c9_465_480x0_resize_box.gif 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-1_hud2412fbd19246be69c29834d1e9c23c9_465_1024x0_resize_box.gif 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">#&lt;/span>&lt;span class="nn">test1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#ff9600&lt;/span> &lt;span class="mh">#3366ff&lt;/span> &lt;span class="mh">#12ad2a&lt;/span> &lt;span class="mh">#f0eb7a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* border-style: solid; */&lt;/span>
&lt;span class="c">/* border-width: 20px; */&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>在上面基础上, 我们把宽高度都设为 0 时, 会呈现上述的边界斜线
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-2.gif" data-size="50x50">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-2.gif"
width="50"
height="50"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-2_hua34d33cbee86f18e78e19ed046d4dd54_362_480x0_resize_box.gif 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-2_hua34d33cbee86f18e78e19ed046d4dd54_362_1024x0_resize_box.gif 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">#&lt;/span>&lt;span class="nn">test2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* 这里设置overflow, font-size, line-height */&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/*是因为, 虽然宽高度为0, 但在IE6下会具有默认的 */&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* 字体大小和行高, 导致盒子呈现被撑开的长矩形 */&lt;/span>
&lt;span class="k">border-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#ff9600&lt;/span> &lt;span class="mh">#3366ff&lt;/span> &lt;span class="mh">#12ad2a&lt;/span> &lt;span class="mh">#f0eb7a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* border-style: solid; */&lt;/span>
&lt;span class="c">/* border-width: 20px; */&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>只保留上面的橙色
&lt;figure
class="gallery-image"
style="
flex-grow: 143;
flex-basis: 343px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-3.gif" data-size="53x37">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-3.gif"
width="53"
height="37"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-3_hu8a9ac48df02f8ca02cc1508a8615f158_144_480x0_resize_box.gif 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/box-3_hu8a9ac48df02f8ca02cc1508a8615f158_144_1024x0_resize_box.gif 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">#&lt;/span>&lt;span class="nn">test3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* overflow: hidden; */&lt;/span>
&lt;span class="c">/* font-size: 0; */&lt;/span>
&lt;span class="c">/* line-height: 0; */&lt;/span>
&lt;span class="k">border-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#ff9600&lt;/span> &lt;span class="kc">transparent&lt;/span> &lt;span class="kc">transparent&lt;/span> &lt;span class="kc">transparent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* border-style: solid; */&lt;/span>
&lt;span class="c">/* border-width: 20px; */&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 写一个去除制表符和换行符的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * \f 匹配 换页字符。
&lt;/span>&lt;span class="cm"> * \n 匹配 换行字符。
&lt;/span>&lt;span class="cm"> * \r 匹配 回车符字符。
&lt;/span>&lt;span class="cm"> * \t 匹配 制表字符。
&lt;/span>&lt;span class="cm"> * \v 匹配 垂直制表符。
&lt;/span>&lt;span class="cm"> * @param str
&lt;/span>&lt;span class="cm"> * @returns {void | string}
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">removeEmpty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[\t\n\v\r\f]/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">removeEmpty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`|
&lt;/span>&lt;span class="sb">
&lt;/span>&lt;span class="sb">|`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://caibaojian.com/css-border-triangle.html" target="_blank" rel="noopener"
>CSS 三角形的实现原理及运用-前端开发博客&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/9a463d50e441" target="_blank" rel="noopener"
>CSS 绘制三角形—border 法 - 简书&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　5</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/</link><pubDate>Sun, 19 Sep 2021 12:16:31 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/frontend-1-cover.jpg" alt="Featured image of post 毎日のフロントエンド　5" />&lt;h1 id="第五日">第五日&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 简述超链接 target 属性的取值和作用&lt;/p>
&lt;p>&lt;code>target&lt;/code> Where to display the linked URL. The following keywords have special meanings for where load the URL&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>value&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>_self&lt;/td>
&lt;td>（默认）在相同的框架中打开被链接文档&lt;/td>
&lt;td>the current browsing context(&lt;strong>&lt;em>default&lt;/em>&lt;/strong>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_blank&lt;/td>
&lt;td>在新窗口中打开被链接文档&lt;/td>
&lt;td>usually a new tab, but users can configure browers to open a new window instead&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_parent&lt;/td>
&lt;td>在父框架集中打开被链接文档&lt;/td>
&lt;td>the parent browsing context of the current one. If no parent , behaves as &lt;code>_self&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_top&lt;/td>
&lt;td>在整个窗口中打开被链接文档,忽略掉所有的框架结构&lt;/td>
&lt;td>the topmost browsing context. If no ancestors, behaves as &lt;code>_self&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> &lt;code>CSS3&lt;/code> 新增伪类有哪些并简要描述&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 140;
flex-basis: 336px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/pseudo.png" data-size="1073x765">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/pseudo.png"
width="1073"
height="765"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/pseudo_hu2ff8904cc2ba34eb8a6c0ccf94d335ff_81603_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/pseudo_hu2ff8904cc2ba34eb8a6c0ccf94d335ff_81603_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="新增伪类">
&lt;/a>
&lt;figcaption>新增伪类&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 写一个把字符串大小写切换的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">caseConvert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/([a-z]*)([A-Z]*)/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toUpperCase&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nx">s2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toLowerCase&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">caseConvert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;AsA33322A2aa&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//aSa33322a2AA
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">caseConvert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charCodeAt&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">code&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">65&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">code&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">122&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">code&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">90&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">code&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">97&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">code&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fromCharCode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">code&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fromCharCode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">code&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">caseConvert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;AbCdE&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// aBcDe
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">caseConvertEasy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charCodeAt&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toLowerCase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toUpperCase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">caseConvertEasy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;AbCxYz&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// aBcXyZ
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">reverseCharCase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;str must be string&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 如果是空字符串，直接返回
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">lowerCaseReg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sr">/[a-z]/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">upperCaseReg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sr">/[A-Z]/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">lowerCaseReg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toLocaleUpperCase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">upperCaseReg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toLocaleLowerCase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">testStringArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;1a1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;aABz&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;aC R + 6788978e892*&amp;amp;&amp;amp;*(^%&amp;amp;*%^&amp;amp;%^&amp;amp;e&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="nx">testStringArray&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reverseCharCase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　4</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/</link><pubDate>Sat, 18 Sep 2021 13:33:07 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/frontend-1-cover.jpg" alt="Featured image of post 毎日のフロントエンド　4" />&lt;h1 id="第四天">第四天&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> HTML5 的文件离线储存怎么使用，工作原理是什么？&lt;/p>
&lt;p>TL;DR &amp;ndash; &lt;code>HTML5&lt;/code> local storage is an alternative to &lt;code>cookies&lt;/code>, allowing web applications to store user information in their browser.&lt;/p>
&lt;p>With web storagem web applications can store data locally within the user&amp;rsquo;s browser.&lt;/p>
&lt;p>Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.&lt;/p>
&lt;p>Web storage is per origin (per domain and protocal). All pages, from one origin, can store and access the same data.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>window.localStorage&lt;/code> - stores data with no expiration date.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>window.sessionStorage&lt;/code> - stores data for one session (data is lost when the browser tab is closed)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="cookies-vs-local-storage-vs-session-storage">Cookies VS. Local Storage VS. Session Storage&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Cookies&lt;/th>
&lt;th>Local Storage&lt;/th>
&lt;th>Session Storage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Capacity&lt;/td>
&lt;td>4kb&lt;/td>
&lt;td>10mb&lt;/td>
&lt;td>5mb&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Browsers&lt;/td>
&lt;td>HTML4/HTML5&lt;/td>
&lt;td>HTML5&lt;/td>
&lt;td>HTML5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Accessible form&lt;/td>
&lt;td>Any window&lt;/td>
&lt;td>Any window&lt;/td>
&lt;td>Same tab&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Expires&lt;/td>
&lt;td>Manually set&lt;/td>
&lt;td>Never&lt;/td>
&lt;td>On tab close&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Storage Location&lt;/td>
&lt;td>Browser and Server&lt;/td>
&lt;td>Browser only&lt;/td>
&lt;td>Browser only&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sent with Request&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>No&lt;/td>
&lt;td>No&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Tools/Storage_Inspector" target="_blank" rel="noopener"
>Storage Inspector - Firefox Developer Tools | MDN&lt;/a>&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> CSS 选择器有哪些？哪些属性可以继承？&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors" target="_blank" rel="noopener"
>CSS selectors - CSS: Cascading Style Sheets | MDN&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>&lt;code>CSS Selectors&lt;/code>&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>Basic selectors&lt;/code>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>universal selector&lt;/code>通用选择器： &lt;code>*&lt;/code> will match all the elements of the document.&lt;/li>
&lt;li>&lt;code>Type selector&lt;/code> 元素选择器： Syntax: &lt;code>element name&lt;/code> input -&amp;gt; &lt;code>&amp;lt;input&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>Class selector&lt;/code> 类选择器具： Syntax: &lt;code>.classname&lt;/code>, &lt;code>.index&lt;/code> will match any element that has a class of &amp;ldquo;index&amp;rdquo;.&lt;/li>
&lt;li>&lt;code>ID selector&lt;/code>： Syntax: &lt;code>#idname&lt;/code>, &lt;code>#toc&lt;/code> will match the element that has the ID &amp;ldquo;toc&amp;rdquo;.&lt;/li>
&lt;li>&lt;code>Attribute selector&lt;/code> 属性选择器： Syntax: &lt;code>[attr]``[attr=value]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>Grouping selectors&lt;/code>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Selector list&lt;/code>: Syntax: A, B Example: &lt;code>div&lt;/code>, &lt;code>span&lt;/code> will match both &lt;code>&amp;lt;span&amp;gt;&lt;/code> and &lt;code>&amp;lt;div&amp;gt;&lt;/code> elements.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>Combinators&lt;/code>:&lt;/strong> 组合器&lt;/p>
&lt;ul>
&lt;li>&lt;code>Descendant combinator&lt;/code> 后代组合器&lt;/li>
&lt;li>&lt;code>Child combinator&lt;/code> 直接子代组合器&lt;/li>
&lt;li>&lt;code>General sibling combinator&lt;/code> 一般兄弟组合器&lt;/li>
&lt;li>&lt;code>Adjacent sibling combinator&lt;/code> 紧邻组合器&lt;/li>
&lt;li>&lt;code>Column combinator&lt;/code> 列组合器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>Pseudo&lt;/code>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Pseudo classes&lt;/code> 伪类： &lt;code>:&lt;/code> The &lt;code>:&lt;/code> pseudo allow the selection of elements based on state information that is not contained in the document tree. &lt;em>Example&lt;/em>: &lt;code>a::visited&lt;/code> will match all &lt;code>&amp;lt;a&amp;gt;&lt;/code> elements that have been visited by the user.&lt;/li>
&lt;li>&lt;code>Psendo elements&lt;/code> 伪元素： The &lt;code>::&lt;/code> pseudo represent entities that are not included in HTML. &lt;em>Example&lt;/em>: &lt;code>p::first-line&lt;/code> will match the first line of all &lt;code>&amp;lt;p&amp;gt;&lt;/code> elements.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Inherit : yes&lt;/em>&lt;/strong> 可继承属性：&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/fbfc6c751e34" target="_blank" rel="noopener"
>css 有哪些属性可以继承？&lt;/a>
&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance" target="_blank" rel="noopener"
>层叠与继承 - 学习 Web 开发 | MDN&lt;/a>&lt;/p>
&lt;h4 id="cascade">&lt;strong>&lt;code>Cascade&lt;/code>&lt;/strong>&lt;/h4>
&lt;p>Stylesheets cascade - at a very simple level, this means that the order of CSS rules matter; whjen two rules apply that have equal specificity the one that comes last in the CSS is the one that will be used.&lt;/p>
&lt;p>当两条同样级别的规则应用到同一个元素上时， 生效的是 后一个。&lt;/p>
&lt;h4 id="inheritance">&lt;strong>&lt;code>Inheritance&lt;/code>&lt;/strong>&lt;/h4>
&lt;p>Some css property values set on parent elements are inherited by their child elements, and some aren&amp;rsquo;t.&lt;/p>
&lt;h5 id="可继承的css属性">可继承的`CSS``属性：&lt;/h5>
&lt;ol>
&lt;li>字体相关： &lt;code>font&lt;/code> &lt;code>font-family&lt;/code> &amp;hellip;&amp;hellip;&lt;/li>
&lt;li>文本相关属性： &lt;code>text-indent&lt;/code>, &lt;code>text--align&lt;/code>, &lt;code>color&lt;/code>&amp;hellip;&amp;hellip;&lt;/li>
&lt;li>元素可见性： &lt;code>visibility&lt;/code>&lt;/li>
&lt;li>表格布局属性： &lt;code>caption-side, border-collapse, border-spacing,empty-cells, table-layout&lt;/code>&lt;/li>
&lt;li>列表属性： &lt;code>list-style-type&lt;/code> &amp;hellip;&amp;hellip;&lt;/li>
&lt;li>生成内容属性： &lt;code>quotes&lt;/code>&lt;/li>
&lt;li>光标属性： &lt;code>cursor&lt;/code>&lt;/li>
&lt;li>页面样式属性： &lt;code>page, page-break-inside, windows, orphans&lt;/code>&amp;hellip;&amp;hellip;&lt;/li>
&lt;li>声音样式属性： &lt;code>speak&lt;/code>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ol>
&lt;h5 id="无继承性的属性">无继承性的属性&lt;/h5>
&lt;ol>
&lt;li>&lt;code>display&lt;/code>&lt;/li>
&lt;li>文本属性： &lt;code>vertical-align&lt;/code> &lt;code>text-decoration&lt;/code> &lt;code>text-shadow&lt;/code> &lt;code>white-space&lt;/code> &lt;code>unicode-bidi&lt;/code>&lt;/li>
&lt;li>盒子模型的属性:宽度、高度、内外边距、边框等&lt;/li>
&lt;li>背景属性：背景图片、颜色、位置等&lt;/li>
&lt;li>定位属性：浮动、清除浮动、定位 &lt;code>position&lt;/code> 等&lt;/li>
&lt;li>生成内容属性: &lt;code>content&lt;/code> &lt;code>counter-reset&lt;/code> &lt;code>counter-increment&lt;/code>&lt;/li>
&lt;li>轮廓样式属性: &lt;code>outline-style&lt;/code> &lt;code>outline-width&lt;/code> &lt;code>outline-color&lt;/code> &lt;code>outline&lt;/code>&lt;/li>
&lt;li>页面样式属性: &lt;code>size&lt;/code> &lt;code>page-break-before&lt;/code> &lt;code>page-break-after&lt;/code>&lt;/li>
&lt;/ol>
&lt;h5 id="继承中比较特殊的几点">继承中比较特殊的几点&lt;/h5>
&lt;ol>
&lt;li>
&lt;p>&lt;code>a&lt;/code> 标签的字体颜色不能被继承&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>h1-h6&lt;/code> 标签字体的大下也是不能被继承的 ,因为它们都有一个默认值&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 写一个方法把下划线命名转成大驼峰命名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">toCamel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/(\w)/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toUpperCase&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\w_\w/&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="sr">/(\w)(_)(\w)/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nx">$3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toUpperCase&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">toCamel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a_c_def&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// ACDef
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">toCamelCase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;_&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 验证是否存在
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">charAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toUpperCase&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>毎日のフロントエンド　3</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/</link><pubDate>Thu, 16 Sep 2021 17:39:42 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/frontend-1-cover.jpg" alt="Featured image of post 毎日のフロントエンド　3" />&lt;h1 id="第三天">第三天&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> &lt;code>HTML&lt;/code> 全局属性&lt;code>(global attribute)&lt;/code>有哪些（包含&lt;code>HTML5&lt;/code>）?&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes" target="_blank" rel="noopener"
>Global attributes - HTML: HyperText Markup Language | MDN&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>&lt;code>Global attributes&lt;/code>&lt;/strong> are attributes common to &lt;strong>all&lt;/strong> &lt;code>HTML&lt;/code> elements; they can be used on all elements, though they may have no effect on some elements.&lt;/p>
&lt;p>&lt;strong>&lt;code>document.body.__proto__&lt;/code>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>accesskey&lt;/code>: 生成键盘快捷键提示。Provides a hint for generating a keyboard shortcut for the current element.&lt;/li>
&lt;li>&lt;code>autocapitalize&lt;/code>: 控制用户的文本输入 是否 如何 自动大写。 Controls whether and how text input is automatically capitalized as it is entered/edited by user.&lt;/li>
&lt;li>&lt;code>autofocus&lt;/code>: 标识一个元素是否在页面加载时候聚焦。 Indicates that an element is to be focused on page load, or as soon as the &lt;code>&amp;lt;dialog&amp;gt;&lt;/code> it is part of is displayed. Boolean, initially false.&lt;/li>
&lt;li>&lt;code>class&lt;/code>: 一个以空格分隔的元素的类名（&lt;code>classes&lt;/code> ）列表，它允许 CSS 和 Javascript 通过类选择器 (&lt;code>class selectors&lt;/code>) 或 DOM 方法( &lt;code>document.getElementsByClassName&lt;/code>)来选择和访问特定的元素。&lt;/li>
&lt;li>&lt;code>contenteditable&lt;/code>: 指定元素内容是否可编辑。 An enumerated attribute indicating if the element should be editable by the user.&lt;/li>
&lt;li>&lt;code>data-*&lt;/code>: 一类自定义数据属性，它赋予我们在所有 HTML 元素上嵌入自定义数据属性的能力。 Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between &lt;code>HTML&lt;/code> and its &lt;code>DOM&lt;/code> representation that may be used by scripts.&lt;/li>
&lt;li>&lt;code>dir&lt;/code>: 设置元素文本方向（默认 ltr；rtl）。An enumberated attribute indicating the directionality of the element&amp;rsquo;s text. It can have the following values.&lt;/li>
&lt;li>&lt;code>draggable&lt;/code>: 设置元素是否可拖拽。 An enumerated attribute indicating whether the element can be dragged, using the &lt;code>Drag and Drop API&lt;/code>.&lt;/li>
&lt;li>&lt;code>enterkeyhint&lt;/code>: Hints what action label (or icon) to present for the enter key on virtual keyboards.&lt;/li>
&lt;li>&lt;code>hidden&lt;/code>: 布尔属性表示该元素尚未或不再相关。例如，它可用于隐藏在登录过程完成之前无法使用的页面元素。A Boolean attribute indicates that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page tha can&amp;rsquo;t be used until the login process has been completed. The broweser won&amp;rsquo;t render such elements. This attribute must not be used to hide content that could legitimately be shown.&lt;/li>
&lt;li>&lt;code>id&lt;/code>: 元素 id，文档内唯一。 Defines a uniwue identifier which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling(with CSS).&lt;/li>
&lt;li>&lt;code>inputmode&lt;/code>: 向浏览器提供有关在编辑此元素或其内容时要使用的虚拟键盘配置类型的提示。主要用于 &lt;code>&amp;lt;input&amp;gt;&lt;/code>元素。 Provides a hint to browesers as to the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on &lt;code>&amp;lt;input&amp;gt;&lt;/code> elements.&lt;/li>
&lt;li>&lt;code>is&lt;/code>, &lt;code>itemid&lt;/code>, &lt;code>itemprop&lt;/code>, &lt;code>itemref&lt;/code>, &lt;code>itemscope&lt;/code>, &lt;code>itemtype&lt;/code>, &lt;code>lang&lt;/code>, &lt;code>part&lt;/code>, &lt;code>slot&lt;/code>, &lt;code>spellcheck&lt;/code>, &lt;code>style&lt;/code>, &lt;code>tabindex&lt;/code>, &lt;code>title&lt;/code>, &lt;code>translate&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 在页面上隐藏元素的方法有哪些？&lt;/p>
&lt;p>占位：&lt;/p>
&lt;ul>
&lt;li>&lt;code>visibility: hidden;&lt;/code> 页面会渲染只是不限显示&lt;/li>
&lt;li>&lt;code>margin-left: -100%;&lt;/code>&lt;/li>
&lt;li>&lt;code>opacity: 0;&lt;/code>&lt;/li>
&lt;li>&lt;code>transform: scale(0);&lt;/code>&lt;/li>
&lt;li>&lt;code>z-index: -9999;&lt;/code> (置于最下层)&lt;/li>
&lt;li>&lt;code>ransform: skew(90deg, -90deg);&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>不占位：&lt;/p>
&lt;ul>
&lt;li>&lt;code>display: none;&lt;/code> 页面不会渲染，可以减少首屏渲染的时间，但是会引起回流和重绘&lt;/li>
&lt;li>&lt;code>width: 0; height:0; overflow: hidden;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>仅针对 块内&lt;em>文本&lt;/em>元素：&lt;/p>
&lt;ul>
&lt;li>&lt;code>text-indent: -9999px;&lt;/code>&lt;/li>
&lt;li>&lt;code>font-size: 0;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JAVASCRIPT&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 去除字符串中最后一个指定的字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// regExp
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">deleteLastStr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">target&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">reg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">(?=([^&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">]*)$)`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　2</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/</link><pubDate>Wed, 15 Sep 2021 19:48:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/frontend-1-cover.jpg" alt="Featured image of post 毎日のフロントエンド　2" />&lt;h1 id="第二天">第二天&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> &lt;code>HTML&lt;/code> 的元素有哪些（包含 &lt;code>HTML5&lt;/code>）？&lt;/p>
&lt;p>块级元素 Block&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Block&lt;/code> elements are meant to &lt;strong>structure&lt;/strong> the main parts of your page, by dividing your content in coherent blocks.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>常用：div、p、ul、li、ol&lt;/li>
&lt;li>定义页面结构（Structure elements）: aside、footer、header、nav、section、main&lt;/li>
&lt;li>文章：address、article、figure、figcaption、h1、h2、h3、h4、h5、h6、pre&lt;/li>
&lt;li>表格：table、thead、tbody、tfoot、th、td、caption&lt;/li>
&lt;li>表单：form&lt;/li>
&lt;li>其他：canvas&lt;/li>
&lt;/ul>
&lt;p>行内元素 Inline&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Inline&lt;/code> elements are meant to differentiate part of a text, to give it a oarticular function or meaning. Inline elements usually comprise a single or few words.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>常用：a、img、span&lt;/li>
&lt;li>文本：em、i、strong、small&lt;/li>
&lt;li>表单：button、input、label、option、progress、select、textarea&lt;/li>
&lt;li>媒体：audio、video&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>Block&lt;/code> elements can contain either block or inline elements. However, &lt;code>inline&lt;/code> elements can only contain other inline elements.&lt;/p>
&lt;/blockquote>
&lt;p>HTML5 新增&lt;/p>
&lt;ul>
&lt;li>audio：音频&lt;/li>
&lt;li>video：视频&lt;/li>
&lt;li>header：头部&lt;/li>
&lt;li>section：内容块&lt;/li>
&lt;li>footer：底部&lt;/li>
&lt;li>aslide：侧边&lt;/li>
&lt;li>nav：导航&lt;/li>
&lt;li>address：地址&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>边框(borders):&lt;/p>
&lt;ul>
&lt;li>border-radius 圆角&lt;/li>
&lt;li>box-shadow 盒阴影&lt;/li>
&lt;li>border-image 边框图像&lt;/li>
&lt;/ul>
&lt;p>背景:&lt;/p>
&lt;ul>
&lt;li>background-size 背景图片的尺寸&lt;/li>
&lt;li>background_origin 背景图片的定位区域&lt;/li>
&lt;li>background-clip 背景图片的绘制区域&lt;/li>
&lt;/ul>
&lt;p>渐变：&lt;/p>
&lt;ul>
&lt;li>linear-gradient 线性渐变&lt;/li>
&lt;li>radial-gradient 径向渐变&lt;/li>
&lt;/ul>
&lt;p>文本效果;&lt;/p>
&lt;ul>
&lt;li>word-break&lt;/li>
&lt;li>word-wrap&lt;/li>
&lt;li>text-overflow&lt;/li>
&lt;li>text-shadow&lt;/li>
&lt;li>text-wrap&lt;/li>
&lt;li>text-outline&lt;/li>
&lt;li>text-justify&lt;/li>
&lt;/ul>
&lt;p>转换：&lt;/p>
&lt;ul>
&lt;li>2D 转换属性&lt;/li>
&lt;li>transform&lt;/li>
&lt;li>transform-origin&lt;/li>
&lt;/ul>
&lt;p>2D 转换方法&lt;/p>
&lt;ul>
&lt;li>translate(x,y)&lt;/li>
&lt;li>translateX(n)&lt;/li>
&lt;li>translateY(n)&lt;/li>
&lt;li>rotate(angle)&lt;/li>
&lt;li>scale(n)&lt;/li>
&lt;li>scaleX(n)&lt;/li>
&lt;li>scaleY(n)&lt;/li>
&lt;li>rotate(angle)&lt;/li>
&lt;li>matrix(n,n,n,n,n,n)&lt;/li>
&lt;/ul>
&lt;p>3D 转换：
*3D 转换属性：&lt;/p>
&lt;ul>
&lt;li>transform&lt;/li>
&lt;li>transform-origin&lt;/li>
&lt;li>transform-style&lt;/li>
&lt;/ul>
&lt;p>3D 转换方法&lt;/p>
&lt;ul>
&lt;li>translate3d(x,y,z)&lt;/li>
&lt;li>translateX(x)&lt;/li>
&lt;li>translateY(y)&lt;/li>
&lt;li>translateZ(z)&lt;/li>
&lt;li>scale3d(x,y,z)&lt;/li>
&lt;li>scaleX(x)&lt;/li>
&lt;li>scaleY(y)&lt;/li>
&lt;li>scaleZ(z)&lt;/li>
&lt;li>rotate3d(x,y,z,angle)&lt;/li>
&lt;li>rotateX(x)&lt;/li>
&lt;li>rotateY(y)&lt;/li>
&lt;li>rotateZ(z)&lt;/li>
&lt;li>perspective(n)&lt;/li>
&lt;/ul>
&lt;p>过渡&lt;/p>
&lt;ul>
&lt;li>transition&lt;/li>
&lt;/ul>
&lt;p>动画&lt;/p>
&lt;ul>
&lt;li>@Keyframes 规则&lt;/li>
&lt;li>animation&lt;/li>
&lt;/ul>
&lt;p>弹性盒子(flexbox)
多媒体查询@media&lt;/p>
&lt;p>&lt;strong>#Question:&lt;/strong> &lt;code>CSS3&lt;/code> 有哪些新增的特性？&lt;/p>
&lt;h2 id="javascript">Javascript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 写一个方法去掉字符串中的空格&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39; s t r &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// A frozen object can no longer be changed
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">POSITION&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">freeze&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">left&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">right&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">both&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">center&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">POSITION&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">both&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!!&lt;/span>&lt;span class="nx">POSITION&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;unexpected position value&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">POSITION&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">left&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^\s+/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">POSITION&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">right&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+$/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">POSITION&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">both&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^\s+/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+$/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">POSITION&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">center&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\w\s+\w/&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/(\w)(\s+)(\w)/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sb">`$1$3`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">POSITION&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`|&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">|`&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// |s t r|
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">Regex&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">string&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">join&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">string&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://marksheet.io/html-block-inline.html" target="_blank" rel="noopener"
>HTML - Free tutorial to learn HTML and CSS&lt;/a>&lt;/p></description></item><item><title>毎日のフロントエンド　1</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/</link><pubDate>Tue, 14 Sep 2021 11:58:23 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/</guid><description>&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/frontend-1-cover.jpg" alt="Featured image of post 毎日のフロントエンド　1" />&lt;h1 id="第一天">第一天&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 页面导入样式时，使用 link 和@import 有什么区别？&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>&amp;lt;link&amp;gt;&lt;/code> 是&lt;code>HTML&lt;/code>的标签。 The &lt;code>@import&lt;/code> is used to import style rules from other style sheets.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="o">&amp;lt;!&lt;/span>&lt;span class="nt">--&lt;/span> &lt;span class="p">@&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nt">Syntax&lt;/span> &lt;span class="nt">--&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nt">url&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nt">url&lt;/span> &lt;span class="nt">list-of-media-queries&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nt">url&lt;/span> &lt;span class="nt">supports&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">supports-query&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nt">url&lt;/span> &lt;span class="nt">supports&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">supports-query&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="nt">list-of-media-queries&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;link&amp;gt;&lt;/code> 引入的样式，在页面加载时，&lt;strong>同时加载&lt;/strong>。 @import 引入的样式需要等页面加载完成之后再加载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;link&amp;gt;&lt;/code> 不存在兼容性问题，&lt;code>@import&lt;/code> 不兼容 ie5 以下&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;link&amp;gt;&lt;/code> 可通过 &lt;code>js&lt;/code> 操作 &lt;code>DOM&lt;/code> 动态引入样式， &lt;code>@import&lt;/code> 不可以&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 圣杯布局和双飞翼布局的理解和区别，并用代码实现&lt;/p>
&lt;p>即 css 三栏布局&amp;mdash;改变 viewpoint 宽度，两个边栏的宽度不变(左右定宽)，只会中间的区域变化， 且 中间部分优先渲染&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 423px"
>
&lt;a href="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/illustrator-.png" data-size="1418x804">
&lt;img src="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/illustrator-.png"
width="1418"
height="804"
srcset="https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/illustrator-_hu85a3f2dcdbb3e5c89ceadc0c42243a5f_415659_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/illustrator-_hu85a3f2dcdbb3e5c89ceadc0c42243a5f_415659_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="圣杯布局---holy-grail-layout">圣杯布局 - Holy Grail Layout&lt;/h3>
&lt;p>&lt;a class="link" href="https://codepen.io/youkoucoding/pen/WNOEqGJ" target="_blank" rel="noopener"
>HolyGrailLayout - codepen&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>利用 float 和 margin 负值 并列&lt;/li>
&lt;li>利用 父容器设置&lt;code>padding&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Point:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>添加 &lt;code>center left right&lt;/code>, 并为三个部分设置 &lt;code>float: left; position: relative;&lt;/code>(脱离文档流)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>center&lt;/code> 区域设置 &lt;code>width: 100%;&lt;/code>, 使 &lt;code>center&lt;/code> 占满一整行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>center&lt;/code> 在最上面，此时需要为 &lt;code>left&lt;/code> 区域 设置 &lt;code>margin-left: -100%;&lt;/code> 将&lt;code>left&lt;/code>移动到&lt;code>center&lt;/code>左侧&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此时 &lt;code>left&lt;/code> 部分会覆盖 &lt;code>center&lt;/code> 的左侧部分，因此 给三个部分统一的 &lt;code>container&lt;/code> 设置 &lt;code>padding: 0 100px;&lt;/code> (左右两部分的宽度)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为总的 &lt;code>container&lt;/code> 添加 &lt;code>padding&lt;/code> 之后，&lt;code>left&lt;/code> 部分同样受影响，此时 需要使用 &lt;code>relative&lt;/code> 负值 向左移动一个 &lt;code>left&lt;/code> 宽度： &lt;code>left: -100px;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同理需要为 &lt;code>right&lt;/code> 区域 设置： &lt;code>margin-left: -100px; right: -100px&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>HEADER&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- center 优先加载，因此放在第一个 --&amp;gt;&lt;/span>
#center-one; center-two; center-three 中间宽度自适应
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;left&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>left&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;right&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>right&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">footer&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>FOOTER&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">footer&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="o">*&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">lightgray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">container&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">container&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nd">after&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c">/* 清除浮动塌陷*/&lt;/span>
&lt;span class="k">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">clear&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">both&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">main&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">orange&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">float&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">left&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">brown&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">float&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">relative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">right&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">green&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">float&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">relative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">right&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">header&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nt">footer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">green&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">font-weight&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">bolder&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">footer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">lightcoral&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="双飞翼">双飞翼&lt;/h3>
&lt;p>&lt;a class="link" href="https://codepen.io/youkoucoding/pen/qBjPEqX?editors=1100" target="_blank" rel="noopener"
>shuangfeiyi&lt;/a>&lt;/p>
&lt;p>point:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>wrapper left right&lt;/code>为三部分设置 &lt;code>float: left&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>center&lt;/code> 部分的 外层 &lt;code>wrapper&lt;/code> 设置 &lt;code>width: 100%;&lt;/code> 占满一整行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>left&lt;/code> 区域 &lt;code>margin-left: -100%;&lt;/code> &lt;code>right&lt;/code> 区域&lt;code>margin-left: -100px;&lt;/code> 使左右翼分置两侧&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此时&lt;code>center&lt;/code>的内容被覆盖，除了使用圣杯法的外围 container 的 padding， 双飞翼使用了： 在&lt;code>center&lt;/code>区域添加内层 &lt;code>div&lt;/code> 并给内层 添加 &lt;code>margin: 0 100px;&lt;/code> 压缩中心区域&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;header&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>头部&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;wrapper&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>主要区域&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;left&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>左侧&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;right&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>右侧&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;footer&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>底部&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">wrapper&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">float&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">center&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">coral&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/*为主区域设置 左右 外边距 压缩主区域，并被包裹*/&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">left&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">float&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">right&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">lightblue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">float&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">footer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">clear&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">both&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">header&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">footer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">line-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">green&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">font-weight&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">bolder&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="javascript">Javascript&lt;/h2>
&lt;p>&lt;strong>#Question:&lt;/strong> 用递归算法实现，数组长度为 5 且元素的随机数在 2-32 间不重复的值&lt;/p>
&lt;p>Description:&lt;/p>
&lt;ol>
&lt;li>生成一个长度为 5 的空数组 arr&lt;/li>
&lt;li>生成一个（2－32）之间的随机整数 rand&lt;/li>
&lt;li>把随机数 rand 插入到数组 arr 内，如果数组 arr 内已存在与 rand 相同的数字，则重新生成随机数 rand 并插入到 arr 内[需要使用递归实现，不能使用 for/while 等循环]&lt;/li>
&lt;li>最终输出一个长度为 5，且内容不重复的数组 arr&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">randomNum&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">randomArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">randomNum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">randomArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">randomNum&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">randomArr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;ul>
&lt;li>Getting a random Number between two values&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// The returned value is no lower than (and may possibly equal) min, and is less than (and not equal) max
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">getRandomArbitrary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">max&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">max&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">min&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">min&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#getting_a_random_integer_between_two_values" target="_blank" rel="noopener"
>Math.random() - JavaScript | MDN&lt;/a>&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.h-camel.com/index.html" target="_blank" rel="noopener"
>前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！&lt;/a>&lt;/p></description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（六）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</link><pubDate>Mon, 13 Sep 2021 17:34:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</guid><description>&lt;img src="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/liftup-cover.jpg" alt="Featured image of post React17 + ReactHook + TS4 仿Jira项目---学习笔记（六）" />&lt;h1 id="what-is-lifting-state-up-and-why-we-need-it">What is &amp;ldquo;Lifting State up&amp;rdquo; and Why we need it?&lt;/h1>
&lt;p>Lifting state up is a common pattern that is essential for React developer to know. It helps us avoid more complex pattern for managing our state.&lt;/p>
&lt;p>Often there will be a need to share state between different components. The common approach to share state between two components is to move the state to common parent of the two compenont.&lt;/p>
&lt;p>我们可以很清楚的明白 React 状态提升主要就是用来处理父组件和子组件的数据传递的；他可以让我们的数据流动的形式是自顶向下单向流动的，所有组件的数据都是来自于他们的父辈组件，也都是由父辈组件来统一存储和修改，再传入子组件当中。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>We lift up state to a common ancestor of components that need it, so that they can nall share in the state. This allows us to mor4e easily share state among all of these components that need rely upon it.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>There should be a single &amp;ldquo;source of truth&amp;rdquo; for any data that changes in application. Usuall, the state is first added to the component that needs it for rendering. If any other components also need it, you can lift it up to their &lt;strong>closest common ancestor&lt;/strong>. Instead of trying to sync thje state between different components, you should rely on &lt;strong>the top-down data flow.&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lifting state takes less work to find and isolate bugs. Since any state &amp;ldquo;lives&amp;rdquo; in some component and that component alone can change it. Additionally, we can implement any custom logic to reject or transform or validate user input.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If something can be derived from eother props or state, it probably shouldn&amp;rsquo;t be in the state.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（五）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</link><pubDate>Sun, 12 Sep 2021 17:48:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</guid><description>&lt;img src="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/throttle-cover.jpg" alt="Featured image of post React17 + ReactHook + TS4 仿Jira项目---学习笔记（五）" />&lt;h1 id="防抖-与-节流">防抖 与 节流&lt;/h1>
&lt;h1 id="debouncing-and-throttling-in-javascript">Debouncing and Throttling in Javascript&lt;/h1>
&lt;blockquote>
&lt;p>Debouncing and Throttling are two widely-used techniques to improve the performance of code that gets executed repeatedly within a short time(a peroid of time).&lt;/p>
&lt;/blockquote>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 124;
flex-basis: 299px"
>
&lt;a href="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/debounce-throttle.png" data-size="1520x1218">
&lt;img src="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/debounce-throttle.png"
width="1520"
height="1218"
srcset="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/debounce-throttle_huec4dd3bcb81c44050a108279d94fa773_27595_480x0_resize_box_3.png 480w, https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/debounce-throttle_huec4dd3bcb81c44050a108279d94fa773_27595_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="devbounce-throttle">
&lt;/a>
&lt;figcaption>devbounce-throttle&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="debouncing-防抖">Debouncing 防抖&lt;/h2>
&lt;p>用来实现高频触发函数调用时，实际只调用最后一次函数执行。&lt;/p>
&lt;p>即： 触发事件后过一段时间才执行函数， 如果在这段时间内再次触发，则重新计时。&lt;/p>
&lt;p>用于可能出现高频调用的 DOM 或 样式修改， 这种高频调用会导致页面高频重排重绘，DOM 闪烁抖动，影响页面性能。&lt;/p>
&lt;h4 id="implementing-debounce">Implementing Debounce:&lt;/h4>
&lt;ol>
&lt;li>Start with o timeout&lt;/li>
&lt;li>If the debounced function is called again, reset the timer to the speccial delay&lt;/li>
&lt;li>In case of timeout, call the debounced function.&lt;/li>
&lt;/ol>
&lt;p>Thus every call to a debounce function resets the timer and delays the call.&lt;/p>
&lt;p>Debounce is higher-order function, which is a function that returns anotehr function. This is done to form a closure around the &lt;code>handler&lt;/code> and &lt;code>delay&lt;/code> function parameters and the &lt;code>timer&lt;/code> variable so that their values are preserved.&lt;/p>
&lt;p>&lt;strong>If we are invoking for the first time, our function will execute at the end of our delay&lt;/strong>. If we invoke and then invoke again before the end of our delay, the delay restarts.&lt;/p>
&lt;blockquote>
&lt;p>调用 &lt;code>setTimeout&lt;/code> 会返回一个 &lt;code>timeoutId&lt;/code> , 然后通过调用 &lt;code>clearTimeout&lt;/code> 清除 制定的 &lt;code>timeoutId&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h4 id="self-和-apply">&lt;code>self&lt;/code> 和 &lt;code>apply&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>在 &lt;code>apply&lt;/code> 中 会将调用的函数（&lt;code>handler&lt;/code>）， 绑定到 &lt;code>this&lt;/code> 中， 所以如果 不用 之前创建的 &lt;code>self&lt;/code> 而是直接使用 &lt;code>this&lt;/code>, 可能会产生问题，比如： 需要防抖的&lt;code>handler&lt;/code>是在全局环境中调用时， &lt;code>this&lt;/code> 执行上下文是 &lt;code>window&lt;/code>， 不能指向绑定事件的元素上。 因此，使用 &lt;code>apply&lt;/code> 显式地 将当前的执行上下文的&lt;code>this&lt;/code> 绑定到 &lt;code>handler&lt;/code> 上，以使元素上的&lt;code>handler&lt;/code>生效。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Debounce
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">debounce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">self&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// arguments 是一个类数组对象， 指向传入的参数。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">timer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">clearTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timer&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 清除前一个需要debounce 的函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// apply 会将调用的函数, 绑定到 apply第一个参数指向的上下文中(此处的 self)， 并且可以接受一个数组或类数组对象作为后续参数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">handler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//test
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">testDebounce&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;this is a test.&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onmousemove&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">debounce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">testDebounce&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="用箭头函数简化">用箭头函数简化&lt;/h4>
&lt;ul>
&lt;li>箭头函数的 &lt;code>this&lt;/code> 指向函数定义时 上下文&lt;code>this&lt;/code>&lt;/li>
&lt;li>使用扩展运算符，避免定义 &lt;code>arguments&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">debounce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">timer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">clearTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="throttling-节流">Throttling 节流&lt;/h2>
&lt;p>Throttling or sometimes is also called throttle function is a practise used in websites. To throttle a function means to ensure that the function is called at most once in a specified time period. This means throttling will prevent a function from running if it has run &amp;ldquo;recently&amp;rdquo;. Throttling also ensures a function is run regularly at a fixed rate.&lt;/p>
&lt;p>Throttlig is used to call a function after every millisecond or a particular interval of time only the first click is executed immediately.&lt;/p>
&lt;p>用来实现**_阻止_**在短时间内重复多次触发同一个函数。&lt;/p>
&lt;p>即： 每一个时间间隔内， 只执行一次函数, &lt;code>timer&lt;/code> 存在的时候 直接返回，不存在的时候，执行&lt;code>setTimeout&lt;/code>(执行完，会清空&lt;code>timer&lt;/code>)&lt;/p>
&lt;h4 id="implementing-throttle">Implementing Throttle:&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Throttle
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">throttle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">self&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">timer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">handler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// test
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">testThrottle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">content&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">content&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">testThrottleHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">throttle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">testThrottle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onmousemove&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">testThrottleHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;throttle&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用-箭头函数-优化">使用 箭头函数 优化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">throttle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">timer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// example in reference
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">throttle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">limit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">lastFunc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">lastRan&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">lastRan&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">func&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">lastRan&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">clearTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lastFunc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">lastFunc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">lastRan&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="nx">limit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">func&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">lastRan&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="nx">limit&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">lastRan&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first call to the function will execute and sets the limit period &lt;code>delay&lt;/code>. We can call the function during this period but it will not fire until the &lt;code>throttle&lt;/code> period has passed. Once is has passed, the next invocation will fire and the process repeats.&lt;/p>
&lt;h2 id="compare-debounce-and-throttle">Compare Debounce and Throttle&lt;/h2>
&lt;h3 id="similarities">Similarities&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>都使用了 &lt;code>setTimeout&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目的都是降低回调函数的执行频率， 节省资源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="difference">Difference&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;code>Debounce&lt;/code> 防抖关注的是：一定时间段内，连续触发的事件，只在最后一次触发的时候 执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Throttle&lt;/code> 节流关注的是：侧重一个时间间隔内，只执行一次。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="使用场景-use-cases">使用场景 &lt;code>use cases&lt;/code>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;code>Debounce&lt;/code> &lt;strong>防抖的使用场景：&lt;/strong> 连续的事件，只需要触发一次的场景， 例如：&lt;/p>
&lt;ul>
&lt;li>搜索框 输入搜索内容，最后输入完成后，再发送请求；&lt;/li>
&lt;li>号码， 邮箱的输入验证；&lt;/li>
&lt;li>窗口大小的调整： 在调整完成后再计算窗口大小，防止重复渲染。&lt;/li>
&lt;li>&lt;em>Autocomplete&lt;/em>: Often times, search boxes offer dropdowns that provide autocomplete options for the user&amp;rsquo;s current input. Sometimes the items suggested are fetched from the backend API. Here, debouncing can be applied in implementing suggestive text where we wait for the user to stop typing for a few seconds before suggesting the text. Thus, on every keystrokem, we wait for some seconds before giving out suggestions.&lt;/li>
&lt;li>Debouncing a &lt;code>resize&lt;/code> event handler.&lt;/li>
&lt;li>Debouncing a save function in an autosave feature.&lt;/li>
&lt;li>Don&amp;rsquo;t do anything whiule the user drags and drops.&lt;/li>
&lt;li>Don&amp;rsquo;t make any Axios requests until the user stops typing.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Throttle&lt;/code> &lt;strong>节流的使用场景：&lt;/strong> 间隔一段时间之行一次回调函数的场景：&lt;/p>
&lt;ul>
&lt;li>滚动加载 或者 加载更多的场景&lt;/li>
&lt;li>表单的多次点击提交&lt;/li>
&lt;li>&lt;em>Gaming&lt;/em>&lt;/li>
&lt;li>&lt;em>Scroll event handler&lt;/em>&lt;/li>
&lt;li>Throttling a button cliock so er can&amp;rsquo;t spam click&lt;/li>
&lt;li>Throttling an API call&lt;/li>
&lt;li>Throttling a &lt;code>mousemove/touchmove&lt;/code> event handler.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.huaweicloud.com/articles/289941d93ba2f7dc048d790d1697f80d.html" target="_blank" rel="noopener"
>javaScript 节流与防抖&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=KviNB_deCaI&amp;amp;t=202s" target="_blank" rel="noopener"
>JavaScript 防抖与节流 - YouTube&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://towardsdev.com/debouncing-and-throttling-in-javascript-8862efe2b563" target="_blank" rel="noopener"
>Debouncing and Throttling in JavaScript: Comprehensive Guide | by Ayush Verma | Towards Dev&lt;/a>&lt;/p></description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（四）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</link><pubDate>Sat, 11 Sep 2021 15:14:04 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid><description>&lt;img src="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/cover-for-bestpractise.jpg" alt="Featured image of post React17 + ReactHook + TS4 仿Jira项目---学习笔记（四）" />&lt;h1 id="关键知识点六-restful-api-设计的几个最佳实践">关键知识点六： Restful API 设计的几个最佳实践&lt;/h1>
&lt;h2 id="steps-toward-the-glory-of-rest">steps toward the glory of REST&lt;/h2>
&lt;p>&lt;a class="link" href="https://martinfowler.com/articles/richardsonMaturityModel.html#level0" target="_blank" rel="noopener"
>Richardson Maturity Model&lt;/a>&lt;/p>
&lt;h3 id="level-0">Level 0&lt;/h3>
&lt;p>The Starting point for the model is using HTTP as a transport system for remote interactions, but without using any of the mechanisms of the web.If you use SOAP or XML-RPC it&amp;rsquo;s basically the same mechanism, the only difference is that you wrap the XML messages in some kind of envelope.&lt;/p>
&lt;h3 id="level-1---resources">Level 1 - Resources&lt;/h3>
&lt;p>At level One, rather than making all the requests to s singular service endpoint, we start talking to &lt;strong>individual resources&lt;/strong>.&lt;/p>
&lt;h3 id="level-2---http-verbs-method">Level 2 - Http Verbs (Method)&lt;/h3>
&lt;p>Level 2 moves away from being used as tunneling mechanisms allowing you to tunnel your interactions through HTTP, using the &lt;code>http verbs&lt;/code> as closely as possible to how they are used in Http itself.&lt;/p>
&lt;p>HTTP defines &lt;code>GET&lt;/code> as a safe operation, that is it doesn&amp;rsquo;t make any significant changes to the state of anything.&amp;mdash; This allows us to invoke GETs safely any number of times in any order and get the same results each time.(&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Glossary/Idempotent" target="_blank" rel="noopener"
>幂等 - 术语表 | MDN&lt;/a>)&lt;/p>
&lt;p>THE KEY elements that are supported by the existence of the web are the strong separation between safe (eg: GET) and non-safe operations, together with using status codes to help communicate the kinds of errors we run into.&lt;/p>
&lt;h3 id="level-3---hypermedia-controls">Level 3 - Hypermedia Controls&lt;/h3>
&lt;p>THE &lt;em>Highest&lt;/em> and final level introduces something that you often hear referred to under the おかしい acronym of HATEOAS (Hypertext As The Engine Of Application State).&lt;/p>
&lt;p>Each response has a link element which contains a URI to tell us how to do next, and the URI of the resource we need to manipulate to do it.&lt;/p>
&lt;p>One obvious benefit of hypermedia controls is that it allows the server to change its URI scheme without breaking clients. As long as clients look up the &amp;ldquo;add-test&amp;rdquo; link URI then the server can juggle all URIs other than the initial entrypoint.&lt;/p>
&lt;p>A further benefit is that it helps client developers explore the protocal. The links give client developers a hint as to what may be possible next. AND simillarly it also allows the server team tp advertise new capabilities by putting new links in the responses.&lt;/p>
&lt;p>So as a frontend developer, if we can keeping an eye out for unknown links, these links can be a trgger for further exploration.&lt;/p>
&lt;h2 id="best-practise-最佳实践">Best Practise 最佳实践&lt;/h2>
&lt;h3 id="一-一类资源两个-url---use-two-urls-per-resource">一， 一类资源两个 URL - Use Two URLs per Resource&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 资源集合：&lt;/span>
/epics
&lt;span class="c1"># 资源元素：&lt;/span>
/epics/5
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="二-使用一致的复数名词---use-consistently-plural-nouns">二， 使用一致的复数名词 - Use Consistently Plural Nouns&lt;/h3>
&lt;p>只应该使用统一的&lt;strong>复数名词&lt;/strong>来表达资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">GET /stories
GET /stories/3
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="三-资源-uri-使用名词而不是动词---use-nouns-instead-of-verbs-for-resources">三， 资源 URI 使用名词而不是动词 - Use Nouns instead of Verbs for Resources&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># wrong&lt;/span>
/getAllEpics
/getAllFinishedEpics
/createEpic
/updateEpic
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://phauer.com/2015/restful-api-design-best-practices/#http-methods" target="_blank" rel="noopener"
>RESTful API Design.HTTP METHOD&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># right&lt;/span>
GET /epics
GET /epics?state&lt;span class="o">=&lt;/span>finished
POST /epics
PUT /epics/5
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="四-将实际数据包装在-data-字段中">四， 将实际数据包装在 data 字段中&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">GET&lt;/span> &lt;span class="err">/epics在数据字段中返回epic资源列表&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;epic1&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;epic2&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">GET&lt;/span> &lt;span class="err">/epic/&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">在数据字段中返回id为&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">的epic对象&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;epic1&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>PUT，POST 和 PATCH 请求的有效负荷(payload)还应包含实际对象的数据字段。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://jsonapi.org/" target="_blank" rel="noopener"
>JSON:API — A specification for building APIs in JSON&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="五-对可选及复杂参数使用查询字符串">五， 对可选及复杂参数使用查询字符串&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 保持URL简单, 使用基本URL，将复杂或可选参数移动到查询字符串。&lt;/span>
GET /employees?state&lt;span class="o">=&lt;/span>internal&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="nv">title&lt;/span>&lt;span class="o">=&lt;/span>senior
GET /employees?id&lt;span class="o">=&lt;/span>1,2
&lt;span class="c1"># 还可以使用JSON API方式过滤&lt;/span>
GET /employees?filter&lt;span class="o">[&lt;/span>state&lt;span class="o">]=&lt;/span>internal&lt;span class="p">&amp;amp;&lt;/span>filter&lt;span class="o">[&lt;/span>title&lt;span class="o">]=&lt;/span>senior
GET /employees?filter&lt;span class="o">[&lt;/span>id&lt;span class="o">]=&lt;/span>1,2
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="六-使用-http-状态码-status-codes">六， 使用 HTTP 状态码 status codes&lt;/h3>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noopener"
>HTTP response status codes - HTTP | MDN&lt;/a>&lt;/p>
&lt;p>状态码的使用要尽量精确。如果资源可用，但禁止用户访问，则返回 403。如果资源曾经存在但现已被删除或停用，请使用 410。&lt;/p>
&lt;h3 id="七-提供有用的错误消息">七， 提供有用的错误消息&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">request&lt;/span>
&lt;span class="err">GET&lt;/span> &lt;span class="err">/epics?state=unknow&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">response&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;errors&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;detail&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Invalid state. Valid values are &amp;#39;biz&amp;#39; or &amp;#39;tech&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">352&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;links&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;about&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://www.jira.com/rest/errorcode/352&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="八hateoas---provide-links-for-navigating-through-your-api">八，HATEOAS - Provide Links for Navigating through your API&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">request&lt;/span>
&lt;span class="err">GET&lt;/span> &lt;span class="err">/epic&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">好的做法是在响应中提供客户可以跟进的链接&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">response&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;epic1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;links&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;story&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://www.domain.com/epics/21/stories&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>优点：&lt;/p>
&lt;ol>
&lt;li>如果 API 被更改，客户端依旧会获取有效的 URL（只要保证在 URL 更改时更新链接）&lt;/li>
&lt;li>API 变得更具自描述性，客户端不必经常查找文档&lt;/li>
&lt;/ol>
&lt;h3 id="九-恰当地设计关系">九， 恰当地设计关系&lt;/h3>
&lt;p>在 API 中设计关系基本上有三种常用选项：链接，侧载和嵌入。&lt;/p>
&lt;p>There are basically three common options to design relationships within an API: &lt;strong>Links&lt;/strong>, &lt;strong>Sideloading&lt;/strong> and &lt;strong>Embedding&lt;/strong>.&lt;/p>
&lt;p>Basically, you should design the relationships depending on the &lt;strong>client&amp;rsquo;s access schema&lt;/strong> and the &lt;strong>tolerable request amount&lt;/strong> and &lt;strong>payload size&lt;/strong>.&lt;/p>
&lt;h4 id="links">Links:&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Larry&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;relationships&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;manager&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://www.domain.com/employees/1/manager&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;teamMembers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;http://www.domain.com/employees/12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://www.domain.com/employees/13&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="err">//or&lt;/span> &lt;span class="s2">&amp;#34;teamMembers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://www.domain.com/employees/1/teamMembers&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;em>Small payload size.&lt;/em> : It&amp;rsquo;s &lt;strong>good&lt;/strong>, if the client doesn&amp;rsquo;t need the manager and the teamManager every time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Many Request&lt;/em>. : It&amp;rsquo;s &lt;strong>bad&lt;/strong>, if nearly every client needs this data. MANY additional requests may be required; in the worse case for every employee.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The client has to stitch the data together in order to get the big picture.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="sideloading">Sideloading:&lt;/h4>
&lt;p>We can refer to the relationship with a foreign key and put the referred entitiese also in the payload but under the dedicated field &lt;code>included.&lt;/code> This approach also called &amp;ldquo;Compound Documents&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Larry&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;relationships&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;manager&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;teamMembers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;included&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;manager&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Kevin&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;teamMembers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Albert&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Tom&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client may also control the sideloaded entities by a query parameter like &lt;code>GET /employee?include=manager,teamMembers&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>One singel request.&lt;/li>
&lt;li>Tailored payload size. No duplication (e.g. you only deliver a manager once even if he is referenced by many employees).&lt;/li>
&lt;li>The client still has to stitch the data together(拼接数据) in order to resolve the relationships. which can be very cumbersome.&lt;/li>
&lt;/ul>
&lt;h4 id="embedding">Embedding:&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Larry&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;manager&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Kev&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;teamMembers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Albert&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Tom&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Most conveninet for the client. It&amp;rsquo;s can directly follow the relationships to get the actual data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Relationships may be loaded in vain if the client does not need it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Increased payload size and duplications. Referenced entities may be embedded multiple times.(not so good)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="十-小驼峰法命名属性---use-camelcase-for-attribute-names">十， 小驼峰法命名属性 - Use CamelCase for Attribute Names&lt;/h3>
&lt;p>&lt;code>{&amp;quot;yearOfBirth&amp;quot;: 1970}&lt;/code>&lt;/p>
&lt;p>Don not use underscores or capitalize (year_of_birth or YearOfBirth). Often the RESTful api will be consumed by a client written in JS. Typically the client wil convert the JSON response to a JS object( &lt;code>var person = JSON.parse(response)&lt;/code> ) and call its attributes. Therefore, it&amp;rsquo;s a good idea to stick to the JS convention which makes the js code more readable and intuitive.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// Don&amp;#39;t
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">year_of_birth&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// violates JavaScript convention
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">YearOfBirth&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// suggests constructor method
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Do
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">yearOfBirth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="十一用动词表示操作---use-verbs-for-operations">十一，用动词表示操作 - Use Verbs for Operations&lt;/h3>
&lt;p>有时对 API 调用的响应不涉及资源（如计算，转义或变换）。&lt;/p>
&lt;p>Sometimes a response to an API call does not involve resources (like calculate, translate, or convert)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">//Reading
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">GET&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">translate&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="nx">from&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">de_DE&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">en_US&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">Hallo&lt;/span>
&lt;span class="nx">GET&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">calculate&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="nx">para2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">para2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">432&lt;/span>
&lt;span class="c1">//Trigger an operation that changes the server-side state
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">POST&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">restartServer&lt;/span>
&lt;span class="c1">//no body
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">POST&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">banUserFromChannel&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;123&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;channel&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;serious-chat-channel&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, no resource are involved. Instead, the server executes an operation and returns the result to the client.&lt;/p>
&lt;p>Hence, we shoud use verbs instead of nouns in our URL to distinguish clearly the operations (RPC-style API) from the RESTful endpoints(resources for modelling the domain.)&lt;/p>
&lt;p>Creating those RPC-style API instead of REST is appropriate for operations. Usualy, it&amp;rsquo;s simpler and more intuitive than trying to be REST for operations (e.g. PATCH /server with &lt;code>{&amp;quot;restart&amp;quot;: true}&lt;/code>). &lt;em>AS the rule of thumb&lt;/em>, REST is nice for interacting with domain models and RPC is suitable for operations.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://www.smashingmagazine.com/2016/09/understanding-rest-and-rpc-for-http-apis/" target="_blank" rel="noopener"
>Understanding RPC Vs REST For HTTP APIs — Smashing Magazine&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="十二-分页-provide-pagination">十二， 分页 Provide Pagination&lt;/h3>
&lt;p>It is almost never a good idea to return the whole data of your db at once.&lt;/p>
&lt;p>Consequently, you should provide a pagination mechanism. There are TWO popular approaches below:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Offset-based Pagination&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Keyset-based Pagination (Continuation Token) aka CURSOR&amp;mdash;&amp;ndash; recommended.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="offset-based">Offset-based&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fish" data-lang="fish">&lt;span class="c"># use the parameters offset and limit, which are well-known from database
&lt;/span>&lt;span class="c">&lt;/span>
/employees?&lt;span class="nv">offset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nv">limit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">15&lt;/span> &lt;span class="c"># returns the employees 30 to 45
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c"># when the client omits the parameter, the server team should use default(like offset=0 and limit=100)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Never return all resources.&lt;/p>
&lt;/blockquote>
&lt;p>You can provide links for getting the next or previous page. Just construct URLs with the appropriate offset and limit.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">GET /employees?offset&lt;span class="o">=&lt;/span>20&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="nv">limit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;pagination&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;offset&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;limit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;total&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3465&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="err">//...&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;links&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;next&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://www.domain.com/employees?offset=30&amp;amp;limit=10&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;prev&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://www.domain.com/employees?offset=10&amp;amp;limit=10&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="keyset-based-pagination-aka-continuation-token-cursor-recommend">Keyset-based Pagination aka continuation TOKEN, CURSOR (recommend)&lt;/h4>
&lt;p>The presented offset-based pagination is easy to implement but comes with drawbacks. &lt;em>They are slow (SQL’s OFFSET clause becomes very slow for large numbers) and unsafe (it’s easy to miss elements when changes are happening during pagination).&lt;/em>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>SQL’s OFFSET clause becomes very slow for large numbers&lt;/li>
&lt;li>it’s easy to miss elements when changes are happening during pagination&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># That’s why it’s better to use an indexed column.&lt;/span>
&lt;span class="c1"># Let’s assume that our employees have an indexed column data_created and the collection resource /employees?pageSize=100 returns the oldest 100 employees sorted by this column.&lt;/span>
&lt;span class="c1"># Client only has to take the dateCreated timestamp of the last employee and uses the query parameter createdSince to continue at this point.&lt;/span>
GET /employees?pageSize&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span>
&lt;span class="c1"># The client receives the oldest 100 employees sorted by `data_created`&lt;/span>
&lt;span class="c1"># The last employee of the page has the `dataCreated` field with 1504224000000 (= Sep 1, 2017 12:00:00 AM)&lt;/span>
GET /employees?pageSize&lt;span class="o">=&lt;/span>100&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="nv">createdSince&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1504224000000&lt;/span>
&lt;span class="c1"># The client receives the next 100 employees since 1504224000000.&lt;/span>
&lt;span class="c1"># The last employee of the page was created on 1506816000000. And so on.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This solves already many of the disadvantages of offset-based pagination, but it’s still not perfect and not very convenient for the client.&lt;/p>
&lt;ul>
&lt;li>It’s better to create a so-called continuation token by adding additional information (like the id) to the date in order to improve the reliability and efficiency.&lt;/li>
&lt;li>Moreover, you should provide a dedicated field in the payload for that token so the client doesn’t have to figure it out by looking at the elements. You can even go further and provide a next link.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://phauer.com/2018/web-api-pagination-timestamp-id-continuation-token/" target="_blank" rel="noopener"
>Web API Pagination with the &amp;lsquo;Timestamp_ID&amp;rsquo; Continuation Token&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">request&lt;/span>
&lt;span class="err">GET&lt;/span> &lt;span class="err">/employees?pageSize=&lt;/span>&lt;span class="mi">100&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">response&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;pagination&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;continuationToken&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1504224000000_10&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">...&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">last&lt;/span> &lt;span class="err">element:&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;dateCreated&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1504224000000&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;links&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;next&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://www.domain.com/employees?pageSize=100&amp;amp;continue=1504224000000_10&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>next&lt;/code> link makes the API RESTful as the client can page through the collection simply by following these links(HATEOAS). No need to construct URLs manually. Moreover, we can simply change the URL structure without breaking clients( called evolvability)&lt;/p>
&lt;h3 id="十三-check-out-jsonapi">十三， Check out JSON:API&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://jsonapi.org/" target="_blank" rel="noopener"
>JSON:API — A specification for building APIs in JSON&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Just for Inspiration. Feel free to make up your own mind about JSON:API.&lt;/p>
&lt;h3 id="十四-确保-api-的可演进-ensure-evolvability-of-the-apis">十四， 确保 API 的可演进 Ensure Evolvability of the APIs&lt;/h3>
&lt;h4 id="avoid-breaking-changes">Avoid Breaking Changes&lt;/h4>
&lt;p>Ideally, APIs should be stable. Basically, breaking changes should not happen.(like change the whole payload format or the URL scheme). SO how can we still evolve our API without breaking the clients:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>保持向后兼容 Make backward-compatible changes.Adding field is no problem, as long as the clients are tolerant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复制和弃用。Duplication and Deprecation. In order to cahnge an existing field, you can add the new one next to the old field and deprecated the old one in the documentation. After a while, you can remove the old field.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>超媒体和 HATEOAS。Utilize Hypermedia and HATEOAS. As long as the API client uses the links in the response to navigate through the API (and doesn’t craft the URLs manually), you can safely change the URLs without breaking the clients.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用新名称创建新资源。Create new resources with new names. If new business requirements lead to a completely new domain model and workflows, you can create new resources. That’s often quite intuitive as the domain model has a new name anyway (derived from the business name). Example: A rental service now also rents bikes and segways. So the old concept car with the resource /cars doesn’t cut it anymore. A new domain model vehicle with a new resource /vehicles is introduced. It’s provided along with the old /cars resource.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="keep-bussiness-logic-on-the-server-side">Keep Bussiness Logic on the Server-Side&lt;/h4>
&lt;p>DO not let our service become &lt;em>a dump data access layer&lt;/em> which provides CRUD functionality by directly exposing your databaes model. &lt;strong>THIS creates HIGH COUPLING.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The bussiness logic is shifted to the client and is often replicated between the client and the server (just think about validation.). We have to keep both in sync.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The client will be coupling to the server&amp;rsquo;s database model. This is not good.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The business workflows are getting distributed between the client and the server. IN TURN, that makes it likely that new business requirements require a change in both the client and the server and to break API. So the API/system is not that evolvable.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>因此，我们应该构建高层次/基于工作流的 API 而不是低级 API。 So we should build high-level/workflow-based APIs instead of low-level APIs. EXAMPLE:&lt;/p>
&lt;p>&lt;strong>Don’t provide a simple CRUD service for the order entities in the database.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Don’t require the clients to know that to cancel an order, the client has to PUT an order to the generic /order/1 resource with a certain cancelation payload (reflecting the database model) in it. This leads to high coupling (business logic and domain knowledge on the client-side; exposed database model).&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Instead, provide a dedicated resource /order/1/cancelation and add a link to it in the payload of the order resource. The client can navigate to the cancelation URL and send a tailored cancelation payload. The business logic for mapping this payload to the database model is done in the server.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Moreover, the server can easily change the URL without breaking the client, because the client simply follows links. Besides, the decision logic, if an order can be canceled or not is now in the server: If a cancelation a possible the server adds the link to the cancelation resource in the order payload. So the client only has to check if the cancelation links are present (for example to know if he should draw the cancelation button). So we moved domain knowledge away from the client back to the server. Changes to the cancelation conditions can be easily applied by only touching the server, which in turn make the system evolvable. No API change is required.&lt;/strong>&lt;/p>
&lt;h3 id="十五版本化-consider-api-versioning">十五，版本化 Consider API Versioning&lt;/h3>
&lt;p>Nevertheless, you might end up in situations where the above approaches don’t work and you really have to provide different versions of your API.&lt;/p>
&lt;p>Nevertheless, here are the two most popular approaches for versioning:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Versioning via URLs: &lt;code>/v1/&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Versioning via the &lt;code>Accept&lt;/code> HTTP Header:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell"> Accept:
application/vnd.myapi.v1+json
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="versioning-via-urls">Versioning via URLs&lt;/h4>
&lt;p>Just put the version number of your API in the URL of every resource. &lt;code>/v1/books&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>Extremely simple for API developers.&lt;/li>
&lt;li>Extremely simple for API clients.&lt;/li>
&lt;li>URLs can be copied and pasted.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Cons:&lt;/p>
&lt;ul>
&lt;li>Not RESTful&lt;/li>
&lt;li>Breaking URLs. clients have to maintain and update the URLs.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Strictly speaking, this approach is not RESTful because URLs should never change.The question is, how much effort would it take the clients to update the URLs? If the answer is “only a little” then URL versioning might be fine.&lt;/p>
&lt;/blockquote>
&lt;h4 id="versioning-via-accept-http-header-content-negotiation">Versioning via &lt;code>Accept&lt;/code> HTTP Header (Content Negotiation)&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>URLs keep the same&lt;/li>
&lt;li>Considered as RESTful&lt;/li>
&lt;li>HATEOAS-friendly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Cons:&lt;/p>
&lt;ul>
&lt;li>Slightly more difficult to use. Clients have to pay attention to the headers.&lt;/li>
&lt;li>URLs can’t be copied and pasted anymore.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://martinfowler.com/articles/richardsonMaturityModel.html#level0" target="_blank" rel="noopener"
>Richardson Maturity Model&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://kaelzhang81.github.io/2019/05/24/Restful-API%E8%AE%BE%E8%AE%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener"
>Restful API 设计最佳实践 - Tech For Fun&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://phauer.com/2015/restful-api-design-best-practices/" target="_blank" rel="noopener"
>RESTful API Design. Best Practices in a Nutshell.&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=mQkf85S9UoQ&amp;amp;t=1s" target="_blank" rel="noopener"
>REST beyond the obvious – API design for ever evolving systems by Oliver Gierke @ Spring I/O 2018 - YouTube&lt;/a>&lt;/p></description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（三）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</link><pubDate>Fri, 10 Sep 2021 18:02:49 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</guid><description>&lt;img src="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/restful-design.jpg" alt="Featured image of post React17 + ReactHook + TS4 仿Jira项目---学习笔记（三）" />&lt;h1 id="知识点五-restful-api-设计">知识点五： Restful API 设计&lt;/h1>
&lt;h2 id="1-endpoint">1. Endpoint&lt;/h2>
&lt;p>表示 &lt;code>API&lt;/code> 的具体地址&lt;/p>
&lt;p>在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中 &lt;strong>不能有动词，只能有名词&lt;/strong>，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&amp;quot;集合&amp;quot;（collection），所以 API 中的名词也应该使用复数。&lt;/p>
&lt;pre tabindex="0">&lt;code># Example 应使用 HTTPs 协议
https://api.example.com/v1/books
https://api.example.com/v1/movies
&lt;/code>&lt;/pre>&lt;h2 id="2-http-method">2. HTTP METHOD&lt;/h2>
&lt;p>对于资源的具体操作，应由 HTTP 动词表示。&lt;/p>
&lt;pre tabindex="0">&lt;code># 常用方法, (对应 SQL 语句)
GET（SELECT）：从服务器取出资源（一项或多项）。
POST（CREATE）：在服务器新建一个资源。
PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。
DELETE（DELETE）：从服务器删除资源。
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># 具体的使用实例
GET /zoos：列出所有动物园
POST /zoos：新建一个动物园
GET /zoos/ID：获取某个指定动物园的信息
PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）
PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）
DELETE /zoos/ID：删除某个动物园
GET /zoos/ID/animals：列出某个指定动物园的所有动物
DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物
&lt;/code>&lt;/pre>&lt;h2 id="3-filtering">3. Filtering&lt;/h2>
&lt;p>如果记录数量很大，服务器不可能将全部数据返回，此时，&lt;code>API&lt;/code> 应提供参数，用于过滤返回结果。&lt;/p>
&lt;pre tabindex="0">&lt;code># 以下是一些常用参数
?limit=10：指定返回记录的数量
?offset=10：指定返回记录的开始位置。
?page=2&amp;amp;per_page=100：指定第几页，以及每页的记录数。
?sortby=name&amp;amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。
?animal_type_id=1：指定筛选条件
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>参数的设计允许存在冗余，例如：&lt;code>GET /zoo/ID/animals&lt;/code> 等价于 &lt;code>GET /animals?zoo_id=ID&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="4-status-code">4. Status Code&lt;/h2>
&lt;pre tabindex="0">&lt;code># 服务器向用户返回的状态码和提示信息,常用状态码如下：
200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。
201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。
202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）
204 NO CONTENT - [DELETE]：用户删除数据成功。
400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。
401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。
403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。
404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。
406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。
410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。
422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。
500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Glossary/Idempotent" target="_blank" rel="noopener"
>幂等 - 术语表 | MDN&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noopener"
>HTTP response status codes - HTTP | MDN&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="5-error-handling">5. Error Handling&lt;/h2>
&lt;pre tabindex="0">&lt;code># 如果状态码是4xx，就应该向用户返回出错信息。
{
error: &amp;quot;Invalid API key&amp;quot;
}
&lt;/code>&lt;/pre>&lt;h2 id="6-返回结果的规范">6. 返回结果的规范&lt;/h2>
&lt;pre tabindex="0">&lt;code>GET /collection：返回资源对象的列表（数组）
GET /collection/resource：返回单个资源对象
POST /collection：返回新生成的资源对象
PUT /collection/resource：返回完整的资源对象
PATCH /collection/resource：返回完整的资源对象
DELETE /collection/resource：返回一个空文档
&lt;/code>&lt;/pre>&lt;h2 id="7-hypermedia-api-hateoas">7. Hypermedia API (HATEOAS)&lt;/h2>
&lt;p>RESTful API 最好做到 Hypermedia，即返回结果中提供链接，连向其他 API 方法，使得用户不查文档，也知道下一步应该做什么。&lt;/p>
&lt;pre tabindex="0">&lt;code># 比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。
{&amp;quot;link&amp;quot;: {
&amp;quot;rel&amp;quot;: &amp;quot;collection https://www.example.com/zoos&amp;quot;,
&amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/zoos&amp;quot;,
&amp;quot;title&amp;quot;: &amp;quot;List of zoos&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;application/vnd.yourformat+json&amp;quot;
}}
&lt;/code>&lt;/pre>&lt;p>Hypermedia API 的设计被称为 HATEOAS。Github 的 API 就是这种设计，访问 &lt;a class="link" href="https://api.github.com/" target="_blank" rel="noopener"
>https://api.github.com&lt;/a> 会得到一个所有可用 API 的网址列表。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener"
>RESTful API 设计指南&lt;/a>&lt;/p></description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（二）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</link><pubDate>Thu, 09 Sep 2021 20:17:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid><description>&lt;img src="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/cover-api.jpg" alt="Featured image of post React17 + ReactHook + TS4 仿Jira项目---学习笔记（二）" />&lt;h1 id="关键知识点四-restful-api">关键知识点四： Restful API&lt;/h1>
&lt;h2 id="what-is-rest">What is REST&lt;/h2>
&lt;p>REST is acronym for REpresentational State Transfer. It is architectural style for distributed hyermedia systems and was first presented by Roy Fielding in 2000 in his famous dissertation.&lt;/p>
&lt;h2 id="principles-of-rest">Principles of REST&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Client-server&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Stateless&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Each request from client to server must contain all of the information necessary to understand the request, and cannot take advatage of any stored context on the server. Session state is therefore kept entirely on the client.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cacheable&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Uniform interface&lt;/strong>（统一接口）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. In order to obtain a uniform inerface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: &lt;em>identification of resources&lt;/em>; &lt;em>manipulation of resources through representations&lt;/em>; &lt;em>self-descriptive messages&lt;/em>; and, &lt;em>hypermedia as the engine of application state&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>identification of resources :使用&lt;code>URI&lt;/code>作为资源标识符；客户端和服务器之间，传递这种资源的某种表现层（representation）; 资源本身与返回给 client 的 representation 分开(理解为：URI 只代表资源的实体或资源的位置， 不代表其形式，比如一段文本，可以是 json，HTML，etc)。例如，服务器不直接发送其数据库内容，而是发送一些表示某些数据库记录的 HTML，XML 或 JSON。
&lt;em>具体表现形式，应该在 HTTP 请求头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对&amp;quot;表现层&amp;quot;的描述&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>manipulation of the resources through representations: 当客户端持有资源的表示（包括附加的任何元数据）时，它有足够的信息来修改或删除服务器上的资源&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Self-descriptive Messages （自描述信息）： 每条消息都包含足够的信息来描述如何处理该消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hypermedia as the engine of application state: client 通过 body/header/query_params/uri_name 来提供状态，服务器收到这些内容，通过 HTTP 响应状态码和响应头向服务端提供状态，成为超链接。且，在必要时，链接包含在返回的正文（或标题）中，以提供用于检索对象本身或相关对象的 URI。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Layered system&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot &amp;ldquo;see&amp;rdquo; beyond the immedite layer with which they are interacting.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端通常无法判断它是直接连接到终端服务器，还是中间服务器。 中间服务器可以通过启用负载平衡和提供共享缓存来提高系统可伸缩性。 Layers 也可以实施安全策略。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Code on demand(optional)&lt;/strong>(唯一一个可选约束，其他约束必须实现)&lt;/p>
&lt;ul>
&lt;li>REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts(JS etc). This simplifies clients by reducing the number of features required to be pre-implemented.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="resource">Resource&lt;/h2>
&lt;blockquote>
&lt;p>The key abstraction of information in REST is a resource.&lt;/p>
&lt;/blockquote>
&lt;p>Any information that can be named can be a resource. REST uses a &lt;strong>resource indentifier&lt;/strong> to identify the particular resource involved in an interaction between comonents.&lt;/p>
&lt;p>REST 的名称&amp;quot;表现层状态转化&amp;quot;中，省略了主语。&amp;ldquo;表现层&amp;quot;其实指的是&amp;quot;资源&amp;rdquo;（Resources）的&amp;quot;表现层&amp;quot;。&lt;/p>
&lt;p>所谓&amp;quot;资源&amp;quot;，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个 URI（统一资源定位符）指向它，每种资源对应一个特定的 URI。要获取这个资源，访问它的 URI 就可以，因此 URI 就成了每一个资源的地址或独一无二的识别符。&lt;/p>
&lt;h2 id="representation">Representation&lt;/h2>
&lt;p>&amp;ldquo;资源&amp;quot;是一种信息实体，它可以有多种外在表现形式。我们把&amp;quot;资源&amp;quot;具体呈现出来的形式，叫做它的&amp;quot;表现层&amp;rdquo;（Representation）。&lt;/p>
&lt;h2 id="state-transfer">State Transfer&lt;/h2>
&lt;p>互联网通信协议 HTTP 协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生&amp;quot;状态转化&amp;quot;（State Transfer）。而这种转化是建立在表现层之上的，所以就是&amp;quot;表现层状态转化&amp;quot;。具体如下：&lt;/p>
&lt;h3 id="resource-method">Resource Method&lt;/h3>
&lt;blockquote>
&lt;p>Another important thing associated with REST is resource methods to be used to perform the desired transition. A large number of people wrongly relate resource methods to HTTP GET/PUT/POST/DELETE methods.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>GET&lt;/strong> 用来获取资源&lt;/li>
&lt;li>&lt;strong>POST&lt;/strong> 用来新建资源（也可以用于更新资源）&lt;/li>
&lt;li>PUT 用来更新资源&lt;/li>
&lt;li>DELETE 用来删除资源&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>In simplest words, in the REST architectural style, data and functionality are considered resources and are accessed using Uniform Resource Identifiers (URIs). The resources are acted upon by using a set of simple, well-defined operations. The clients and servers exchange representations of resources by using a standardized interface and protocol – typically HTTP.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Resources are decoupled from their representation so that their content can be accessed in a variety of formats, such as HTML, XML, plain text, PDF, JPEG, JSON, and others. Metadata about the resource is available and used, for example, to control caching, detect transmission errors, negotiate the appropriate representation format, and perform authentication or access control. And most importantly, every interaction with a resource is stateless.&lt;/p>
&lt;/blockquote></description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（一）</title><link>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link><pubDate>Wed, 08 Sep 2021 23:50:49 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid><description>&lt;img src="https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/react-jira-cover.jpg" alt="Featured image of post React17 + ReactHook + TS4 仿Jira项目---学习笔记（一）" />&lt;h1 id="第一章">第一章&lt;/h1>
&lt;h3 id="知识点一-用-create-react-app-初始化项目">知识点一： 用 &lt;code>create-react-app&lt;/code> 初始化项目：&lt;/h3>
&lt;h4 id="1-quick-start">1. Quick Start&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">npx create-react-app react-jira --template typescript
&lt;span class="c1"># or&lt;/span>
npm init react-app react-jira
&lt;span class="c1"># or&lt;/span>
yarn create react-app react-jira
npx create-react-app my-app --use-npm &lt;span class="c1"># if you prefer to use npm&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-folder-structure">2. Folder Structure&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won’t see them.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>字体，图片等也同样应置于 scr 目录中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Only files inside public can be used from public/index.html.&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Component&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="s1">&amp;#39;./Button.css&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Tell webpack that Button.js uses these styles
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kr">class&lt;/span> &lt;span class="nx">Button&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// You can use them as regular CSS styles
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Button&amp;#39;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="3-analizing-the-bundle-size">3. Analizing the Bundle Size&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fish" data-lang="fish">&lt;span class="nf">npm&lt;/span> install &lt;span class="na">--save&lt;/span> &lt;span class="nb">source&lt;/span>&lt;span class="na">-map-explorer&lt;/span>
&lt;span class="k">or&lt;/span>
&lt;span class="nf">yarn&lt;/span> add &lt;span class="nb">source&lt;/span>&lt;span class="na">-map-explorer&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">package.json&lt;/span>
&lt;span class="s2">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">+&lt;/span> &lt;span class="nt">&amp;#34;analyze&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;source-map-explorer &amp;#39;build/static/js/*.js&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;start&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;react-scripts start&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;build&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;react-scripts build&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;react-scripts test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="知识点二-用-prettier-统一代码格式化风格">知识点二： 用 Prettier 统一代码格式化风格&lt;/h3>
&lt;h4 id="1-quick-start-1">1. Quick Start&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fish" data-lang="fish">&lt;span class="nf">yarn&lt;/span> add &lt;span class="na">--dev&lt;/span> &lt;span class="na">--exact&lt;/span> prettier
&lt;span class="k">echo&lt;/span> &lt;span class="o">{}&amp;gt;&lt;/span> .prettierrc.json
&lt;span class="c"># then create a .prettierignore file to let the Prettier CLI and editors know which files to not format.
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c"># Ignore artifacts:
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">build&lt;/span>
&lt;span class="nf">coverage&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-usage">2. Usage&lt;/h4>
&lt;h5 id="in-command-line">In Command line&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fish" data-lang="fish">&lt;span class="nf">npx&lt;/span> prettier &lt;span class="na">--write&lt;/span> .
&lt;span class="c"># or
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">yarn&lt;/span> prettier &lt;span class="na">--write&lt;/span> .
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="setup-in-editor">Setup In Editor&lt;/h5>
&lt;p>&lt;a class="link" href="https://prettier.io/docs/en/install.html#set-up-your-editor" target="_blank" rel="noopener"
>Prettier set up in editor&lt;/a>&lt;/p>
&lt;h5 id="git-hook-pre-commit-hook">Git Hook (Pre-commit Hook)&lt;/h5>
&lt;p>&lt;a class="link" href="https://prettier.io/docs/en/precommit.html" target="_blank" rel="noopener"
>Pre-commit Hook · Prettier&lt;/a>&lt;/p>
&lt;h5 id="git-commitlint">Git Commitlint&lt;/h5>
&lt;p>&lt;a class="link" href="https://commitlint.js.org/#/?id=getting-started" target="_blank" rel="noopener"
>commitlint - Lint commit messages&lt;/a>&lt;/p>
&lt;p>commitlint checks if your commit messages meet the conventional commit format.&lt;/p>
&lt;p>&lt;a class="link" href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noopener"
>Conventional Commits&lt;/a>
&lt;a class="link" href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noopener"
>约定式提交&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// 常用类型 type
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;build&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Changes that affect the build system or external dependencies&amp;#34;&lt;/span>
&lt;span class="s2">&amp;#34;ci&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Changes to our CI configuration files and scripts&amp;#34;&lt;/span>
&lt;span class="c1">// &amp;#34;chore&amp;#34;: &amp;#34;updating grunt tasks etc; no production code change&amp;#34;,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;docs&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Documentation only changes&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;feat&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;new feature for the user, not a new feature for build script&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;fix&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A bug fix for user, not a fix to a build script&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;perf&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A code change that impoves performance&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;refactor&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A code change that neither fixes a bug nor adds a feature&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;revert&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;If the commit reverts a previous commit, it should begin with revert&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;style&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons,etc)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Adding missing tests or correcting existing tests&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;BREAKING CHANGE:&amp;#34;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>type(scope?): subject #scope is optional; multiple scopes are supported (current delimiter options: &amp;quot;/&amp;quot;, &amp;quot;\&amp;quot; and &amp;quot;,&amp;quot;) &lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>scope&lt;/p>
&lt;/blockquote>
&lt;p>Example &lt;!-- raw HTML omitted --> values: #&lt;/p>
&lt;ul>
&lt;li>init&lt;/li>
&lt;li>runner&lt;/li>
&lt;li>watcher&lt;/li>
&lt;li>config&lt;/li>
&lt;li>web-server&lt;/li>
&lt;li>proxy&lt;/li>
&lt;li>etc&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>why use conventional commits&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Automatically generating CHANGELOGS&lt;/li>
&lt;li>Automatically determining a semantic version bump(base on the types of commits landed)&lt;/li>
&lt;li>Communicating the nature of changes to teammates, the public, and other stakeholders&lt;/li>
&lt;li>Triggering build and publish processes&lt;/li>
&lt;li>Making it easier for people to contribute to you projects, by allowing them to explore a more structured commit history&lt;/li>
&lt;/ul>
&lt;p>以上： 一个项目开始阶段的规范化配置。重点： Conventional Commits&lt;/p>
&lt;h3 id="知识点三-json-server">知识点三： Json-server&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/typicode/json-server#table-of-contents" target="_blank" rel="noopener"
>typicode/json-server: Get a full fake REST API with zero coding&lt;/a>&lt;/p></description></item><item><title>Install Go on Mac with Homebrew</title><link>https://youkoucoding.github.io/p/golang-config/</link><pubDate>Tue, 07 Sep 2021 23:46:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/golang-config/</guid><description>&lt;img src="https://youkoucoding.github.io/p/golang-config/cover.jpg" alt="Featured image of post Install Go on Mac with Homebrew" />&lt;blockquote>
&lt;p>Precondition: macOS Big Sur 11.5.2&lt;/p>
&lt;/blockquote>
&lt;h2 id="golangs-installation-and-configuration-with-homebrew-in-fish-shell">Golang&amp;rsquo;s installation and configuration with homebrew in Fish shell&lt;/h2>
&lt;h3 id="1-install-golang-with-homebrew">1. Install golang with homebrew&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fish" data-lang="fish">&lt;span class="nf">brew&lt;/span> update
&lt;span class="nf">brew&lt;/span> search golang
&lt;span class="nf">brew&lt;/span> info golang &lt;span class="c"># show the information of golang
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">brew&lt;/span> install golang
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-setup-the-workspace">2. Setup the workspace:&lt;/h3>
&lt;h4 id="add-environment-variables">Add environment variables:&lt;/h4>
&lt;p>First, we&amp;rsquo;ll need to tell Go the location of our workspace.&lt;/p>
&lt;p>We&amp;rsquo;ll add some environment variables into shell config.&lt;/p>
&lt;h5 id="bash-or-zsh">&lt;code>bash or zsh&lt;/code>&lt;/h5>
&lt;p>The config files is located at home directory:&lt;/p>
&lt;p>&lt;code>.bash_profile, bashrc, or zshrc&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOPATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$HOME&lt;/span>/project/go-workspace &lt;span class="c1"># don&amp;#39;t forget to change the path correctly&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOROOT&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/opt/go/libexec
&lt;span class="c1"># export GOROOT=/usr/local/Cellar/go/1.17/libexec&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$GOPATH&lt;/span>/bin
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$GOROOT&lt;/span>/bin
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;code>GOPATH&lt;/code> is the place where we get, build and install packages outside the standard Go tree(AND it&amp;rsquo;s not where the executables are), so it is customizable and thus you can get &lt;code>GOPATH&lt;/code> wherever you want.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>GOROOT&lt;/code>, however, is the place where the Go binary distributions (In linux, it&amp;rsquo;s normally in &lt;code>/usr/local/go&lt;/code>; but for macOs, the Go and the tools are installed in &lt;code>/usr/local/Cellar/go/1.17/libexec&lt;/code> by default as well as a soft link to &lt;code>/usr/local/opt/go/libexec&lt;/code> will be created at the same time), so on Linux normally we don’t have to set this variable, but on MacOS, we have to change it as brew installs Go tools to a different path.&lt;/p>
&lt;/blockquote>
&lt;h5 id="fish-shell">&lt;code>fish shell&lt;/code>&lt;/h5>
&lt;p>Add the code to home directory&amp;rsquo;s &lt;code>~/.config/fish/config.fish&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fish" data-lang="fish">&lt;span class="k">set&lt;/span> &lt;span class="na">-x&lt;/span> &lt;span class="nv">GOPATH&lt;/span> &lt;span class="nv">$HOME&lt;/span>/project/go&lt;span class="na">-workspace&lt;/span>
&lt;span class="k">set&lt;/span> &lt;span class="na">-x&lt;/span> &lt;span class="nv">GOROOT&lt;/span> /usr/local/opt/go/libexec
&lt;span class="k">set&lt;/span> &lt;span class="na">-x&lt;/span> &lt;span class="nv">PATH&lt;/span> &lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$GOPATH&lt;/span>/bin
&lt;span class="k">set&lt;/span> &lt;span class="na">-x&lt;/span> &lt;span class="nv">PATH&lt;/span> &lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$GOROOT&lt;/span>/bin
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="create-our-own-workspace">Create our own workspace:&lt;/h4>
&lt;p>&lt;code>mkdir -p $GOPATH $GOPATH/src $GOPATH/pkg $GOPATH/bin&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>$GOPATH/src&lt;/code>: where we put the go projects source code&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>$GOPATH/pkg&lt;/code>: contains every package objects&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>$GOPATH/bin&lt;/code>: The compiled binaries&amp;rsquo;s home.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Chinese Test</title><link>https://youkoucoding.github.io/p/test-chinese/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/test-chinese/</guid><description>&lt;img src="https://youkoucoding.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg" alt="Featured image of post Chinese Test" />&lt;h2 id="正文测试">正文测试&lt;/h2>
&lt;p>而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。&lt;/p>
&lt;p>奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。&lt;/p>
&lt;h2 id="引用">引用&lt;/h2>
&lt;blockquote>
&lt;p>思念是最暖的忧伤像一双翅膀&lt;br>
让我停不了飞不远在过往游荡&lt;br>
不告而别的你 就算为了我着想&lt;br>
这么沉痛的呵护 我怎么能翱翔&lt;/p>
&lt;p>&lt;em>&lt;a class="link" href="https://www.youtube.com/watch?v=3aypp_YlBzI" target="_blank" rel="noopener"
>最暖的憂傷 - 田馥甄&lt;/a>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h2 id="图片">图片&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 66;
flex-basis: 160px"
>
&lt;a href="https://youkoucoding.github.io/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash.jpg" data-size="667x1000">
&lt;img src="https://youkoucoding.github.io/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash.jpg"
width="667"
height="1000"
srcset="https://youkoucoding.github.io/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash_hu595aaf3b3dbbb41af5aed8d3958cc9f9_13854_480x0_resize_q75_box.jpg 480w, https://youkoucoding.github.io/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash_hu595aaf3b3dbbb41af5aed8d3958cc9f9_13854_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Photo by Florian Klauer on Unsplash">
&lt;/a>
&lt;figcaption>Photo by Florian Klauer on Unsplash&lt;/figcaption>
&lt;/figure> &lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 359px"
>
&lt;a href="https://youkoucoding.github.io/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash.jpg" data-size="1000x667">
&lt;img src="https://youkoucoding.github.io/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash.jpg"
width="1000"
height="667"
srcset="https://youkoucoding.github.io/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_480x0_resize_q75_box.jpg 480w, https://youkoucoding.github.io/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Photo by Luca Bravo on Unsplash">
&lt;/a>
&lt;figcaption>Photo by Luca Bravo on Unsplash&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 320px"
>
&lt;a href="https://youkoucoding.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg" data-size="1000x750">
&lt;img src="https://youkoucoding.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg"
width="1000"
height="750"
srcset="https://youkoucoding.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_480x0_resize_q75_box.jpg 480w, https://youkoucoding.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Photo by Helena Hertz on Unsplash">
&lt;/a>
&lt;figcaption>Photo by Helena Hertz on Unsplash&lt;/figcaption>
&lt;/figure> &lt;figure
class="gallery-image"
style="
flex-grow: 66;
flex-basis: 160px"
>
&lt;a href="https://youkoucoding.github.io/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash.jpg" data-size="667x1000">
&lt;img src="https://youkoucoding.github.io/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash.jpg"
width="667"
height="1000"
srcset="https://youkoucoding.github.io/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash_hub241c2a9c7a2caf7e16a2a5bbc7141ff_18711_480x0_resize_q75_box.jpg 480w, https://youkoucoding.github.io/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash_hub241c2a9c7a2caf7e16a2a5bbc7141ff_18711_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Photo by Hudai Gayiran on Unsplash">
&lt;/a>
&lt;figcaption>Photo by Hudai Gayiran on Unsplash&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">![&lt;span class="nt">Photo by Florian Klauer on Unsplash&lt;/span>](&lt;span class="na">florian-klauer-nptLmg6jqDo-unsplash.jpg&lt;/span>) ![&lt;span class="nt">Photo by Luca Bravo on Unsplash&lt;/span>](&lt;span class="na">luca-bravo-alS7ewQ41M8-unsplash.jpg&lt;/span>)
![&lt;span class="nt">Photo by Helena Hertz on Unsplash&lt;/span>](&lt;span class="na">helena-hertz-wWZzXlDpMog-unsplash.jpg&lt;/span>) ![&lt;span class="nt">Photo by Hudai Gayiran on Unsplash&lt;/span>](&lt;span class="na">hudai-gayiran-3Od_VKcDEAA-unsplash.jpg&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>相册语法来自 &lt;a class="link" href="https://typlog.com/" target="_blank" rel="noopener"
>Typlog&lt;/a>&lt;/p></description></item><item><title>Markdown Syntax Guide</title><link>https://youkoucoding.github.io/p/markdown-syntax-guide/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/markdown-syntax-guide/</guid><description>&lt;img src="https://youkoucoding.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Markdown Syntax Guide" />&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p>
&lt;h2 id="headings">Headings&lt;/h2>
&lt;p>The following HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>—&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level while &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="h1">H1&lt;/h1>
&lt;h2 id="h2">H2&lt;/h2>
&lt;h3 id="h3">H3&lt;/h3>
&lt;h4 id="h4">H4&lt;/h4>
&lt;h5 id="h5">H5&lt;/h5>
&lt;h6 id="h6">H6&lt;/h6>
&lt;h2 id="paragraph">Paragraph&lt;/h2>
&lt;p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p>
&lt;p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p>
&lt;h2 id="blockquotes">Blockquotes&lt;/h2>
&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;h4 id="blockquote-without-attribution">Blockquote without attribution&lt;/h4>
&lt;blockquote>
&lt;p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong>Note&lt;/strong> that you can use &lt;em>Markdown syntax&lt;/em> within a blockquote.&lt;/p>
&lt;/blockquote>
&lt;h4 id="blockquote-with-attribution">Blockquote with attribution&lt;/h4>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;!-- raw HTML omitted -->
— &lt;!-- raw HTML omitted -->Rob Pike&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;h2 id="tables">Tables&lt;/h2>
&lt;p>Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="inline-markdown-within-tables">Inline Markdown within tables&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Italics&lt;/th>
&lt;th>Bold&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-blocks">Code Blocks&lt;/h2>
&lt;h4 id="code-block-with-backticks">Code block with backticks&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="code-block-indented-with-four-spaces">Code block indented with four spaces&lt;/h4>
&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h4 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo&amp;rsquo;s internal highlight shortcode&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="list-types">List Types&lt;/h2>
&lt;h4 id="ordered-list">Ordered List&lt;/h4>
&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h4 id="unordered-list">Unordered List&lt;/h4>
&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h4 id="nested-list">Nested list&lt;/h4>
&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dairy
&lt;ul>
&lt;li>Milk&lt;/li>
&lt;li>Cheese&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark&lt;/h2>
&lt;p>&lt;!-- raw HTML omitted -->GIF&lt;!-- raw HTML omitted --> is a bitmap image format.&lt;/p>
&lt;p>H&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->O&lt;/p>
&lt;p>X&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted --> + Y&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted --> = Z&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Press &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->CTRL&lt;!-- raw HTML omitted -->+&lt;!-- raw HTML omitted -->ALT&lt;!-- raw HTML omitted -->+&lt;!-- raw HTML omitted -->Delete&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> to end the session.&lt;/p>
&lt;p>Most &lt;!-- raw HTML omitted -->salamanders&lt;!-- raw HTML omitted --> are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class="link" href="https://www.youtube.com/watch?v=PAAkCSZUG1c" target="_blank" rel="noopener"
>talk&lt;/a> during Gopherfest, November 18, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Rich Content</title><link>https://youkoucoding.github.io/p/rich-content/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/rich-content/</guid><description>&lt;p>Hugo ships with several &lt;a class="link" href="https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes" target="_blank" rel="noopener"
>Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a class="link" href="https://gohugo.io/about/hugo-and-gdpr/" target="_blank" rel="noopener"
>Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p>
&lt;hr>
&lt;h2 id="youtube-privacy-enhanced-shortcode">YouTube Privacy Enhanced Shortcode&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/ZJthWmvUzzc"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="twitter-simple-shortcode">Twitter Simple Shortcode&lt;/h2>
&lt;style type="text/css">
.twitter-tweet {
font: 14px/1.45 -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
border-left: 4px solid #2b7bb9;
padding-left: 1.5em;
color: #555;
}
.twitter-tweet a {
color: #2b7bb9;
text-decoration: none;
}
blockquote.twitter-tweet a:hover,
blockquote.twitter-tweet a:focus {
text-decoration: underline;
}
&lt;/style>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">“In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”&lt;br>— Jan Tschichold &lt;a href="https://t.co/gcv7SrhvJb">pic.twitter.com/gcv7SrhvJb&lt;/a>&lt;/p>&amp;mdash; Graphic Design History (@DesignReviewed) &lt;a href="https://twitter.com/DesignReviewed/status/1085870671291310081?ref_src=twsrc%5Etfw">January 17, 2019&lt;/a>&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="vimeo-simple-shortcode">Vimeo Simple Shortcode&lt;/h2>
&lt;style>
.__h_video {
position: relative;
padding-bottom: 56.23%;
height: 0;
overflow: hidden;
width: 100%;
background: #000;
}
.__h_video img {
width: 100%;
height: auto;
color: #000;
}
.__h_video .play {
height: 72px;
width: 72px;
left: 50%;
top: 50%;
margin-left: -36px;
margin-top: -36px;
position: absolute;
cursor: pointer;
}
&lt;/style>
&lt;div class="s_video_simple __h_video">
&lt;a href="https://vimeo.com/4.8912912e&amp;#43;07" rel="noopener" target="_blank">
&lt;img src="https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640" srcset="https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640 1x, https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640 2x" alt="Sing Jan Swing - Kinetic Type">
&lt;div class="play">&lt;svg version="1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 61 61">&lt;circle cx="30.5" cy="30.5" r="30.5" opacity=".8" fill="#000">&lt;/circle>&lt;path d="M25.3 19.2c-2.1-1.2-3.8-.2-3.8 2.2v18.1c0 2.4 1.7 3.4 3.8 2.2l16.6-9.1c2.1-1.2 2.1-3.2 0-4.4l-16.6-9z" fill="#fff">&lt;/path>&lt;/svg>&lt;/div>&lt;/a>&lt;/div></description></item><item><title>Placeholder Text</title><link>https://youkoucoding.github.io/p/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/placeholder-text/</guid><description>&lt;img src="https://youkoucoding.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash.jpg" alt="Featured image of post Placeholder Text" />&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p>
&lt;p>Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p>
&lt;ol>
&lt;li>Exierant elisi ambit vivere dedere&lt;/li>
&lt;li>Duce pollice&lt;/li>
&lt;li>Eris modo&lt;/li>
&lt;li>Spargitque ferrea quos palude&lt;/li>
&lt;/ol>
&lt;p>Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.&lt;/p>
&lt;ol>
&lt;li>Comas hunc haec pietate fetum procerum dixit&lt;/li>
&lt;li>Post torum vates letum Tiresia&lt;/li>
&lt;li>Flumen querellas&lt;/li>
&lt;li>Arcanaque montibus omnes&lt;/li>
&lt;li>Quidem et&lt;/li>
&lt;/ol>
&lt;h1 id="vagus-elidunt">Vagus elidunt&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon" target="_blank" rel="noopener"
>The Van de Graaf Canon&lt;/a>&lt;/p>
&lt;h2 id="mane-refeci-capiebant-unda-mulcebat">Mane refeci capiebant unda mulcebat&lt;/h2>
&lt;p>Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong>Faces illo pepulere&lt;/strong> tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p>
&lt;p>Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.&lt;/p>
&lt;p>Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong>mitis temploque&lt;/strong> vocatus, inque alis, &lt;em>oculos nomen&lt;/em> non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides &lt;strong>parte&lt;/strong>.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://youkoucoding.github.io/p/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p>
&lt;p>In this example we will be using &lt;a class="link" href="https://katex.org/" target="_blank" rel="noopener"
>KaTeX&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a partial under &lt;code>/layouts/partials/math.html&lt;/code>&lt;/li>
&lt;li>Within this partial reference the &lt;a class="link" href="https://katex.org/docs/autorender.html" target="_blank" rel="noopener"
>Auto-render Extension&lt;/a> or host these scripts locally.&lt;/li>
&lt;li>Include the partial in your templates like so:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">{{&lt;/span> &lt;span class="k">if&lt;/span> or .Params.math .Site.Params.math &lt;span class="o">}}&lt;/span>
&lt;span class="o">{{&lt;/span> partial &lt;span class="s2">&amp;#34;math.html&amp;#34;&lt;/span> . &lt;span class="o">}}&lt;/span>
&lt;span class="o">{{&lt;/span> end &lt;span class="o">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>To enable KaTex globally set the parameter &lt;code>math&lt;/code> to &lt;code>true&lt;/code> in a project&amp;rsquo;s configuration&lt;/li>
&lt;li>To enable KaTex on a per page basis include the parameter &lt;code>math: true&lt;/code> in content files&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Use the online reference of &lt;a class="link" href="https://katex.org/docs/supported.html" target="_blank" rel="noopener"
>Supported TeX Functions&lt;/a>&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;p>Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p></description></item><item><title>Emoji Support</title><link>https://youkoucoding.github.io/p/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://youkoucoding.github.io/p/emoji-support/</guid><description>&lt;img src="https://youkoucoding.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post Emoji Support" />&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p>
&lt;p>The &lt;a class="link" href="https://gohugo.io/functions/emojify/" target="_blank" rel="noopener"
>&lt;code>emojify&lt;/code>&lt;/a> function can be called directly in templates or &lt;a class="link" href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes" target="_blank" rel="noopener"
>Inline Shortcodes&lt;/a>.&lt;/p>
&lt;p>To enable emoji globally, set &lt;code>enableEmoji&lt;/code> to &lt;code>true&lt;/code> in your site&amp;rsquo;s &lt;a class="link" href="https://gohugo.io/getting-started/configuration/" target="_blank" rel="noopener"
>configuration&lt;/a> and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The &lt;a class="link" href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="noopener"
>Emoji cheat sheet&lt;/a> is a useful reference for emoji shorthand codes.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>N.B.&lt;/strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">.emoji {
font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
}&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>