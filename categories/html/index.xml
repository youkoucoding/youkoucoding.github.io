<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTML on 技術の手帳</title><link>https://youkoucoding.github.io/categories/html/</link><description>Recent content in HTML on 技術の手帳</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 23 Sep 2021 23:39:38 +0900</lastBuildDate><atom:link href="https://youkoucoding.github.io/categories/html/index.xml" rel="self" type="application/rss+xml"/><item><title>毎日のフロントエンド　10</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/</link><pubDate>Thu, 23 Sep 2021 23:39:38 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/</guid><description>第十日 HTML #Question: viewport 常见设置都有哪些？
viewport 就是视区窗口，也就是浏览器中显示网页的部分。PC 端上基本等于设备显示区域，但在移动端上viewport 会超出设备的显示区域 (即会有横向滚动条出现)。设备默认的 viewport 在 980 - 1024 之间。
设置 解释 width 设置 layout viewport 的宽度，为一个正整数，或字符串&amp;quot;width-device&amp;quot; initial-scale 设置页面的初始缩放值，为一个数字，可以带小数 minimum-scale 允许用户的最小缩放值，为一个数字，可以带小数 maximum-scale 允许用户的最大缩放值，为一个数字，可以带小数 height 设置 layout viewport 的高度，这个属性对我们并不重要，很少使用 user-scalable 是否允许用户进行缩放，值为&amp;quot;no&amp;quot;或&amp;quot;yes&amp;quot;, no 代表不允许，yes 代表允许 // width=device-width, initial-scale=1.0 是为了兼容不同浏览器 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&amp;#34; /&amp;gt; dpr 与 CSS 像素。CSS 像素的 1px 在 PC 端上与设备的物理像素基本一致，而到手机端就会有两个物理像素对应一个 CSS 像素的情况出现（如 iPhone 的视网膜屏）。 所以 iPhone 上的 dpr = 2 即 2 个物理像素 / 一个 CSS 像素（独立像素）</description></item><item><title>毎日のフロントエンド　9</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/</link><pubDate>Thu, 23 Sep 2021 16:48:11 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/</guid><description>第九日 HTML #Question: 浏览器内多个标签页之间的通信方式有哪些？(网页间 消息 通讯)
是什么？ 在浏览器中，两个不同页面（A 页面的 window ！= B 页面的 window）网页之间的消息传递
消息传递方式 1. WebSocket - 可跨域 WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。
WebSocket 教程
2. postMessage - 可跨域 window.postMessage() 方法安全地启用 Window 对象之间的跨源通信
对将接收消息的窗口的引用，获得此类引用的方法包括：
&amp;lt;iframe&amp;gt; Window.open （生成一个新窗口然后引用它） Window.opener （引用产生这个的窗口） 3. Worker 之 ShareWorker webworker，作为浏览器的一个新特性，可以提供一个额外的线程来执行一些 js 代码（真正的多线程），并且不会影响到浏览器用户界面，但是不能 DOM 操作。
SharedWorker 可以被多个 window 共同使用，所以可以用来跨页面传输数据，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)。
4. Server-Sent Events HTML5 服务器发送事件（server-sent event）允许网页获得来自服务器的更新。 Server-Sent 事件指的是网页自动获取来自服务器的更新。</description></item><item><title>毎日のフロントエンド　8</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/</link><pubDate>Wed, 22 Sep 2021 16:40:32 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/</guid><description>第八日 CSS #Question: 清除浮动的方式有哪些及优缺点？
现阶段 较多使用Flex 布局 浮动带来的问题是盒子塌陷问题 什么是盒子塌陷？ 外部盒子本应该包裹住内部的浮动盒子，结果却没有
原因 父元素只包含浮动元素，那么它的高度就会塌缩为零, 前提是没有设置高度height属性，或者设置为 auto，就会出现盒子塌陷，如果父元素不包含任何的可见背景，这个问题会很难被注意到。 因为子元素设置了 float 属性，而 float 属性会把元素从标准文档流中抽离，直接结果就是外部盒子丢了两个孩子，因为内部没有其它盒子了，所以外部盒子只包裹文本节点内容，却把两个内部盒子扔在外面了。
解决方案 把外部盒子也从标准文档流中抽离
缺点是： 父元素加上 float 有可能影响整个页面 在外部盒子内最下方添上带 clear 属性的空盒子： 把 &amp;lt;div style=&amp;quot;clear:both;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;放在盒内底部
给外部盒子添加： overflow:hidden 清除浮动
用after伪元素清除浮动
.clearfix { \*zoom: 1; } .clearfix:before, .clearfix:after { display: table; line-height: 0; content: &amp;#39;&amp;#39;; } .clearfix:after { clear: both; } 当然，还有前文提到的 BFC</description></item><item><title>毎日のフロントエンド　7</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/</link><pubDate>Tue, 21 Sep 2021 10:52:54 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/</guid><description>第七日 HTML #Question: iframe 框架都有哪些优缺点？
The &amp;lt;iframe&amp;gt; HTML element represents a nested browsing context, embedding another HTML page into the current one.
&amp;lt;iframe&amp;gt;: The Inline Frame element - HTML: HyperText Markup Language | MDN
iFrame — A love story. by Max Rafferty | Slices of Bread | Medium
Advantages of &amp;lt;iframe&amp;gt;:
iframe can display the embedded web page intact. If there are multiple pages referencing iframe, you only need to modify the content of iframe, and then you can change the content of every page you call, which is convenient and fast.</description></item><item><title>毎日のフロントエンド　6</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/</link><pubDate>Mon, 20 Sep 2021 16:14:06 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/</guid><description>第六日 HTML #Question: label 都有哪些作用？并举相应的例子说明
The &amp;lt;label&amp;gt; HTML element represents a caption for an item in a user interface.
表示用户界面中某个元素的说明。
Associating a &amp;lt;label&amp;gt; with an &amp;lt;input&amp;gt; element offers some major advantages:
A screen reader will read out the label when the user is focused on the form &amp;lt;input&amp;gt;, making it easier for an assistive technology user to understand what data should be entered.
When a user clicks or touches a label, the browser passes the focus to its associated input.</description></item><item><title>毎日のフロントエンド　5</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/</link><pubDate>Sun, 19 Sep 2021 12:16:31 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/</guid><description>第五日 HTML #Question: 简述超链接 target 属性的取值和作用
target Where to display the linked URL. The following keywords have special meanings for where load the URL
value 描述 description _self （默认）在相同的框架中打开被链接文档 the current browsing context(default) _blank 在新窗口中打开被链接文档 usually a new tab, but users can configure browers to open a new window instead _parent 在父框架集中打开被链接文档 the parent browsing context of the current one.</description></item><item><title>毎日のフロントエンド　4</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/</link><pubDate>Sat, 18 Sep 2021 13:33:07 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/</guid><description>第四天 HTML #Question: HTML5 的文件离线储存怎么使用，工作原理是什么？
TL;DR &amp;ndash; HTML5 local storage is an alternative to cookies, allowing web applications to store user information in their browser.
With web storagem web applications can store data locally within the user&amp;rsquo;s browser.
Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.</description></item><item><title>毎日のフロントエンド　3</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/</link><pubDate>Thu, 16 Sep 2021 17:39:42 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/</guid><description>第三天 HTML #Question: HTML 全局属性(global attribute)有哪些（包含HTML5）?
Global attributes - HTML: HyperText Markup Language | MDN
Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.
document.body.__proto__
accesskey: 生成键盘快捷键提示。Provides a hint for generating a keyboard shortcut for the current element. autocapitalize: 控制用户的文本输入 是否 如何 自动大写。 Controls whether and how text input is automatically capitalized as it is entered/edited by user.</description></item><item><title>毎日のフロントエンド　2</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/</link><pubDate>Wed, 15 Sep 2021 19:48:33 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/</guid><description>第二天 HTML #Question: HTML 的元素有哪些（包含 HTML5）？
块级元素 Block
Block elements are meant to structure the main parts of your page, by dividing your content in coherent blocks.
常用：div、p、ul、li、ol 定义页面结构（Structure elements）: aside、footer、header、nav、section、main 文章：address、article、figure、figcaption、h1、h2、h3、h4、h5、h6、pre 表格：table、thead、tbody、tfoot、th、td、caption 表单：form 其他：canvas 行内元素 Inline
Inline elements are meant to differentiate part of a text, to give it a oarticular function or meaning. Inline elements usually comprise a single or few words.
常用：a、img、span 文本：em、i、strong、small 表单：button、input、label、option、progress、select、textarea 媒体：audio、video Block elements can contain either block or inline elements.</description></item><item><title>毎日のフロントエンド　1</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/</link><pubDate>Tue, 14 Sep 2021 11:58:23 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/</guid><description>第一天 HTML #Question: 页面导入样式时，使用 link 和@import 有什么区别？
&amp;lt;link&amp;gt; 是HTML的标签。 The @import is used to import style rules from other style sheets.
&amp;lt;!-- @import Syntax --&amp;gt; @import url; @import url list-of-media-queries; @import url supports(supports-query); @import url supports(supports-query) list-of-media-queries; &amp;lt;link&amp;gt; 引入的样式，在页面加载时，同时加载。 @import 引入的样式需要等页面加载完成之后再加载。
&amp;lt;link&amp;gt; 不存在兼容性问题，@import 不兼容 ie5 以下
&amp;lt;link&amp;gt; 可通过 js 操作 DOM 动态引入样式， @import 不可以
CSS #Question: 圣杯布局和双飞翼布局的理解和区别，并用代码实现
即 css 三栏布局&amp;mdash;改变 viewpoint 宽度，两个边栏的宽度不变(左右定宽)，只会中间的区域变化， 且 中间部分优先渲染</description></item></channel></rss>