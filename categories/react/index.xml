<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on 技術の手帳</title><link>https://youkoucoding.github.io/categories/react/</link><description>Recent content in React on 技術の手帳</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 13 Sep 2021 17:34:37 +0900</lastBuildDate><atom:link href="https://youkoucoding.github.io/categories/react/index.xml" rel="self" type="application/rss+xml"/><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（六）</title><link>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</link><pubDate>Mon, 13 Sep 2021 17:34:37 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</guid><description>What is &amp;ldquo;Lifting State up&amp;rdquo; and Why we need it? Lifting state up is a common pattern that is essential for React developer to know. It helps us avoid more complex pattern for managing our state.
Often there will be a need to share state between different components. The common approach to share state between two components is to move the state to common parent of the two compenont.
我们可以很清楚的明白 React 状态提升主要就是用来处理父组件和子组件的数据传递的；他可以让我们的数据流动的形式是自顶向下单向流动的，所有组件的数据都是来自于他们的父辈组件，也都是由父辈组件来统一存储和修改，再传入子组件当中。</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（五）</title><link>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</link><pubDate>Sun, 12 Sep 2021 17:48:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</guid><description>防抖 与 节流 Debouncing and Throttling in Javascript Debouncing and Throttling are two widely-used techniques to improve the performance of code that gets executed repeatedly within a short time(a peroid of time).
devbounce-throttle Debouncing 防抖 用来实现高频触发函数调用时，实际只调用最后一次函数执行。
即： 触发事件后过一段时间才执行函数， 如果在这段时间内再次触发，则重新计时。
用于可能出现高频调用的 DOM 或 样式修改， 这种高频调用会导致页面高频重排重绘，DOM 闪烁抖动，影响页面性能。
Implementing Debounce: Start with o timeout If the debounced function is called again, reset the timer to the speccial delay In case of timeout, call the debounced function.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（四）</title><link>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</link><pubDate>Sat, 11 Sep 2021 15:14:04 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid><description>关键知识点六： Restful API 设计的几个最佳实践 steps toward the glory of REST Richardson Maturity Model
Level 0 The Starting point for the model is using HTTP as a transport system for remote interactions, but without using any of the mechanisms of the web.If you use SOAP or XML-RPC it&amp;rsquo;s basically the same mechanism, the only difference is that you wrap the XML messages in some kind of envelope.
Level 1 - Resources At level One, rather than making all the requests to s singular service endpoint, we start talking to individual resources.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（三）</title><link>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</link><pubDate>Fri, 10 Sep 2021 18:02:49 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</guid><description>知识点五： Restful API 设计 1. Endpoint 表示 API 的具体地址
在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中 不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&amp;quot;集合&amp;quot;（collection），所以 API 中的名词也应该使用复数。
# Example 应使用 HTTPs 协议 https://api.example.com/v1/books https://api.example.com/v1/movies 2. HTTP METHOD 对于资源的具体操作，应由 HTTP 动词表示。
# 常用方法, (对应 SQL 语句) GET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE）：在服务器新建一个资源。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。 DELETE（DELETE）：从服务器删除资源。 # 具体的使用实例 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 3. Filtering 如果记录数量很大，服务器不可能将全部数据返回，此时，API 应提供参数，用于过滤返回结果。
# 以下是一些常用参数 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page=2&amp;amp;per_page=100：指定第几页，以及每页的记录数。 ?sortby=name&amp;amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件 参数的设计允许存在冗余，例如：GET /zoo/ID/animals 等价于 GET /animals?</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（二）</title><link>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</link><pubDate>Thu, 09 Sep 2021 20:17:16 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid><description>关键知识点四： Restful API What is REST REST is acronym for REpresentational State Transfer. It is architectural style for distributed hyermedia systems and was first presented by Roy Fielding in 2000 in his famous dissertation.
Principles of REST Client-server
By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components. Stateless
Each request from client to server must contain all of the information necessary to understand the request, and cannot take advatage of any stored context on the server.</description></item><item><title>React17 + ReactHook + TS4 仿Jira项目---学习笔记（一）</title><link>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link><pubDate>Wed, 08 Sep 2021 23:50:49 +0900</pubDate><guid>https://youkoucoding.github.io/p/react17--reacthook--ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid><description>第一章 知识点一： 用 create-react-app 初始化项目： 1. Quick Start npx create-react-app react-jira --template typescript # or npm init react-app react-jira # or yarn create react-app react-jira npx create-react-app my-app --use-npm # if you prefer to use npm 2. Folder Structure For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won’t see them.
字体，图片等也同样应置于 scr 目录中
Only files inside public can be used from public/index.</description></item></channel></rss>