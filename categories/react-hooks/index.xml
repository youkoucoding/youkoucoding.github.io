<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React Hooks on 技術の手帳</title><link>https://youkoucoding.github.io/categories/react-hooks/</link><description>Recent content in React Hooks on 技術の手帳</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 30 Sep 2021 14:24:15 +0900</lastBuildDate><atom:link href="https://youkoucoding.github.io/categories/react-hooks/index.xml" rel="self" type="application/rss+xml"/><item><title>React HooksのUseEffect</title><link>https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/</link><pubDate>Thu, 30 Sep 2021 14:24:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/</guid><description>useState: 执行副作用 副作用的定义 通常，副作用是指一段和当前执行结果无关的代码。比如说要修改函数外部的某个变凉，或者发起一个请求等。 在函数组建本次执行中，useEffect 中代码的执行是不影响渲染出来的 UI。
Side effects are all the operations that affect your componet and can&amp;rsquo;t be done during rendering. Things like fetching data, subscriptions or manually changing the DOM are all examples of side effects.
Usage useEffect(callback, dependencies); callback, 要执行的回调函数；
dependencies 可选的依赖项数组。可选， 如果没有依赖项，callback 在函数组建每次执行完成之后都执行;如果依赖项是空数组，则只在第一渲染时实行回调函数； 如果指定依赖项，则在依赖项变化时才执行 callback
useEffect 是每次组件 render 结束后，判断依赖项并执行。
No dependencies array: the function runs after every render Empty dependencies array: the function runs only after the first render (use this for the stuff it&amp;rsquo;s doing will never get stale) Dependencies array with some values: the function runs only if any of those values change 此外，useEffect 允许返回一个函数，用与在组件销毁时，做一些清理操作，防止内存泄漏。 例如，移除监听事件。 类似于 类组件中的 componentWillUnmount function MyComponent() { React.</description></item><item><title>React HooksのUseState</title><link>https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/</link><pubDate>Wed, 29 Sep 2021 00:28:55 +0900</pubDate><guid>https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/</guid><description>useState: 让函数组建具有维持状态的能力 Example import React, { useState } from &amp;#39;react&amp;#39;; const Example = () =&amp;gt; { const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;{count}&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;+&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); }; Usage useState(initialState) 参数 initialState 是创建 state 的初始值， 它可以是任意类型
useState()的返回值是一个有着两个元素的数组。 第一个数组元素用来读取 state 的值， 第二个则是用来设置这个 state 的值的函数。 state为只读变量， 且必须通过setCount来设置 state
如果要创建多个 state， 需要多次调用useState
const [age, setAge] = useState(99); const [fruit, setFruit] = useState(&amp;#39;banana&amp;#39;); const [todos, setTodos] = useState([{ text: &amp;#39;react hooks&amp;#39; }]); Principles useState中的 set 与 class 组件中 setState 类似， 但是 class 组件中的 state 只有一个，因此在类组件中，一般采用对象作为一个 state； useState可以多次创建，更加语义化。</description></item></channel></rss>