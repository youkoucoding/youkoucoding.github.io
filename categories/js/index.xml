<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JS on 技術の手帳</title><link>https://youkoucoding.github.io/categories/js/</link><description>Recent content in JS on 技術の手帳</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 12 Jul 2022 22:29:38 +0900</lastBuildDate><atom:link href="https://youkoucoding.github.io/categories/js/index.xml" rel="self" type="application/rss+xml"/><item><title>毎日のフロントエンド 361~364</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-361~364/</link><pubDate>Tue, 12 Jul 2022 22:29:38 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-361~364/</guid><description>CSS height:100% 和 height:inherit区别 父容器 height: auto，无论 height:100%或者 height:inherit 表现都是 auto. 父容器定高 height: 100px，无论 height:100%或者 height:inherit 表现都是 100px 高. 在 position: absolute 的情况下 height：100%对应的标准是上一个 position:relative 的元素 height： inherit 依然是它的父级元素 Reference fe-interview/history.md</description></item><item><title>毎日のフロントエンド 360</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-360/</link><pubDate>Sun, 10 Jul 2022 23:51:14 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-360/</guid><description>CSS height:100%; 如何让 height:100%起作用
当前元素的包含块的高度是明确的即可有效（height 不为 auto） 如果当前元素的包含块高度也是百分比，就再向上找 如果当前元素是absolute定位的，那么它的height百分比，是相对于浏览器窗口高度的, 绝对定位元素的高度百分比计算是往上找直到找到一个 非 static 的元素 其他的都是最后找到 html 元素，html 元素的高度百分比也是相对浏览器窗口高度， body 默认没有 height Tips 屏幕坐标、（可视窗口）坐标、页面坐标 屏幕坐标 整个电脑屏幕上任意一点的位置坐标，对应的属性分别为screenX，screenY （可视窗口）坐标 可以将浏览器分为两大块，即浏览器上部的用户操作栏 和下部的可视窗口区域 ，该坐标系 的原点位于可视窗口的右上角，对应的属性为clientX,clientY 页面坐标 页面坐标通过事件对象的 pageX 和 pageY 属性，能告诉你事件是在页面中的什么位置发生的。换句话说，这两个属性表示鼠标光标在页面中的位置，因此坐标是从页面本身而非视口的左边和顶边计算的 Reference fe-interview/history.md</description></item><item><title>毎日のフロントエンド 359</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-359/</link><pubDate>Fri, 08 Jul 2022 23:28:05 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-359/</guid><description>Tips 组件、模块、元素 组件 一般为自定义的有比较高的复用性，比较广泛的通用性的一段代码或多段代码组成。例如： 表单组件 Table 组件，轮播组件等，都是有比较高的复用和通用效果。 模块 一般是为了更好的可维护，更清晰的结构，根据整体切分出的组成部分，同时也提高复用性，但一般模块的通用性不如组件。 模块可以会包含一个或多个组件。 元素 元素一般是指向比较具体的某一项，比较简单的个体，例如一个 HTML 标签，一张图片，一个音视频文件。 不再需要 JS 做的 5 件事 1. 使用 css 控制 svg 动画 用 css 控制 svg 产生动画效果 .trail { stroke-width: 2; stroke-dasharray: 1 10 5 10 10 5 30 150; animation-name: trail; animation-timing-function: ease-out; } @keyframes trail { from, 20% { stroke-width: 3; stroke-dashoffset: 80; } 100%, to { stroke-width: 0.5; stroke-dashoffset: -150; } } 2. sidebar 使用 css 实现 hover 时才出现的侧边栏 nav { position: &amp;#39;absolute&amp;#39;; right: 100%; transition: 0.</description></item><item><title>毎日のフロントエンド 358</title><link>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-358/</link><pubDate>Thu, 07 Jul 2022 19:57:15 +0900</pubDate><guid>https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-358/</guid><description>HTML 给一个元素加下划线 使用 &amp;lt;u&amp;gt;&amp;lt;/u&amp;gt; 标签 给元素添加 boder-bottom 文字样式 text-decoration: underline; 使用伪类或者子元素做绝对定位 .target { position: relative; } .underline { position: absolute; bottom: 0; left: 0; right: 0; height: 1px; background-color: black; } JS var person = { age:1 } Object.defineProperty(person,&amp;#39;age&amp;#39;,{ get(){ return this.age }, set(val){ this.age = val } }) person.age Error：Maximum call stack size exceeded，循环引用导致栈溢出 person.age --&amp;gt; get.call(person) --&amp;gt;this.age --&amp;gt; person.age --&amp;gt; get.call(person) --&amp;gt; this.age --&amp;gt;... Reference fe-interview/history.md Object.defineProperty() - JavaScript | MDN</description></item></channel></rss>