[{"content":"What is \u0026ldquo;Lifting State up\u0026rdquo; and Why we need it? Lifting state up is a common pattern that is essential for React developer to know. It helps us avoid more complex pattern for managing our state.\nOften there will be a need to share state between different components. The common approach to share state between two components is to move the state to common parent of the two compenont.\n我们可以很清楚的明白 React 状态提升主要就是用来处理父组件和子组件的数据传递的；他可以让我们的数据流动的形式是自顶向下单向流动的，所有组件的数据都是来自于他们的父辈组件，也都是由父辈组件来统一存储和修改，再传入子组件当中。\n  We lift up state to a common ancestor of components that need it, so that they can nall share in the state. This allows us to mor4e easily share state among all of these components that need rely upon it.\n   There should be a single \u0026ldquo;source of truth\u0026rdquo; for any data that changes in application. Usuall, the state is first added to the component that needs it for rendering. If any other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync thje state between different components, you should rely on the top-down data flow.\n  Lifting state takes less work to find and isolate bugs. Since any state \u0026ldquo;lives\u0026rdquo; in some component and that component alone can change it. Additionally, we can implement any custom logic to reject or transform or validate user input.\n  If something can be derived from eother props or state, it probably shouldn\u0026rsquo;t be in the state.\n  ","date":"2021-09-13T17:34:37+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/liftup-cover_hu13e64fc3938bf48c35bf882b9c49b497_2861451_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（六）"},{"content":"防抖 与 节流 Debouncing and Throttling in Javascript  Debouncing and Throttling are two widely-used techniques to improve the performance of code that gets executed repeatedly within a short time(a peroid of time).\n  devbounce-throttle \nDebouncing 防抖 用来实现高频触发函数调用时，实际只调用最后一次函数执行。\n用于可能出现高频调用的 DOM 或 样式修改， 这种高频调用会导致页面高频重排重绘，DOM 闪烁抖动，影响页面性能。\n// Debounce function debouce(handler, interval) { let lastDate = 0; let time; return function () { let self = this; let args = arguments; clearTimeout(time); time = setTimeout(function () { handler.apply(self, args); }, interval); }; } Throttling 节流 用来实现阻止在短时间内重复多次触发同一个函数。\n用途： 防止使用脚本 循环触发网络请求的函数，确保请求的合理和真实性\n// Throttle  function throttle(handler, wait) { let lastDate = 0; return function () { var newDate = new Date().getTime(); if (newDate - lastDate \u0026gt; wait) { handler.apply(this, arguments); } lastDate = newDate; }; } Reference javaScript 节流与防抖\n","date":"2021-09-12T17:48:16+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/throttle-cover_huce846bc90c63bb66fde6ebec9b941b5a_4551878_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（五）"},{"content":"关键知识点六： Restful API 设计的几个最佳实践 steps toward the glory of REST Richardson Maturity Model\nLevel 0 The Starting point for the model is using HTTP as a transport system for remote interactions, but without using any of the mechanisms of the web.If you use SOAP or XML-RPC it\u0026rsquo;s basically the same mechanism, the only difference is that you wrap the XML messages in some kind of envelope.\nLevel 1 - Resources At level One, rather than making all the requests to s singular service endpoint, we start talking to individual resources.\nLevel 2 - Http Verbs (Method) Level 2 moves away from being used as tunneling mechanisms allowing you to tunnel your interactions through HTTP, using the http verbs as closely as possible to how they are used in Http itself.\nHTTP defines GET as a safe operation, that is it doesn\u0026rsquo;t make any significant changes to the state of anything.\u0026mdash; This allows us to invoke GETs safely any number of times in any order and get the same results each time.(幂等 - 术语表 | MDN)\nTHE KEY elements that are supported by the existence of the web are the strong separation between safe (eg: GET) and non-safe operations, together with using status codes to help communicate the kinds of errors we run into.\nLevel 3 - Hypermedia Controls THE Highest and final level introduces something that you often hear referred to under the おかしい acronym of HATEOAS (Hypertext As The Engine Of Application State).\nEach response has a link element which contains a URI to tell us how to do next, and the URI of the resource we need to manipulate to do it.\nOne obvious benefit of hypermedia controls is that it allows the server to change its URI scheme without breaking clients. As long as clients look up the \u0026ldquo;add-test\u0026rdquo; link URI then the server can juggle all URIs other than the initial entrypoint.\nA further benefit is that it helps client developers explore the protocal. The links give client developers a hint as to what may be possible next. AND simillarly it also allows the server team tp advertise new capabilities by putting new links in the responses.\nSo as a frontend developer, if we can keeping an eye out for unknown links, these links can be a trgger for further exploration.\nBest Practise 最佳实践 一， 一类资源两个 URL - Use Two URLs per Resource # 资源集合： /epics # 资源元素： /epics/5 二， 使用一致的复数名词 - Use Consistently Plural Nouns 只应该使用统一的复数名词来表达资源\nGET /stories GET /stories/3 三， 资源 URI 使用名词而不是动词 - Use Nouns instead of Verbs for Resources # wrong /getAllEpics /getAllFinishedEpics /createEpic /updateEpic RESTful API Design.HTTP METHOD\n# right GET /epics GET /epics?state=finished POST /epics PUT /epics/5 四， 将实际数据包装在 data 字段中 // GET /epics在数据字段中返回epic资源列表 { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;epic2\u0026#34; } ] } // GET /epic/1在数据字段中返回id为1的epic对象 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34; } }  PUT，POST 和 PATCH 请求的有效负荷(payload)还应包含实际对象的数据字段。\n  JSON:API — A specification for building APIs in JSON\n 五， 对可选及复杂参数使用查询字符串 # 保持URL简单, 使用基本URL，将复杂或可选参数移动到查询字符串。 GET /employees?state=internal\u0026amp;title=senior GET /employees?id=1,2 # 还可以使用JSON API方式过滤 GET /employees?filter[state]=internal\u0026amp;filter[title]=senior GET /employees?filter[id]=1,2 六， 使用 HTTP 状态码 status codes HTTP response status codes - HTTP | MDN\n状态码的使用要尽量精确。如果资源可用，但禁止用户访问，则返回 403。如果资源曾经存在但现已被删除或停用，请使用 410。\n七， 提供有用的错误消息 // request GET /epics?state=unknow // response { \u0026#34;errors\u0026#34;: [ { \u0026#34;status\u0026#34;: 400, \u0026#34;detail\u0026#34;: \u0026#34;Invalid state. Valid values are \u0026#39;biz\u0026#39; or \u0026#39;tech\u0026#39;\u0026#34;, \u0026#34;code\u0026#34;: 352, \u0026#34;links\u0026#34;: { \u0026#34;about\u0026#34;: \u0026#34;http://www.jira.com/rest/errorcode/352\u0026#34; } } ] } 八，HATEOAS - Provide Links for Navigating through your API // request GET /epic // 好的做法是在响应中提供客户可以跟进的链接 // response { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34;, \u0026#34;links\u0026#34;: [ { \u0026#34;story\u0026#34;: \u0026#34;http://www.domain.com/epics/21/stories\u0026#34; } ] } ] } 优点：\n 如果 API 被更改，客户端依旧会获取有效的 URL（只要保证在 URL 更改时更新链接） API 变得更具自描述性，客户端不必经常查找文档  九， 恰当地设计关系 在 API 中设计关系基本上有三种常用选项：链接，侧载和嵌入。\nThere are basically three common options to design relationships within an API: Links, Sideloading and Embedding.\nBasically, you should design the relationships depending on the client\u0026rsquo;s access schema and the tolerable request amount and payload size.\nLinks: { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;relationships\u0026#34;: { \u0026#34;manager\u0026#34;: \u0026#34;http://www.domain.com/employees/1/manager\u0026#34;, \u0026#34;teamMembers\u0026#34;: [ \u0026#34;http://www.domain.com/employees/12\u0026#34;, \u0026#34;http://www.domain.com/employees/13\u0026#34; ] //or \u0026#34;teamMembers\u0026#34;: \u0026#34;http://www.domain.com/employees/1/teamMembers\u0026#34; } } ] }   Small payload size. : It\u0026rsquo;s good, if the client doesn\u0026rsquo;t need the manager and the teamManager every time.\n  Many Request. : It\u0026rsquo;s bad, if nearly every client needs this data. MANY additional requests may be required; in the worse case for every employee.\n  The client has to stitch the data together in order to get the big picture.\n  Sideloading: We can refer to the relationship with a foreign key and put the referred entitiese also in the payload but under the dedicated field included. This approach also called \u0026ldquo;Compound Documents\u0026rdquo;.\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;relationships\u0026#34;: { \u0026#34;manager\u0026#34;: 5, \u0026#34;teamMembers\u0026#34;: [12, 13] } } ], \u0026#34;included\u0026#34;: { \u0026#34;manager\u0026#34;: { \u0026#34;id\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Kevin\u0026#34; }, \u0026#34;teamMembers\u0026#34;: [ { \u0026#34;id\u0026#34;: 12, \u0026#34;name\u0026#34;: \u0026#34;Albert\u0026#34; }, { \u0026#34;id\u0026#34;: 13, \u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34; } ] } } The client may also control the sideloaded entities by a query parameter like GET /employee?include=manager,teamMembers.\n One singel request. Tailored payload size. No duplication (e.g. you only deliver a manager once even if he is referenced by many employees). The client still has to stitch the data together(拼接数据) in order to resolve the relationships. which can be very cumbersome.  Embedding: { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;manager\u0026#34;: { \u0026#34;id\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Kev\u0026#34; }, \u0026#34;teamMembers\u0026#34;: [ { \u0026#34;id\u0026#34;: 12, \u0026#34;name\u0026#34;: \u0026#34;Albert\u0026#34; }, { \u0026#34;id\u0026#34;: 13, \u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34; } ] } ] }   Most conveninet for the client. It\u0026rsquo;s can directly follow the relationships to get the actual data.\n  Relationships may be loaded in vain if the client does not need it.\n  Increased payload size and duplications. Referenced entities may be embedded multiple times.(not so good)\n  十， 小驼峰法命名属性 - Use CamelCase for Attribute Names {\u0026quot;yearOfBirth\u0026quot;: 1970}\nDon not use underscores or capitalize (year_of_birth or YearOfBirth). Often the RESTful api will be consumed by a client written in JS. Typically the client wil convert the JSON response to a JS object( var person = JSON.parse(response) ) and call its attributes. Therefore, it\u0026rsquo;s a good idea to stick to the JS convention which makes the js code more readable and intuitive.\n// Don\u0026#39;t person.year_of_birth; // violates JavaScript convention person.YearOfBirth; // suggests constructor method  // Do person.yearOfBirth; 十一，用动词表示操作 - Use Verbs for Operations 有时对 API 调用的响应不涉及资源（如计算，转义或变换）。\nSometimes a response to an API call does not involve resources (like calculate, translate, or convert)\n//Reading GET /translate?from=de_DE\u0026amp;to=en_US\u0026amp;text=Hallo GET /calculate?para2=23\u0026amp;para2=432 //Trigger an operation that changes the server-side state POST /restartServer //no body POST /banUserFromChannel { \u0026#34;user\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;channel\u0026#34;: \u0026#34;serious-chat-channel\u0026#34; } In this case, no resource are involved. Instead, the server executes an operation and returns the result to the client.\nHence, we shoud use verbs instead of nouns in our URL to distinguish clearly the operations (RPC-style API) from the RESTful endpoints(resources for modelling the domain.)\nCreating those RPC-style API instead of REST is appropriate for operations. Usualy, it\u0026rsquo;s simpler and more intuitive than trying to be REST for operations (e.g. PATCH /server with {\u0026quot;restart\u0026quot;: true}). AS the rule of thumb, REST is nice for interacting with domain models and RPC is suitable for operations.\n Understanding RPC Vs REST For HTTP APIs — Smashing Magazine\n 十二， 分页 Provide Pagination It is almost never a good idea to return the whole data of your db at once.\nConsequently, you should provide a pagination mechanism. There are TWO popular approaches below:\n  Offset-based Pagination\n  Keyset-based Pagination (Continuation Token) aka CURSOR\u0026mdash;\u0026ndash; recommended.\n  Offset-based # use the parameters offset and limit, which are well-known from database  /employees?offset=30\u0026amp;limit=15 # returns the employees 30 to 45  # when the client omits the parameter, the server team should use default(like offset=0 and limit=100)  Never return all resources.\n You can provide links for getting the next or previous page. Just construct URLs with the appropriate offset and limit.\nGET /employees?offset=20\u0026amp;limit=10 { \u0026#34;pagination\u0026#34;: { \u0026#34;offset\u0026#34;: 20, \u0026#34;limit\u0026#34;: 10, \u0026#34;total\u0026#34;: 3465 }, \u0026#34;data\u0026#34;: [ //... ], \u0026#34;links\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;http://www.domain.com/employees?offset=30\u0026amp;limit=10\u0026#34;, \u0026#34;prev\u0026#34;: \u0026#34;http://www.domain.com/employees?offset=10\u0026amp;limit=10\u0026#34; } } Keyset-based Pagination aka continuation TOKEN, CURSOR (recommend) The presented offset-based pagination is easy to implement but comes with drawbacks. They are slow (SQL’s OFFSET clause becomes very slow for large numbers) and unsafe (it’s easy to miss elements when changes are happening during pagination).\n  SQL’s OFFSET clause becomes very slow for large numbers it’s easy to miss elements when changes are happening during pagination   # That’s why it’s better to use an indexed column. # Let’s assume that our employees have an indexed column data_created and the collection resource /employees?pageSize=100 returns the oldest 100 employees sorted by this column. # Client only has to take the dateCreated timestamp of the last employee and uses the query parameter createdSince to continue at this point. GET /employees?pageSize=100 # The client receives the oldest 100 employees sorted by `data_created` # The last employee of the page has the `dataCreated` field with 1504224000000 (= Sep 1, 2017 12:00:00 AM) GET /employees?pageSize=100\u0026amp;createdSince=1504224000000 # The client receives the next 100 employees since 1504224000000. # The last employee of the page was created on 1506816000000. And so on. This solves already many of the disadvantages of offset-based pagination, but it’s still not perfect and not very convenient for the client.\n It’s better to create a so-called continuation token by adding additional information (like the id) to the date in order to improve the reliability and efficiency. Moreover, you should provide a dedicated field in the payload for that token so the client doesn’t have to figure it out by looking at the elements. You can even go further and provide a next link.   Web API Pagination with the \u0026lsquo;Timestamp_ID\u0026rsquo; Continuation Token\n // request GET /employees?pageSize=100 // response { \u0026#34;pagination\u0026#34;: { \u0026#34;continuationToken\u0026#34;: \u0026#34;1504224000000_10\u0026#34; }, \u0026#34;data\u0026#34;: [ // ... // last element: { \u0026#34;id\u0026#34;: 10, \u0026#34;dateCreated\u0026#34;: 1504224000000 } ], \u0026#34;links\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;http://www.domain.com/employees?pageSize=100\u0026amp;continue=1504224000000_10\u0026#34; } } The next link makes the API RESTful as the client can page through the collection simply by following these links(HATEOAS). No need to construct URLs manually. Moreover, we can simply change the URL structure without breaking clients( called evolvability)\n十三， Check out JSON:API  JSON:API — A specification for building APIs in JSON\n Just for Inspiration. Feel free to make up your own mind about JSON:API.\n十四， 确保 API 的可演进 Ensure Evolvability of the APIs Avoid Breaking Changes Ideally, APIs should be stable. Basically, breaking changes should not happen.(like change the whole payload format or the URL scheme). SO how can we still evolve our API without breaking the clients:\n  保持向后兼容 Make backward-compatible changes.Adding field is no problem, as long as the clients are tolerant.\n  复制和弃用。Duplication and Deprecation. In order to cahnge an existing field, you can add the new one next to the old field and deprecated the old one in the documentation. After a while, you can remove the old field.\n  超媒体和 HATEOAS。Utilize Hypermedia and HATEOAS. As long as the API client uses the links in the response to navigate through the API (and doesn’t craft the URLs manually), you can safely change the URLs without breaking the clients.\n  使用新名称创建新资源。Create new resources with new names. If new business requirements lead to a completely new domain model and workflows, you can create new resources. That’s often quite intuitive as the domain model has a new name anyway (derived from the business name). Example: A rental service now also rents bikes and segways. So the old concept car with the resource /cars doesn’t cut it anymore. A new domain model vehicle with a new resource /vehicles is introduced. It’s provided along with the old /cars resource.\n  Keep Bussiness Logic on the Server-Side DO not let our service become a dump data access layer which provides CRUD functionality by directly exposing your databaes model. THIS creates HIGH COUPLING.\n  The bussiness logic is shifted to the client and is often replicated between the client and the server (just think about validation.). We have to keep both in sync.\n  The client will be coupling to the server\u0026rsquo;s database model. This is not good.\n  The business workflows are getting distributed between the client and the server. IN TURN, that makes it likely that new business requirements require a change in both the client and the server and to break API. So the API/system is not that evolvable.\n  因此，我们应该构建高层次/基于工作流的 API 而不是低级 API。 So we should build high-level/workflow-based APIs instead of low-level APIs. EXAMPLE:\nDon’t provide a simple CRUD service for the order entities in the database.\nDon’t require the clients to know that to cancel an order, the client has to PUT an order to the generic /order/1 resource with a certain cancelation payload (reflecting the database model) in it. This leads to high coupling (business logic and domain knowledge on the client-side; exposed database model).\nInstead, provide a dedicated resource /order/1/cancelation and add a link to it in the payload of the order resource. The client can navigate to the cancelation URL and send a tailored cancelation payload. The business logic for mapping this payload to the database model is done in the server.\nMoreover, the server can easily change the URL without breaking the client, because the client simply follows links. Besides, the decision logic, if an order can be canceled or not is now in the server: If a cancelation a possible the server adds the link to the cancelation resource in the order payload. So the client only has to check if the cancelation links are present (for example to know if he should draw the cancelation button). So we moved domain knowledge away from the client back to the server. Changes to the cancelation conditions can be easily applied by only touching the server, which in turn make the system evolvable. No API change is required.\n十五，版本化 Consider API Versioning Nevertheless, you might end up in situations where the above approaches don’t work and you really have to provide different versions of your API.\nNevertheless, here are the two most popular approaches for versioning:\n  Versioning via URLs: /v1/\n  Versioning via the Accept HTTP Header:\nAccept: application/vnd.myapi.v1+json   Versioning via URLs Just put the version number of your API in the URL of every resource. /v1/books.\n  Pros:\n Extremely simple for API developers. Extremely simple for API clients. URLs can be copied and pasted.    Cons:\n Not RESTful Breaking URLs. clients have to maintain and update the URLs.     Strictly speaking, this approach is not RESTful because URLs should never change.The question is, how much effort would it take the clients to update the URLs? If the answer is “only a little” then URL versioning might be fine.\n Versioning via Accept HTTP Header (Content Negotiation)   Pros:\n URLs keep the same Considered as RESTful HATEOAS-friendly    Cons:\n Slightly more difficult to use. Clients have to pay attention to the headers. URLs can’t be copied and pasted anymore.    Reference Richardson Maturity Model\nRestful API 设计最佳实践 - Tech For Fun\nRESTful API Design. Best Practices in a Nutshell.\nREST beyond the obvious – API design for ever evolving systems by Oliver Gierke @ Spring I/O 2018 - YouTube\n","date":"2021-09-11T15:14:04+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/cover-for-bestpractise_hu51089687c1fc9d12fc6b9e54035b4415_553553_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（四）"},{"content":"知识点五： Restful API 设计 1. Endpoint 表示 API 的具体地址\n在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中 不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的\u0026quot;集合\u0026quot;（collection），所以 API 中的名词也应该使用复数。\n# Example 应使用 HTTPs 协议 https://api.example.com/v1/books https://api.example.com/v1/movies 2. HTTP METHOD 对于资源的具体操作，应由 HTTP 动词表示。\n# 常用方法, (对应 SQL 语句) GET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE）：在服务器新建一个资源。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。 DELETE（DELETE）：从服务器删除资源。 # 具体的使用实例 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 3. Filtering 如果记录数量很大，服务器不可能将全部数据返回，此时，API 应提供参数，用于过滤返回结果。\n# 以下是一些常用参数 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page=2\u0026amp;per_page=100：指定第几页，以及每页的记录数。 ?sortby=name\u0026amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件  参数的设计允许存在冗余，例如：GET /zoo/ID/animals 等价于 GET /animals?zoo_id=ID\n 4. Status Code # 服务器向用户返回的状态码和提示信息,常用状态码如下： 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT - [DELETE]：用户删除数据成功。 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。  幂等 - 术语表 | MDN\n  HTTP response status codes - HTTP | MDN\n 5. Error Handling # 如果状态码是4xx，就应该向用户返回出错信息。 { error: \u0026quot;Invalid API key\u0026quot; } 6. 返回结果的规范 GET /collection：返回资源对象的列表（数组） GET /collection/resource：返回单个资源对象 POST /collection：返回新生成的资源对象 PUT /collection/resource：返回完整的资源对象 PATCH /collection/resource：返回完整的资源对象 DELETE /collection/resource：返回一个空文档 7. Hypermedia API (HATEOAS) RESTful API 最好做到 Hypermedia，即返回结果中提供链接，连向其他 API 方法，使得用户不查文档，也知道下一步应该做什么。\n# 比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。 {\u0026quot;link\u0026quot;: { \u0026quot;rel\u0026quot;: \u0026quot;collection https://www.example.com/zoos\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.example.com/zoos\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;List of zoos\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;application/vnd.yourformat+json\u0026quot; }} Hypermedia API 的设计被称为 HATEOAS。Github 的 API 就是这种设计，访问 https://api.github.com 会得到一个所有可用 API 的网址列表。\nReference RESTful API 设计指南\n","date":"2021-09-10T18:02:49+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/restful-design_hu2eb9b4a82207ed27ffff0ff503057274_1353210_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（三）"},{"content":"关键知识点四： Restful API What is REST REST is acronym for REpresentational State Transfer. It is architectural style for distributed hyermedia systems and was first presented by Roy Fielding in 2000 in his famous dissertation.\nPrinciples of REST   Client-server\n By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.    Stateless\n Each request from client to server must contain all of the information necessary to understand the request, and cannot take advatage of any stored context on the server. Session state is therefore kept entirely on the client.    Cacheable\n Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.    Uniform interface（统一接口）\n  By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. In order to obtain a uniform inerface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: identification of resources; manipulation of resources through representations; self-descriptive messages; and, hypermedia as the engine of application state.\n  identification of resources :使用URI作为资源标识符；客户端和服务器之间，传递这种资源的某种表现层（representation）; 资源本身与返回给 client 的 representation 分开(理解为：URI 只代表资源的实体或资源的位置， 不代表其形式，比如一段文本，可以是 json，HTML，etc)。例如，服务器不直接发送其数据库内容，而是发送一些表示某些数据库记录的 HTML，XML 或 JSON。 具体表现形式，应该在 HTTP 请求头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对\u0026quot;表现层\u0026quot;的描述\n  manipulation of the resources through representations: 当客户端持有资源的表示（包括附加的任何元数据）时，它有足够的信息来修改或删除服务器上的资源\n  Self-descriptive Messages （自描述信息）： 每条消息都包含足够的信息来描述如何处理该消息。\n  hypermedia as the engine of application state: client 通过 body/header/query_params/uri_name 来提供状态，服务器收到这些内容，通过 HTTP 响应状态码和响应头向服务端提供状态，成为超链接。且，在必要时，链接包含在返回的正文（或标题）中，以提供用于检索对象本身或相关对象的 URI。\n    Layered system\n  The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot \u0026ldquo;see\u0026rdquo; beyond the immedite layer with which they are interacting.\n  客户端通常无法判断它是直接连接到终端服务器，还是中间服务器。 中间服务器可以通过启用负载平衡和提供共享缓存来提高系统可伸缩性。 Layers 也可以实施安全策略。\n    Code on demand(optional)(唯一一个可选约束，其他约束必须实现)\n REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts(JS etc). This simplifies clients by reducing the number of features required to be pre-implemented.    Resource  The key abstraction of information in REST is a resource.\n Any information that can be named can be a resource. REST uses a resource indentifier to identify the particular resource involved in an interaction between comonents.\nREST 的名称\u0026quot;表现层状态转化\u0026quot;中，省略了主语。\u0026ldquo;表现层\u0026quot;其实指的是\u0026quot;资源\u0026rdquo;（Resources）的\u0026quot;表现层\u0026quot;。\n所谓\u0026quot;资源\u0026quot;，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个 URI（统一资源定位符）指向它，每种资源对应一个特定的 URI。要获取这个资源，访问它的 URI 就可以，因此 URI 就成了每一个资源的地址或独一无二的识别符。\nRepresentation \u0026ldquo;资源\u0026quot;是一种信息实体，它可以有多种外在表现形式。我们把\u0026quot;资源\u0026quot;具体呈现出来的形式，叫做它的\u0026quot;表现层\u0026rdquo;（Representation）。\nState Transfer 互联网通信协议 HTTP 协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生\u0026quot;状态转化\u0026quot;（State Transfer）。而这种转化是建立在表现层之上的，所以就是\u0026quot;表现层状态转化\u0026quot;。具体如下：\nResource Method  Another important thing associated with REST is resource methods to be used to perform the desired transition. A large number of people wrongly relate resource methods to HTTP GET/PUT/POST/DELETE methods.\n  GET 用来获取资源 POST 用来新建资源（也可以用于更新资源） PUT 用来更新资源 DELETE 用来删除资源   In simplest words, in the REST architectural style, data and functionality are considered resources and are accessed using Uniform Resource Identifiers (URIs). The resources are acted upon by using a set of simple, well-defined operations. The clients and servers exchange representations of resources by using a standardized interface and protocol – typically HTTP.\n  Resources are decoupled from their representation so that their content can be accessed in a variety of formats, such as HTML, XML, plain text, PDF, JPEG, JSON, and others. Metadata about the resource is available and used, for example, to control caching, detect transmission errors, negotiate the appropriate representation format, and perform authentication or access control. And most importantly, every interaction with a resource is stateless.\n ","date":"2021-09-09T20:17:16+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/cover-api_hud4b58edf642f350337f29ff97407729b_1122407_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（二）"},{"content":"第一章 知识点一： 用 create-react-app 初始化项目： 1. Quick Start npx create-react-app react-jira --template typescript # or npm init react-app react-jira # or yarn create react-app react-jira npx create-react-app my-app --use-npm # if you prefer to use npm 2. Folder Structure   For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won’t see them.\n  字体，图片等也同样应置于 scr 目录中\n  Only files inside public can be used from public/index.html.\n  import React, { Component } from \u0026#39;react\u0026#39;; import \u0026#39;./Button.css\u0026#39;; // Tell webpack that Button.js uses these styles  class Button extends Component { render() { // You can use them as regular CSS styles  return \u0026lt;div className=\u0026#39;Button\u0026#39; /\u0026gt;; } }     3. Analizing the Bundle Size npm install --save source-map-explorer or yarn add source-map-explorer // package.json \u0026#34;scripts\u0026#34;: { + \u0026#34;analyze\u0026#34;: \u0026#34;source-map-explorer \u0026#39;build/static/js/*.js\u0026#39;\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, } 知识点二： 用 Prettier 统一代码格式化风格 1. Quick Start yarn add --dev --exact prettier echo {}\u0026gt; .prettierrc.json # then create a .prettierignore file to let the Prettier CLI and editors know which files to not format.  # Ignore artifacts: build coverage 2. Usage In Command line npx prettier --write . # or yarn prettier --write . Setup In Editor Prettier set up in editor\nGit Hook (Pre-commit Hook) Pre-commit Hook · Prettier\nGit Commitlint commitlint - Lint commit messages\ncommitlint checks if your commit messages meet the conventional commit format.\nConventional Commits 约定式提交\n// 常用类型 type { \u0026#34;build\u0026#34;: \u0026#34;Changes that affect the build system or external dependencies\u0026#34; \u0026#34;ci\u0026#34;: \u0026#34;Changes to our CI configuration files and scripts\u0026#34; // \u0026#34;chore\u0026#34;: \u0026#34;updating grunt tasks etc; no production code change\u0026#34;,  \u0026#34;docs\u0026#34;: \u0026#34;Documentation only changes\u0026#34;, \u0026#34;feat\u0026#34;: \u0026#34;new feature for the user, not a new feature for build script\u0026#34;, \u0026#34;fix\u0026#34;: \u0026#34;A bug fix for user, not a fix to a build script\u0026#34;, \u0026#34;perf\u0026#34;: \u0026#34;A code change that impoves performance\u0026#34;, \u0026#34;refactor\u0026#34;: \u0026#34;A code change that neither fixes a bug nor adds a feature\u0026#34;, \u0026#34;revert\u0026#34;: \u0026#34;If the commit reverts a previous commit, it should begin with revert\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons,etc)\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;Adding missing tests or correcting existing tests\u0026#34;, \u0026#34;BREAKING CHANGE:\u0026#34; }; type(scope?): subject #scope is optional; multiple scopes are supported (current delimiter options: \u0026quot;/\u0026quot;, \u0026quot;\\\u0026quot; and \u0026quot;,\u0026quot;) \n scope\n Example values: #\n init runner watcher config web-server proxy etc   why use conventional commits\n  Automatically generating CHANGELOGS Automatically determining a semantic version bump(base on the types of commits landed) Communicating the nature of changes to teammates, the public, and other stakeholders Triggering build and publish processes Making it easier for people to contribute to you projects, by allowing them to explore a more structured commit history  以上： 一个项目开始阶段的规范化配置。重点： Conventional Commits\n知识点三： Json-server typicode/json-server: Get a full fake REST API with zero coding\n","date":"2021-09-08T23:50:49+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/react-jira-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（一）"},{"content":" Precondition: macOS Big Sur 11.5.2\n Golang\u0026rsquo;s installation and configuration with homebrew in Fish shell 1. Install golang with homebrew brew update brew search golang brew info golang # show the information of golang brew install golang 2. Setup the workspace: Add environment variables: First, we\u0026rsquo;ll need to tell Go the location of our workspace.\nWe\u0026rsquo;ll add some environment variables into shell config.\nbash or zsh The config files is located at home directory:\n.bash_profile, bashrc, or zshrc\nexport GOPATH=$HOME/project/go-workspace # don\u0026#39;t forget to change the path correctly export GOROOT=/usr/local/opt/go/libexec # export GOROOT=/usr/local/Cellar/go/1.17/libexec export PATH=$PATH:$GOPATH/bin export PATH=$PATH:$GOROOT/bin  GOPATH is the place where we get, build and install packages outside the standard Go tree(AND it\u0026rsquo;s not where the executables are), so it is customizable and thus you can get GOPATH wherever you want.\n  GOROOT, however, is the place where the Go binary distributions (In linux, it\u0026rsquo;s normally in /usr/local/go; but for macOs, the Go and the tools are installed in /usr/local/Cellar/go/1.17/libexec by default as well as a soft link to /usr/local/opt/go/libexec will be created at the same time), so on Linux normally we don’t have to set this variable, but on MacOS, we have to change it as brew installs Go tools to a different path.\n fish shell Add the code to home directory\u0026rsquo;s ~/.config/fish/config.fish:\nset -x GOPATH $HOME/project/go-workspace set -x GOROOT /usr/local/opt/go/libexec set -x PATH $PATH:$GOPATH/bin set -x PATH $PATH:$GOROOT/bin Create our own workspace: mkdir -p $GOPATH $GOPATH/src $GOPATH/pkg $GOPATH/bin\n  $GOPATH/src: where we put the go projects source code\n  $GOPATH/pkg: contains every package objects\n  $GOPATH/bin: The compiled binaries\u0026rsquo;s home.\n  ","date":"2021-09-07T23:46:37+09:00","image":"https://youkoucoding.github.io/p/golang-config/cover_hu6ff3cfb4de7da3a30b555c53fec82c73_1051665_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/golang-config/","title":"Install Go on Mac with Homebrew"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片  Photo by Florian Klauer on Unsplash   Photo by Luca Bravo on Unsplash \n Photo by Helena Hertz on Unsplash   Photo by Hudai Gayiran on Unsplash \n![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://youkoucoding.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://youkoucoding.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","date":"2019-03-10T00:00:00Z","permalink":"https://youkoucoding.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://youkoucoding.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://youkoucoding.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://youkoucoding.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/emoji-support/","title":"Emoji Support"}]