[{"content":"第七十五日 CSS Question: 解释下什么是浮动和它的工作原理是什么？同时浮动会引起什么问题  什么是浮动：通过浮动可以让元素左右浮动，然后通过margin调整位置 工作原理：使元素脱离文档流，让元素可以左右浮动，直到遇到另一个浮动元素的边缘才停止。 带来的问题：浮动元素会造成父级元素无法自动获取高度，导致父级塌陷，布局错乱。  JavaScript Question: js 中=、==、===三个的区别是什么？并说明它们各自的工作过程   = 是赋值运算符\n 遵循右结合律 返回  lhs(left-hand-side) （但在声明语句（var, let, const）中返回 undefined） 若  rhs(right-hand-side) 是 primitive value （number, string, symbol, undefined, boolean) 则 lhs 被赋值为该值 若 rhs 是 object 则 lhs 被赋值为指向该 object 的 reference const 声明的不变量不能被再次赋值，否则会 throw ReferenceError 如果在局部作用域不使用声明语句就给一个既未声明于局部作用域，也未声明于任何上层作用域的变量赋值，那它将会被创建为一个全局变量。不应该如此使用。    == 是带有 implicit type conversion(隐式类型转换) 的判等运算符\n 遵循左结合律 返回 boolean    === 是严格的判等运算符\n 遵循左结合律 返回 boolean 若两侧是 primitive value 则判断两侧值是否相等 若两侧是 object 则判断两侧 reference 是否指向同一块内存    Question: 写出执行结果,并解释原因 function showCase(value) { switch (value) { case \u0026#39;A\u0026#39;: console.log(\u0026#39;Case A\u0026#39;); break; case \u0026#39;B\u0026#39;: console.log(\u0026#39;Case B\u0026#39;); break; case undefined: console.log(\u0026#39;undefined\u0026#39;); break; default: console.log(\u0026#39;Do not know!\u0026#39;); } } showCase(new String(\u0026#39;A\u0026#39;)); Result: Do not know!\nswitch 是严格比较, String 实例和 字符串不一样\nvar str1 = \u0026#39;str\u0026#39;; var str2 = new String(\u0026#39;str\u0026#39;); console.log(typeof str1); // \u0026#34;string\u0026#34; console.log(typeof str2); //\u0026#34;object\u0026#34; Reference haizlin/fe-interview\nlgwebdream/FE-Interview \n与 \u0026lt;head\u0026gt; 相关的标签列表。\n","date":"2021-11-30T09:01:53+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-75/frontend-75-cover_hua91422198db42e2f040c837a4e920fb1_696871_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-75/","title":"毎日のフロントエンド　 75"},{"content":"第七十四日 HTML Question: 在a标签上的四个伪类执行顺序是什么  a:link: 定义正常链接的样式 a:visited: 定义已访问过链接的样式 a:hover: 定义鼠标悬浮在链接上时的样式 a:active: 定义鼠标点击链接时的样式  link--visited--hover-active，也就是我们常说到的 LoVe HAte 原则（大写字母就是它们的首字母）\n在W3C规范中，也规定了链接的声明顺序： 在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。 在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。\nCSS Question: !important，一般在哪些场景使用 !important 可以让样式的 特指度最高，覆盖任何样式，而且本身不可被覆盖。 一般场景就是用来强制覆盖其他样式，用的比较少，不建议使用。\nJavaScript Question: 写一个方法随机生成指定位数的字符串 function getRandomString(length) { //let str = Math.random().toString(36).substr(2); // substr: This feature is no longer recommended.  // substring(2) remove the 0 and .  let str = Math.random().toString(36).substring(2); if (str.length \u0026gt;= length) { return str.substring(0, length); } str += getRandomString(length - str.length); return str; }  toString(36): radix是36，就会把数字表示为由0-9, a-z组成的的\u0026quot;36 进制字符串\u0026quot;. substring() 方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。  Reference haizlin/fe-interview\nlgwebdream/FE-Interview \nString.prototype.substring() - JavaScript | MDN\nObject.prototype.toString() - JavaScript | MDN\n","date":"2021-11-29T16:22:25+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-74/frontend-74-cover_huade054acfb0d281042b51415c0059f8d_1480962_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-74/","title":"毎日のフロントエンド　 74"},{"content":"第七十三日 HTML Question: favicon.ico 有什么作用？怎么在页面中引用？常用尺寸有哪些？可以修改后缀名吗   favicon不仅是网站的头像，也是其可以让浏览器的收藏夹中除了显示相应的标题外，还以图标的方式区分不同的网站。\n  \u0026lt;link rel=\u0026quot;shortcut icon\u0026quot; type=\u0026quot;image/x-icon\u0026quot; href=\u0026quot;/favicon.ico\u0026quot;\u0026gt;\n  推荐使用后缀名.ico，对浏览器的支持范围广，一个.ico 文件可以同时满足多个尺寸的需求。\n  常用尺寸：16*16 32*32 48*48\n  CSS Question: 在实际编写 css 中遇到过哪些浏览器兼容性的问题？怎么解决的 TODO\n postcss - npm postcss/autoprefixer: Parse CSS and add vendor prefixes to rules by Can I Use browserslist/browserslist: 🦔 Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env  JavaScript Question: 移动端点击事件为什么会有延迟？延迟多长时间？有哪些方法可以解决 原因：等待 300ms 看用户是点击还是双击缩放\n解决办法：\n 禁止缩放 设置默认视口宽度为设备宽度 设置 css touch-action:none fastclick.js: ftlabs/fastclick: Polyfill to remove click delays on browsers with touch UIs  Question: 写出执行结果,并解释原因 [typeof null, null instanceof Object]; Result: [object, false]\n  typeof 返回一个表示类型的字符串\n typeof 的结果列表  Undefined \u0026quot;undefined\u0026quot; Null \u0026quot;object\u0026quot; Boolean \u0026quot;boolean\u0026quot; Number \u0026quot;number\u0026quot; String \u0026quot;string\u0026quot; Symbol \u0026quot;symbol\u0026quot; Function \u0026quot;function\u0026quot; Object \u0026quot;object\u0026quot;      instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上\n  Question: 写出执行结果,并解释原因 function f() {} const a = f.prototype, b = Object.getPrototypeOf(f); console.log(a === b); Result: false\n f.prototype 是使用 new 创建的 f 实例的原型. Object.getPrototypeOf 是 f 函数的原型 Function.prototype === Object.getPrototypeOf(f) // true a === Object.getPrototypeOf(new f()) // true b === Function.prototype // true a === b // false   Object.getPrototypeOf() 方法返回指定对象的原型（内部[[Prototype]]属性的值）。\n Reference haizlin/fe-interview\nlgwebdream/FE-Interview \n","date":"2021-11-28T18:03:33+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-73/frontend-73-cover_hu4873b086abcd7ff92c74dd0313e43b09_6292803_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-73/","title":"毎日のフロントエンド　 73"},{"content":"第七十二日 HTML Question: video和audio分别支持哪些格式  video: MP4、WebM、Ogg audio: MP3、Wav、Ogg  CSS Question: 怎么改变选中文本的文字颜色和背景色  Pseudo-elements 伪元素  ::selection { background-color: #222; color: white; } JavaScript Question: 重复字符串的 repeat 函数 let str = \u0026#39;abcd\u0026#39;; function repeat(str, n) { if (typeof str === \u0026#39;string\u0026#39;) { return new Array(n + 1).join(str); } return \u0026#39;Type Error\u0026#39;; } repeat(str, 3); //abcdabcdabcd  const repeat = (str, n) =\u0026gt; str.repeat(n);  const repeatStr = (str, num) =\u0026gt; { return Array(num + 1) .fill(str) .join(\u0026#39;\u0026#39;); }; Question: 写出执行结果，解释原因 [\u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;].map(parseInt); Result: [1,NaN,NaN]\n  Array.prototype.map(): The map() method creates a new array\n callbackFn Three Parameters  element:The current element being processed in the array. index - Optional: The index of the current element being processed in the array. array - Optional: The array map was called upon.   thisArg - Optional: Value to use as this when executing callbackFn.    parseInt: The parseInt(string, radix) function parses a string argument and returns an integer of the specified radix(基数).\n  callbackFn的第三个参数，忽略，因为，parseInt只接受两个参数。\n  string\n The value to parse. If this argument is not a string, then it is converted to one using the ToString abstract operation. Leading whitespace in this argument is ignored.    radix - Optional\n An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the string. Be careful—this does not default to 10! If the radix value is not of the Number type it will be coerced(迫使) to a Number.    return value\n An integer parsed from the given string. or NaN when:  the radix modulo 2**32 is smaller than 2 or bigger than 36, or the first non-whitespace character cannot be converted to a number.          parseInt(\u0026#39;1\u0026#39;, 0); // radix为0时，ECMAScript5将string作为十进制数字的字符串解析； parseInt(\u0026#39;2\u0026#39;, 1); // radix为1时，解析结果为NaN parseInt(\u0026#39;3\u0026#39;, 2); // radix在2—36之间时，如果string参数的第一个字符（除空白以外），不属于radix指定进制下的字符，解析结果为NaN。 parseInt(\u0026#34;3\u0026#34;, 2)执行时，由于\u0026#34;3\u0026#34;不属于二进制字符，解析结果为NaN。  在使用 parseInt 时，一定要指定一个 radix。\n Reference haizlin/fe-interview\nlgwebdream/FE-Interview \nparseInt() - JavaScript | MDN\n","date":"2021-11-27T12:06:32+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-72/frontend-72-cover_hu614c7450c87a7fca253bda70ec0c26d7_1722724_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-72/","title":"毎日のフロントエンド　 72"},{"content":"第七十一日 JavaScript Question: 深拷贝对象  使用原生的 Object.assign(),以及展开运算符，以实现浅拷贝  /** * 深度拷贝一个对象 * @param {any} val */ function deepClone(val) { function getType(_val) { return ( Object.prototype.toString .call(_val) // 对_val调用toString方法,比如:一个number调用该方法后,会得到:  // \u0026#34;[object Number]\u0026#34;  // 然后替换其中的object  // 具体调用示例如下:  // Object.prototype.toString.call(1)  // \u0026#34;[object Number]\u0026#34;  // Object.prototype.toString.call({})  // \u0026#34;[object Object]\u0026#34;  // Object.prototype.toString.call([])  // \u0026#34;[object Array]\u0026#34;  // Object.prototype.toString.call(\u0026#39;\u0026#39;)  // \u0026#34;[object String]\u0026#34;  // Object.prototype.toString.call(true)  // \u0026#34;[object Boolean]\u0026#34;  // Object.prototype.toString.call(Symbol())  // \u0026#34;[object Symbol]\u0026#34;  // Object.prototype.toString.call(()=\u0026gt;{})  // \u0026#34;[object Function]\u0026#34;  // Object.prototype.toString.call(undefined)  // \u0026#34;[object Undefined]\u0026#34;  // Object.prototype.toString.call(null)  // \u0026#34;[object Null]\u0026#34;  .replace(/[\\[\\s\\]]|(object)/g, \u0026#39;\u0026#39;) ); } const valType = getType(val); // 如果是非引用类型,直接赋值就是深度拷贝了  if (valType !== \u0026#39;Object\u0026#39; \u0026amp;\u0026amp; valType !== \u0026#39;Array\u0026#39;) return val; let output = {}; // 如果是 Array 类型的话,新建一个Array, 然后将值拷贝到数组中,(递归)  if (valType === \u0026#39;Array\u0026#39;) { output = []; val.forEach((v) =\u0026gt; { output.push(v); }); } else if (valType === \u0026#39;Object\u0026#39;) { Object.keys(val).forEach((v) =\u0026gt; { output[v] = deepClone(val[v]); }); } else if (valType === \u0026#39;Function\u0026#39;) { // 针对函数,使用assign来实现  output[val.name] = Object.assign({}, val); } return output; } Question: 判断输出结果 const num = { a: 10, add() { return this.a + 2; }, reduce: () =\u0026gt; this.a - 2, }; console.log(num.add()); console.log(num.reduce()); Result: 12 NaN\nadd 是普通函数，而 reduce 是箭头函数。对于箭头函数，this 关键字指向是它所在上下文（定义时的位置）的环境，与普通函数不同！ 这意味着当我们调用 reduce 时，它不是指向 num 对象，而是指其定义时的环境（window）。没有值 a 属性，返回 undefined。\n const person = { name: \u0026#39;yideng\u0026#39; }; function sayHi(age) { return `${this.name}is ${age}`; } console.log(sayHi.call(person, 21)); console.log(sayHi.bind(person, 21)); Result:\n yideng is 21 ƒ sayHi(age) { return ${this.name} is ${age}; }  使用两者，以传递我们想要this关键字引用的对象:\n .call方法会立即执行 .bind方法会返回函数的拷贝值，带有绑定的函数执行上下文， 它不会立即执行  Reference haizlin/fe-interview\nlgwebdream/FE-Interview \n","date":"2021-11-26T17:22:43+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-71/frontend-71-cover_huc336a126aad657e35f5ce3ee62e234ff_4053287_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-71/","title":"毎日のフロントエンド　 71"},{"content":"第七十日 HTML Question: html 的 \u0026lt;a\u0026gt; 标签属性 rel='nofollow' 有什么作用 rel=\u0026quot;nofollow\u0026quot;\n  \u0026lt;meta name=\u0026quot;robots\u0026quot; content=\u0026quot;nofollow\u0026quot; /\u0026gt;: 告诉搜索引擎爬虫该页面上所有链接都无需追踪。\n  \u0026lt;a href=\u0026quot;login.aspx\u0026quot; rel=\u0026quot;nofollow\u0026quot;\u0026gt;登录\u0026lt;/a\u0026gt;: 该页面无需追踪。\n  JavaScript Question: 写出执行结果，并解释原因 var x = 1; if (function f() {}) { x += typeof f; } console.log(x); Result: 1undefined\n条件判断为假的情况有：0，false，''，null，undefined，未定义对象。\n函数声明写在运算符中，其为 true，但放在运算符中的函数声明在执行阶段是找不到。 另外，对未声明的变量执行typeOf不会报错，会返回undefined\nfunction f() { return f; } console.log(new f() instanceof f); Result: false\na instanceof b 用于检测 a 是不是 b 的实例, 即检测原型链上有没有 b.prototype 即 a.proto === b.prototype || a.proto.proto === b.prototype。\n 如果题目f中没有return f,则答案为true 在本题中new f()其返回的结果为 f 的函数对象，其并不是 f 的一个实例。(new 操作符会返回该函数的一个实例)   The new keyword does the following things:\n Creates a blank, plain JavaScript object. Adds a property to the new object(__proto__)) that links to the constructor function\u0026rsquo;s prototype object. Binds the newly created object instance as the this context (i.e(in other words) this in the constructor function now refer to the object created in the first step). Returns this if the function doesn\u0026rsquo;t return an object.   Reference haizlin/fe-interview\nlgwebdream/FE-Interview \n","date":"2021-11-25T15:54:26+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-70/frontend-70-cover_hueaa87400789542f1ce6d82dd4e500f00_2065980_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-70/","title":"毎日のフロントエンド　 70"},{"content":"第六十九日 HTML Question: 怎样禁止表单记住密码自动填充 autocomplete=\u0026quot;off\u0026quot; or autocomplete=\u0026quot;new-password\u0026quot;\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;/form\u0026#34;\u0026gt; […] \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;cc\u0026#34;\u0026gt;信用卡：\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;cc\u0026#34; name=\u0026#34;cc\u0026#34; autocomplete=\u0026#34;off\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; CSS Question: *{box-sizing: border-box;} 作用及好处有哪些 {box-sizing: content-box（初期値）box-sizing: border-box} 盒子的尺寸计算有两种，一种是content-box，还有一种是border-box，两者的不同是计算最大尺寸时是否包含框和内边距\n content-box 的 width 不包括 padding 和 border border-box 的 width 包括 padding 和 border (更符合我们通常对一个「盒子」尺寸的认知,省掉一些计算)  JavaScript Question: 对base64的理解，它的使用场景有哪些 Base64 是一种二进制到文本的编码方式： 一种将 byte 数组编码为字符串的方法，而且编码出的字符串只包含 ASCII 基础字符。\nBase64 不是加密算法，其仅仅是一种编码方式，算法也是公开的，所以不能依赖它进行加密。\nBase64 使用到的 64 个字符(加一个填充字符=)：\n A-Z 26 个 a-z 26 个 0-9 10 个 + 1 个 / 1 个   Base64 就是为了解决各系统以及传输协议中二进制不兼容的问题而生的。\n  Base-64 编码保证了二进制数据的安全  Base-64 编码可以将任意一组字节转换为较长的常见文本字符序列，从而可以合法地作为首部字段值。Base-64 编码将用户输入或二进制数据，打包成一种安全格式，将其作为 HTTP 首部字段的值发送出去，而无须担心其中包含会破坏 HTTP 分析程序的冒号、换行符或二进制值。\nBase-64 编码是作为 MIME 多媒体电子邮件标准的一部分开发的，这样 MIME 就可以在不同的合法电子邮件网关之间传输富文本和任意的二进制数据里。Base-64 编码与将二进制数据文本化表示的 uuencode1 和 BinHex2 标准在本质上类似，但空间效率更高。\nData URL 用 base64 处理图片可以减少http请求\n atob()3 btoa()4  Reference haizlin/fe-interview\nlgwebdream/FE-Interview \n如何关闭表单自动填充 - Web 安全 | MDN\nBase64 - MDN Web Docs Glossary: Definitions of Web-related terms | MDN\n  Uuencode - 维基百科，自由的百科全书\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n BinHex - Wikipedia\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n WindowOrWorkerGlobalScope.atob() - Web API 接口参考 | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n WindowOrWorkerGlobalScope.btoa() - Web API 接口参考 | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-11-24T17:19:04+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-69/frontend-69-cover_hu441c61ccdf41d37f9e1a251eef8b523c_3389969_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-69/","title":"毎日のフロントエンド　 69"},{"content":"第六十八日 HTML Question: 说明HTML5在移动端如何打开 APP \u0026lt;a href=\u0026#39;zhihu://\u0026#39;\u0026gt;打开应用\u0026lt;/a\u0026gt; Android 是利用 deeplink， iOS 是利用 URL Schemes\n URL Scheme  [scheme:][//authority][path][?query][#fragment] CSS Question: 对 jpg、png、gif 的理解，分别在什么场景下使用？有使用过 webp 吗 jpg: 色彩复杂图片; png: 色彩简单图片; gif: 动图, 或者色彩极简的 icon 等\nwebp: 判断能使用webp的浏览器就是用webp\nWebP是一种支持有损压缩和无损压缩的图片文件格式，根据 Google 的测试，无损压缩后的 WebP 比 PNG 文件少了 26％的体积，有损压缩后的 WebP 图片相比于等效质量指标的 JPEG 图片减少了 25％~34%的体积。\n在浏览器中可以采用 JavaScript 检测是否支持 WebP，对支持 WebP 的用户输出 WebP 图片，否则输出其他格式的图片。\nJavaScript Question: FormData主要是用来做什么的？它的操作方法有哪些 FormData interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \u0026quot;multipart/form-data\u0026quot;.\nQuestion: js动画和css动画有什么区别   js 动画\n 会进入函数调用栈，走完事件循环才会渲染 相比 css 动画（不考虑 css 变量），js 动画可配置目标值或速率等 js 动画做暂停、反向和复杂的动画更易用    css 动画\n 简易的 hover active checked 等动效用 css 对循环播放的动画，多数情况下也是 css 动画更佳 css 动画库的复用方便    Question: 写出执行结果，并解释原因 var foo = function bar() { return 12; }; console.log(typeof bar());  输出是抛出异常，bar is not defined。  上述命名函数表达式函数只能在函数体内有效\nvar foo = function bar() { // foo is visible here  // bar is visible here  console.log(typeof bar()); // Work here :) }; // foo is visible here // bar is undefined here  typeof(bar). // \u0026#34;undefined\u0026#34; typeof(foo()). // \u0026#34;number\u0026#34; typeof(foo). // \u0026#34;function\u0026#34; typeof(bar()). // VM5167:1 Uncaught ReferenceError: bar is not defined  Reference haizlin/fe-interview\nlgwebdream/FE-Interview \nH5 唤起 APP 指南(附开源唤端库) - 掘金\nJELLY | 探究 WebP 一些事儿\nFormData - Web APIs | MDN\n","date":"2021-11-23T12:07:51+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-68/frontend-68-cover_hu4fa5f30e33cac62055f746223c8af26b_9686251_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-68/","title":"毎日のフロントエンド　 68"},{"content":"第六十七日 HTML Question: 请写出唤醒拔打电话、发送邮件、发送短信的例子 \u0026lt;a href=\u0026#34;tel:1xxxxxxxx\u0026#34;\u0026gt;一键拨打号码\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;mailto:xxxxxx@xxxx.com\u0026#34;\u0026gt;一键发送邮件\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;sms:1xxxxxxxxx\u0026#34;\u0026gt;一键发送短信\u0026lt;/a\u0026gt; CSS Question: 如何消除 transition 闪屏 .css { -webkit-transform-style: preserve-3d; -webkit-backface-visibility: hidden; -webkit-perspective: 1000; } JavaScript Question: 举例子说说对 js 隐式类型转换的理解  字符串连接符(+)，转换为 String 关系运算符(\u0026gt;,\u0026lt;,\u0026gt;=,\u0026lt;=,==)、算术运算符号(+,-,*,/,%,++,--)，转换为Number 逻辑非运算符(!)，转换为Boolean  note:   数组、对象等复杂数据类型在隐式转换时会先使用valueOf()获取其原始值，如果原始值不是 Number 则调用 toString() 转成 Sting，再转成 Number\n  Boolean转换为false： 0，-0，NaN，undefined，\u0026quot;\u0026quot;，null，[]，false\n  undefined与null的特殊情况\n  undefined == undefined; // true undefined == null; // true null == null; // true NaN与任何数据比较都是 false，包括自己。  Question: 手写数组转树 // 递归实现 let input = [ { id: 1, val: \u0026#39;学校\u0026#39;, parentId: null, }, { id: 2, val: \u0026#39;班级1\u0026#39;, parentId: 1, }, { id: 3, val: \u0026#39;班级2\u0026#39;, parentId: 1, }, { id: 4, val: \u0026#39;学生1\u0026#39;, parentId: 2, }, { id: 5, val: \u0026#39;学生2\u0026#39;, parentId: 3, }, { id: 6, val: \u0026#39;学生3\u0026#39;, parentId: 3, }, ]; function buildTree(arr, parentId, childrenArray) { arr.forEach((item) =\u0026gt; { if (item.parentId === parentId) { item.children = []; buildTree(arr, item.id, item.children); childrenArray.push(item); } }); } function arrayToTree(input, parentId) { const array = []; buildTree(input, parentId, array); return array.length \u0026gt; 0 ? (array.length \u0026gt; 1 ? array : array[0]) : {}; } const obj = arrayToTree(input, null); console.log(obj);  // reduce 函数 生成： map 数据结构 let list = [ { id: 1, name: \u0026#39;部门A\u0026#39;, parentId: 0 }, { id: 3, name: \u0026#39;部门C\u0026#39;, parentId: 1 }, { id: 4, name: \u0026#39;部门D\u0026#39;, parentId: 1 }, { id: 5, name: \u0026#39;部门E\u0026#39;, parentId: 2 }, { id: 6, name: \u0026#39;部门F\u0026#39;, parentId: 3 }, { id: 7, name: \u0026#39;部门G\u0026#39;, parentId: 2 }, { id: 8, name: \u0026#39;部门H\u0026#39;, parentId: 4 }, ]; // function convert(list) { // reduce callback first parameter `acc`=\u0026gt; 累加值，初始化为 一个空对象 {}  // item =\u0026gt; list 的 第一个元素  // 返回 acc =\u0026gt; 一个以 数组元素的id 为 key， 以 此元素为 value的键值对，的对象 （map）。  // 相当于map = new Map() 类 map结构  const map = list.reduce((acc, item) =\u0026gt; { acc[item.id] = item; return acc; }, {}); const result = []; // reduce函数返回的对象 便于进行 for in 循环。 由操作一个数组，转化操作一个对象。  for (const key in map) { // 拿到每一个原始元素id 对应的元素  const item = map[key]; if (item.parentId === 0) { result.push(item); } else { // 使用map结构的方便之处： 直接通过匹配的parentId 找到对应的parent_item  // 用本轮循环中的item的父id，直接从map中取得对应的父元素，  // 增加children属性，向children属性添加数组形式的子元素  const parent = map[item.parentId]; if (parent) { parent.children = parent.children || []; parent.children.push(item); } else { result.push(item); // 要加上else，保证匹配不到 parent_id 的元素被保留  } } } return result; } const result = convert(list); console.log(result);  一个 “更” map 的写法\ntype Node\u0026lt;T\u0026gt; = { id: number; value: T; parentId: number; }; type TreeNode\u0026lt;T\u0026gt; = { id: number; value: T; parentId: number; children: TreeNode\u0026lt;T\u0026gt;[]; }; const list: Node\u0026lt;string\u0026gt;[] = [ { id: 1, value: \u0026#39;V1\u0026#39;, parentId: 0 }, { id: 3, value: \u0026#39;V2\u0026#39;, parentId: 1 }, { id: 4, value: \u0026#39;V3\u0026#39;, parentId: 1 }, { id: 5, value: \u0026#39;V4\u0026#39;, parentId: 2 }, { id: 6, value: \u0026#39;V5\u0026#39;, parentId: 3 }, { id: 7, value: \u0026#39;V6\u0026#39;, parentId: 2 }, { id: 8, value: \u0026#39;V7\u0026#39;, parentId: 4 }, ]; const listToTree = \u0026lt;T\u0026gt;(list: Node\u0026lt;T\u0026gt;[]): TreeNode\u0026lt;T\u0026gt; | undefined =\u0026gt; { const map = list.reduce\u0026lt;Map\u0026lt;number, TreeNode\u0026lt;T\u0026gt;\u0026gt;\u0026gt;((prev, curr) =\u0026gt; { prev.set(curr.id, { ...curr, children: [] }); return prev; }, new Map()); let headId = 1; map.forEach((treeNode) =\u0026gt; { const parent = map.get(treeNode.parentId); if (parent) { parent.children.push(treeNode); } if(treeNode.parentId === 0) { headId = treeNode.id; } }); return map.get(headId); }; Reference haizlin/fe-interview\nlgwebdream/FE-Interview \n手写数组转树 · lgwebdream/FE-Interview\n","date":"2021-11-22T14:50:01+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-67/frontend-67-cover_hu3135113375e623ed28869a69c30d09c0_2804552_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-67/","title":"毎日のフロントエンド　 67"},{"content":"第六十六日 HTML Question: HTML5如果不写\u0026lt;! DOCTYPE html\u0026gt;, 页面还会正常工作么 页面添加了\u0026lt;! DOCTYPE html\u0026gt;说明该页面采用了W3C标准，如果不加则页面会根据浏览器自身的解析标准来解析，这可能会导致页面在不同的浏览器呈现出不同的效果。\nCSS Question: 元素竖向的百分比设置是相对容器的高度吗 当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的\n对于一些表示竖向距离的属性，例如padding-top, padding-bottom, margin-top, margin-bottom等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。\nJavaScript Question: 事件循环机制(node、浏览器) 为什么会有Event Loop JavaScript的任务分为两种同步和异步，它们的处理方式也各自不同，同步任务是直接放在主线程上排队依次执行，异步任务会放在任务队列中，若有多个异步任务则需要在任务队列中排队等待，任务队列类似于缓冲区，任务下一步会被移到调用栈然后主线程执行调用栈的任务。\n 调用栈：调用栈是一个栈结构，函数调用会形成一个栈帧，帧中包含了当前执行函数的参数和局部变量等上下文信息，函数执行完后，它的执行上下文会从栈中弹出。\n JavaScript是单线程的，单线程是指 js 引擎中解析和执行 js 代码的线程只有一个（主线程），每次只能做一件事情，然而ajax请求中，主线程在等待响应的过程中会去做其他事情，浏览器先在事件表注册ajax的回调函数，响应回来后， 回调函数被添加到任务队列中等待执行，不会造成线程阻塞，所以说 js 处理 ajax 请求的方式是异步的。\n综上所述，检查调用栈是否为空以及讲某个任务添加到调用栈中的个过程就是 event loop，这就是 JavaScript 实现异步的核心。\n浏览器中的 Event Loop Micro-Task 与 Macro-Task\n浏览器端事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。\n常见的 macro-task：\n setTimeout setInterval \u0026lt;script\u0026gt;\u0026lt;/script\u0026gt; I/O UI渲染  常见的 micro-task:\n Promise MutationObserver : 触发指定 DOM 事件时，调用指定的回调函数。MutationObserver 对 DOM 的观察不会立即启动；而必须先调用 observe() 方法来确定，要监听哪一部分的 DOM 以及要响应哪些更改。  Note:\nrequestAnimationFrame: 属于异步执行的方法，但该方法既不属于宏任务，也不属于微任务。requestAnimationFrame是 GUI 渲染之前执行，但在Micro-Task之后，不过 requestAnimationFrame 不一定会在当前帧必须执行，由浏览器根据当前的策略自行决定在哪一帧执行。\n browser-event-loop \n 检查 macrotask 队列是否为空，非空则到 2，为空则到 3 执行 macrotask 中的一个任务 继续检查 microtask 队列是否为空，若有则到 4，否则到 5 取出 microtask 中的任务执行，执行完成返回到步骤 3 执行视图更新   当某个宏任务执行完后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，会读取宏任务队列中排在最前的任务，执行宏任务的过程中，遇到微任务，依次加入微任务队列。栈空后，再次读取微任务队列里的任务，依次类推。\n node 中的 Event Loop Node 中的 Event Loop 和浏览器中的是完全不相同的东西。Node.js 采用V8作为js解析引擎，而I/O处理方面使用了自己设计的libuv，libuv是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。\n node-event-loop \n V8 引擎解析 JavaScript 脚本。 解析后的代码，调用 Node API。 libuv 库负责 Node API 的执行。它将不同的任务分配给不同的线程，形成一个 Event Loop（事件循环），以异步的方式将任务的执行结果返回给 V8 引擎。 V8 引擎再将结果返回给用户。  libuv  六大阶段  libuv引擎中的事件循环分为 6 个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。\n libuv \n timers 阶段：这个阶段执行 timer（setTimeout、setInterval）的回调，并且是由 poll 阶段控制的。 I/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调 idle, prepare 阶段：仅 node 内部使用 poll 阶段：获取新的 I/O 事件, 适当的条件下 node 将阻塞在这里 check 阶段：执行 setImmediate() 的回调 close callbacks 阶段：执行 socket 的 close 事件回调  poll阶段 poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情：\n 回到 timer 阶段执行回调 执行 I/O 回调  在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情：\n 如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制 如果 poll 队列为空时：  如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调 如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去    设定了 timer 且 poll 队列为空，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。\nMicro-Task 与 Macro-Task Node端事件循环中的异步队列也是这两种：macro（宏任务）队列和 micro（微任务）队列。\n常见的 macro-task:\n setTimeout、setInterval、 setImmediate、\u0026lt;script\u0026gt;\u0026lt;/script\u0026gt;、 I/O 操作  常见的 micro-task:\n process.nextTick, Promise  Note setTimeout 和 setImmediate 二者非常相似，区别主要在于调用时机不同。\n setImmediate 设计在poll阶段完成时执行，即check阶段； setTimeout 设计在poll阶段为空闲时，且设定时间到达后执行，但它在timer阶段执行  setTimeout(function timeout() { console.log(\u0026#39;timeout\u0026#39;); }, 0); setImmediate(function immediate() { console.log(\u0026#39;immediate\u0026#39;); });  对于以上代码来说，setTimeout 可能执行在前，也可能执行在后。 首先 setTimeout(fn, 0) === setTimeout(fn, 1)，这是由源码决定的 进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 setTimeout 回调 如果准备时间花费小于 1ms，那么就是 setImmediate 回调先执行了  process.nextTick 这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。\nNode与浏览器的 Event Loop 差异  Node与浏览器的 Event Loop 差异 \n Node端，microtask 在事件循环的各个阶段之间执行 浏览器端，microtask 在事件循环的 macrotask 执行完之后执行   在 node 11 版本后，node 下 Event Loop 已经与浏览器趋于相同\n Reference haizlin/fe-interview\nlgwebdream/FE-Interview \n七个 Web 前端程序员必须会用 css 技巧\n事件循环机制\n浏览器和 Node 不同的事件循环（Event Loop） - SegmentFault 思否\n","date":"2021-11-21T14:43:43+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-66/frontend-66-cover_huccb56b195736c4ebd12a03bfcf1969a6_1011985_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-66/","title":"毎日のフロントエンド　66"},{"content":"第六十五日 HTML Question: HTML直接输入多个空格为什么只能显示一个空格 该行为由 CSS white-space 控制，其默认值 normal 的表现即为多个空格压缩成一个\nJavaScript Question: 数据类型转换的方法有哪些   数据等于判断时的类型转换\n  if 等判断只做 Boolean() 转换\n  包含： if ?: \u0026amp;\u0026amp; ||\n \nNumber 与 parse 函数  Number 比 parseInt 能转化更多，比如 \u0026quot;\u0026quot; Infinity [] true 都会被 parseInt 返回 NaN，而 Number 有值。\nNumber(\u0026#39;\u0026#39;); // 0 parseInt(\u0026#39;\u0026#39;); // NaN  Number([1, 2]); // NaN parseInt([1, 2]); // 1  Number(null); // 0 Number(undefined); // NaN parseInt(null); // NaN parseInt(undefined); // NaN  ((Number(\u0026#39;1.\u0026#39;) == parseInt(\u0026#39;1.\u0026#39;)) == parseInt(\u0026#39;1,\u0026#39;)) == 1; Number(\u0026#39;1x\u0026#39;) == NaN; 计算时的类型转换  +\u0026#39; 014\u0026#39; // 14 +\u0026#39;0x12\u0026#39; // 18  1 + \u0026#39;14\u0026#39; // \u0026#39;114\u0026#39; 1 + \u0026#39;0x12\u0026#39; // \u0026#39;10x12\u0026#39; 1 + +\u0026#39;14\u0026#39; // 15 \u0026#39;14\u0026#39; + 1 // \u0026#39;141\u0026#39;  1 + [1, 1]; // \u0026#39;11,1\u0026#39; 1 + {}; // \u0026#39;1[object Object]\u0026#39;  1 + null; // 1 1 +undefined; // NaN  ++\u0026#39;14\u0026#39; // ReferenceError  Infinity+Infinity; // Infinity -Infinity+(-Infinity); // -Infinity Infinity+(-Infinity); // NaN  +0+(+0); // 0 (-0)+(-0); // -0 (+0)+(-0); // 0  toString  String(null); // \u0026#39;null\u0026#39; null.toString(); // Uncaught TypeError undefined.toString(); // Uncaught TypeError  (30).toString(16); // \u0026#34;1e\u0026#34; \u0026#39;30\u0026#39;.toString(16); // \u0026#34;30\u0026#34;  [1, [2, \u0026#39;abc\u0026#39;, \u0026#39;\u0026#39;, 0, null, undefined, false, NaN], 3].toString(); // \u0026#34;1,2,abc,,0,,,false,NaN,3\u0026#34;  null.toString(); // Uncaught TypeError // 在使用 toString 时最好加个判断，或用 [] 再 toString [null].toString(); // \u0026#39;\u0026#39; JSON.stringify  JSON.stringify(Infinity); // \u0026#39;null\u0026#39; JSON.stringify(NaN); // \u0026#39;null\u0026#39; JSON.stringify(undefined); // undefined （注：非字符串） JSON.stringify([undefined]); // \u0026#39;[null]\u0026#39; JSON.stringify({ a: undefined }); // \u0026#39;{}\u0026#39; JSON.stringify({ a: null }); // \u0026#39;{\u0026#34;a\u0026#34;:null}\u0026#39; JSON.stringify(() =\u0026gt; {}); // \u0026#39;undefined\u0026#39; Reference haizlin/fe-interview\nlgwebdream/FE-Interview \n","date":"2021-11-20T19:30:16+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-65/frontend-65-cover_hua6dff56fad6540fcf357ae179bbfd418_2142900_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-65/","title":"毎日のフロントエンド　65"},{"content":"第六十四日 HTML Question: 写出 html 提供的几种空格实体  \u0026amp;nbsp;: No-Break Space 不换行空格 \u0026amp;ensp;: En Space 半角空格, en 是字体排印学的计量单位，为 em 宽度的一半(如16px字体中就是8px) \u0026amp;emsp;: Em Space 全角空格, em 是字体排印学的计量单位，相当于当前指定的点数。例如，1em在16px的字体中就是16px。 \u0026amp;thinsp;: Thin Space 窄空格 \u0026amp;zwnj;: Zero Width Non Joiner 是一个不打印字符  此外，浏览器还会把以下字符当作空白进行解析：空格（\u0026amp;#x0020;）、制表位（\u0026amp;#x0009;）、换行（\u0026amp;#x000A;）和回车（\u0026amp;#x000D;）还有（\u0026amp;#12288;）\nCSS Question: 举例说明css中颜色的表示方法有几种  颜色单词: blue / lightblue / skyblue / transparent(透明) rgb(0-255, 0-255, 0-255) / rgba(0-255, 0-255, 0-255, 0-1) hsl色相: hsl(色调，饱和度，明度) hsla( 色调，饱和度，亮度，不透明度 ) (兼容性) 十六进制: #0- #FFFFFF ( #0 - #fff ) ( 0-9 a-f | [A-F] )  JavaScript Question: (谜题)如何让(a==1 \u0026amp;\u0026amp; a==2 \u0026amp;\u0026amp; a==3)的值为 true，把 == 换成 === 后还能为true吗 const a = { value: 0 }; a.valueOf = function () { return (this.value += 1); }; console.log(a == 1 \u0026amp;\u0026amp; a == 2 \u0026amp;\u0026amp; a == 3); //true 宽松相等== 先将左右两两边的值转化成相同的原始类型，然后再去比较他们是否相等。\n在进行两个值的比较时，执行了类型的强制转换:\nToPrimitive(input, PreferredType?)\n转化过程如下:\n 如果输入input是基本类型, 就返回这个值 如果输入变量是Object类型, 那么调用input.valueOf(). 如果返回结果是基本类型，就返回这个值 如果都不是的话就调用input.toString(). 如果结果是基本类型, 就返回它 如果以上都不可以，就会抛出一个类型错误TypeError， 表示转化input变量到基本类型失败。  (a === 1 \u0026amp;\u0026amp; a === 2 \u0026amp;\u0026amp; a === 3)(严格匹配) 问题 var value = 0; //window.value Object.defineProperty(window, \u0026#39;a\u0026#39;, { get: function () { return (this.value += 1); }, }); console.log(a === 1 \u0026amp;\u0026amp; a === 2 \u0026amp;\u0026amp; a === 3); // true JS 中的原始类型将不再满足于上面的条件(严格相等没有转化的过程)，所以需要通过一些方式去调用一个函数，并在这个函数中做想做的事情。\n这里不是宽松相等==，valueOf 将不会被 JS 引擎调用\n 属性描述符(property descriptors)\n 使用Object.defineProperty为对象定义了一个属性, 此处, 需要调用一个无需()(执行)的函数, 通过get属性, 我们可以调用一个函数并且不用在函数名后添加()\n上面提到的解决方案中, 在 window 对象上定义了一个具有 getter 的 a 属性, 所以 a 可以在代码中直接被访问到(全局变量)， 因此也可以直接获得 a 的值。\nReference haizlin/fe-interview\nlgwebdream/FE-Interview \n[译] 在 JS 中，如何让(a===1 \u0026amp;\u0026amp; a===2 \u0026amp;\u0026amp; a === 3)(严格相等)的值为 true？ - 掘金\nObject.defineProperty() - JavaScript | MDN\n","date":"2021-11-19T14:21:57+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-64/frontend-64-cover_hucfd3b3e6a7ab8bf8c325243b38932221_2377009_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-64/","title":"毎日のフロントエンド　64"},{"content":"第六十三日 HTML Question: 什么是 html 的字符实体？版权符号代码怎么写 在 HTML 中，某些字符是预留的，这些预留字符必须被替换为字符实体.。 如： \u0026amp;lt; \u0026amp;gt;\n版权符号： \u0026amp;copy;\nCSS Question: position的absolute和fixed共同与不同点分别是什么  static: 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明） relative: 生成相对定位的元素，通过top, bottom, left, right 的设置相对于其正常（原先本身）位置进行定位。可通过z-index进行层次分级。 absolute: 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 left, top, right 以及 bottom 属性进行规定。可通过z-index进行层次分级。 fixed: 生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 left, top, right 以及 bottom 属性进行规定。可通过 z-index 进行层次分级。  relative 定位为 relative 的元素脱离正常的文本流中，但其在文本流中的位置依然存在。 无论父级存在不存在，无论有没有 TRBL(top right bottom left)，均是以父级的左上角进行定位，但是父级的Padding属性会对其影响。\nabsolute 定位为absolute的层脱离正常文本流，但与relative的区别是其在正常流中的位置不再存在。\n若想把一个定位属性为 absolute 的元素定位于其父级元素内，只有满足两个条件：\n 设定 TRBL(top right bottom left) 父级设定position属性  relative与absolute的主要区别  relative定位的层总是相对于其最近的父元素，无论其父元素是何种定位方式 absolute 总是相对于其最近的定义为absolute或relative的父层，这个父层并不一定是其直接父层。如果其父层中都未定义absolute或relative，则其将相对 body`进行定位  Summary 用position来布局页面，父级元素的position属性必须为relative，而定位于父级内部某个位置的元素，最好用 absolute。 因为它不受父级元素的padding的属性影响，当然也可以用 position，不过到时候计算的时候不能忘记 padding 的值。\n 绝对(absolute)定位对象在可视区域之外会导致滚动条出现。而放置相对(relative)定位对象在可视区域之外，滚动条不会出现。 使用static 定位或无 position定位的元素z-index属性是无效的\n JavaScript Question: 举例说明 javascript 的变量声明提升和函数声明提升  变量声明只提升声明 不提升赋值操作 函数声明 函数体整体被提升  One more Question Question: css 伪类 与 伪元素 伪类(pseudo-classes)  其核⼼就是⽤来选择 DOM 树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。 ⽐如:hover :active :visited :link :visited :first-child :focus :lang 等 由于状态的变化是⾮静态的，所以元素达到⼀个特定状态时，它可能得到⼀个伪类的样式；当状态改变时，它⼜会失去这个样式。 由此可以看出，它的功能和 class 有些类似，但它是基于⽂档之外的抽象，所以叫 伪类。  伪元素(Pseudo-elements)  DOM 树没有定义的虚拟元素 核⼼就是需要创建通常不存在于⽂档中的元素， ⽐如 ::before ::after 它选择的是元素指定内容，表示选择元素内容的之前内容或之后内容。 伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器  伪类与伪元素的区别   表示⽅法:\n CSS2 中伪类、伪元素都是以单冒号:表示 CSS2.1 后规定伪类⽤:单冒号表示,伪元素⽤双冒号::表示 CSS3，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。浏览器对以:开头的伪元素也继续⽀持，但建议规范书写为::开头    不同之处\n 伪类即假的类，可以添加类来达到效果 伪类其实就是基于普通 DOM 元素⽽产⽣的不同状态，是 DOM 元素的某⼀特征。 伪元素即假元素，需要通过添加元素才能达到效果 伪元素能够创建在 DOM 树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的     是否需要添加元素才能达到效果，如果是则是伪元素，反之则是伪类。\n  相同之处  伪类和伪元素都不出现在源⽂件和 DOM 树中。也就是说在 html 源⽂件中是看不到伪类和伪元素的    Reference haizlin/fe-interview\nlgwebdream/FE-Interview \nHTML ISO-8859-1 参考手册\n","date":"2021-11-18T10:37:36+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-63/frontend-63-cover_hufa16d5719b086907da843cccc9068d3b_1861886_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-63/","title":"毎日のフロントエンド　63"},{"content":"第六十二日 HTML Question: HTML5 的拖放 API   图片默认自带拖拽功能，非图片元素设置 draggable 属性为 true 即可拖拽。\n  被拖拽元素的事件：\n ondragstart 拖拽的一瞬间触发 ondrag 拖拽期间连续触发 ondragend 拖拽结束触发    目标元素事件（将拖拽元素释放的地方）：\n ondragenter 进入目标元素触发（鼠标光标进入） ondragover 进入离开目标元素连续触发 ondragleave 离开目标元素触发 ondrop 在目标元素上释放鼠标触发    默认状态下，一个元素不能放在另一个元素上面，需要在 ondragover 上阻止默认事件。\nJavaScript Question: 写出执行结果,并解释原因 一 var fullname = \u0026#39;a\u0026#39;; var obj = { fullname: \u0026#39;b\u0026#39;, prop: { fullname: \u0026#39;c\u0026#39;, getFullname: function () { return this.fullname; }, }, }; console.log(obj.prop.getFullname()); // c var test = obj.prop.getFullname; console.log(test()); // a Explain:\n this 指向的是函数的执行环境，this 取决于其被谁调用了，而不是被谁定义了 对第一个 console.log()语句而言，getFullName()是作为 obj.prop 对象的一个方法被调用的，因此此时的执行环境应该是这个对象。 另一方面，但 getFullName()被分配给 test 变量时，此时的执行环境变成全局对象（window），原因是 test 是在全局作用域中定义的。因此，此时的 this 指向的是全局作用域的 fullname 变量，即 a (var 声明)  Question: 写出执行结果,并解释原因 二 var company = { address: \u0026#39;toki\u0026#39;, }; var abc = Object.create(company); delete abc.address; console.log(abc.address); // toki Explain:\n这里的 abc 通过 prototype 继承了 company 的 address。abc 自己并没有 address 属性。所以 delete 操作符无效。\n  note one：\n delete 操作符用于删除对象的某个属性；如果没有指向这个属性的引用，那它最终会被释放。 delete 的操作对象应是某个属性的引用 返回值： 对于所有情况都是 true，除非属性是一个自身的 不可配置的属性，在这种情况下，非严格模式返回 false。:如果你试图删除的属性不存在，那么delete 将不会起任何作用，但仍会返回true delete 操作符与直接释放内存无关。    note two:\n  delete 在删除一个不可配置的属性时在严格模式和非严格模式下的区别:\n 在严格模式中，如果属性是一个不可配置（non-configurable）属性，删除时会抛出异常; 非严格模式下返回 false    delete 能删除隐式声明的全局变量：这个全局变量其实是global对象(window)的属性\n  delete 可以删除的:\n 可配置对象的属性 隐式声明的全局变量 用户定义的属性 在 ES6 中，通过 const 或 let 声明指定的 temporal dead zone (TDZ) , delete 操作符也会起作用    delete不能删除的:\n 显式声明的全局变量 内置对象的内置属性 一个对象从原型继承而来的属性(如，本题)    delete 删除数组元素:\n 删除一个数组元素时，数组的 length 属性并不会变小，数组元素变成undefined 用 delete 操作符删除一个数组元素时，被删除的元素已经完全不属于该数组 如果想让一个数组元素的值变为 undefined 而不是删除它，可以使用 undefined 给其赋值而不是使用 delete 操作符。此时数组元素是在数组中的      Example:\nvar output = (function(x){ delete x; return x; })(0); console.log(output); // 0 // delete 操作符是将object的属性删去的操作。但是这里的 x 是并不是对象的属性， delete 操作符并不能作用  var x = 1; var output = (function(){ delete x; return x; })(); console.log(output); // 1 同上  var x = { foo: 1 }; var output = (function () { delete x.foo; return x.foo; })(); console.log(output); // undefined // x虽然是全局变量，但是它是一个object。delete作用在x.foo上，成功的将x.foo删去。所以返回 undefined Reference haizlin/fe-interview\nlgwebdream/FE-Interview \nSortableJS/Sortable: Reorderable drag-and-drop lists for modern browsers and touch devices. No jQuery or framework required.\ndelete 操作符 - JavaScript | MDN\n","date":"2021-11-17T10:03:17+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-62/frontend-62-cover_hu5942861c36a348d9337193d6ea71cbbc_3032302_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-62/","title":"毎日のフロントエンド　62"},{"content":"第六十一日 HTML Question: HTML5 的webSQL(deprecated)和IndexedDB IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。\nIndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。\nIndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。\nIndexedDB 具有以下特点:\n 键值对储存:每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误 异步: 这与 LocalStorage 形成对比，后者的操作是同步的 支持事务: 一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况 同源限制: 网页只能访问自身域名下的数据库，而不能访问跨域的数据库 储存空间大: IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB 支持二进制储存: 二进制数据（ArrayBuffer 对象和 Blob(Binary Large Object) 对象）  JavaScript Question: 写一个方法获取图片的原始宽高 function loadImageAsync(url) { return new Promise(function (resolve, reject) { // Image(width, height) 创建一个新的HTMLImageElement实例  var image = new Image(); image.src = url; image.onload = function () { let obj = { w: image.naturalWidth, // 如果图片是以其原来的大小渲染，则此值等于图片的宽度。  h: image.naturalHeight, // 如果图片是以其原来的大小渲染，则此值等于图片的高度  }; resolve(obj); }; image.onerror = function () { reject(new Error(\u0026#39;Could not load image at \u0026#39; + url)); }; }); } Question: One more Question // 写出执行结果，并解释原因 (function () { var a = (b = 5); })(); console.log(b); console.log(a); Answer: 5, Uncaught ReferenceError: a is not defined\nExplain:\n在这个立即执行函数表达式（IIFE）中包括两个赋值操作，其中 a 使用 var 关键字进行声明，因此其属于函数内部的局部变量（仅存在于函数中），相反，b 被分配到全局命名空间(window)。\n 这里没有在函数内部使用严格模式(use strict;)。如果启用了严格模式，代码会在输出 b 时报错Uncaught ReferenceError: b is not defined,需要记住的是，严格模式要求显式的引用全局作用域。\n (function () { \u0026#39;use strict\u0026#39;; var a = (b = 5); })(); console.log(b); //Uncaught ReferenceError: b is not defined  /*---------------------------*/ (function () { \u0026#39;use strict\u0026#39;; var a = (window.b = 5); })(); console.log(b); // 5 Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n浏览器数据库 IndexedDB\n","date":"2021-11-16T12:44:26+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-61/frontend-61-cover_huaeae36620bfa37ec463aff6f7625ace8_2994182_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-61/","title":"毎日のフロントエンド　61"},{"content":"第六十日 HTML Question: src、href、link的区别是什么  src用于替代这个元素，而href用于建立这个标签与外部资源之间的关系\n  href - HyperText Reference  超文本引用， 常用的有： \u0026lt;a\u0026gt;,\u0026lt;link\u0026gt;, href是引用和页面关联，是在当前元素和引用资源之间 建立联系\n\u0026lt;link href=\u0026quot;reset.css\u0026quot; rel=”stylesheet“/\u0026gt; 浏览器会识别该文档为 css 文档，并行下载该文档，并且不会停止对当前文档的处理。\nsrc - source  src 的内容是页面必不可少的一部分，是 引入。src指向的内容会嵌入到文档中当前标签所在的位置。常用的有：\u0026lt;img\u0026gt;、\u0026lt;script\u0026gt;、\u0026lt;iframe\u0026gt;\n\u0026lt;script src=\u0026quot;script.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; 当浏览器解析到该元素时，会暂停浏览器的渲染，直到该资源加载完毕。\n补充 link和@import的区别  link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。 link支持使用JS控制DOM去改变样式；而@import不支持 link 兼容性更好  JavaScript Question: 请实现一个flattenDeep函数，把多维数组扁平化 solution:\nfunction flatten(arr) { return arr.reduce((pre, current) =\u0026gt; { return pre.concat(Array.isArray(current) ? flatten(current) : current); }, []); }  arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n reduce 接收参数说明：\n  callback 函数，执行数组中每个值 (如果没有提供 initialValue, 则第一个值除外)的函数， 此函数包含四个参数：\n accumulator: 累计器， 用于累计回调函数的返回值； acc 的值是上一次调用回调时返回的累计值。或者是 函数外提供的值 =\u0026gt; initialValue currentValue: 数组中正在被处理的那个元素 index(可选)： currentValue 的索引。 如果提供了initialValue， 则 index 从 0 开始，否则从 1 开始 array(可选): 调用reduce()的数组    initialValue(可选): 作为第一次调用 callback 函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。\n  说明： 回调函数第一次执行时，accumulator 和 currentValue 的取值有两种情况：如果调用 reduce()时提供了 initialValue，accumulator 取值为 initialValue，currentValue 取数组中的第一个值；如果没有提供 initialValue，那么 accumulator 取数组中的第一个值，currentValue 取数组中的第二个值。\n  Question: 写出执行结果 var length = 10; function fn() { console.log(this.length); } var obj = { length: 2, show: function (fn) { this.length = 3; fn(); arguments[0](); }, }; obj.show(fn); Answer: 10, 1\nExplain:\n 10 =\u0026gt; 来自 show 的匿名函数内的 fn(),嵌套函数里的 this 在未指定的情况下，默认绑定，应该指向的是 window 对象(此处并不指向调用它外部函数的对象obj), let 声明变量时会形成块级作用于，且不存在变量提升，而 var 存在声明提升,因此，window.a 为 10 1 =\u0026gt; 可以将arguments[0]()看成arguments.0(); 因此这里的 this 是函数的参数，也就是 arguments 的个数  Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \nArray.prototype.reduce() - JavaScript | MDN\n","date":"2021-11-15T15:49:03+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-60/frontend-60-cover_hudc81c27420b7943d487a1ef0a83d433c_637835_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-60/","title":"毎日のフロントエンド　60"},{"content":"第五十九日 HTML Question: 对WebGL的理解 WebGL（Web 图形库）是一个 JavaScript API，可在任何兼容的 Web 浏览器中渲染高性能的交互式 3D 和 2D 图形，而无需使用插件。WebGL 通过引入一个与 OpenGL ES 2.0 非常一致的 API 来做到这一点，该 API 可以在 HTML5 \u0026lt;canvas\u0026gt; 元素中使用。 这种一致性使 API 可以利用用户设备提供的硬件图形加速。\nJavaScript Question: 一个格式化金额的方法( 添加逗号 ) function formatPrice(val, spacer = \u0026#39;,\u0026#39;) { const typeVal = typeof val; if (typeVal !== \u0026#39;string\u0026#39; \u0026amp;\u0026amp; typeVal !== \u0026#39;number\u0026#39;) return val; let _val = \u0026#39;\u0026#39; + val; return _val.replace(/\\B(?=(\\d{3})+\\b)/g, spacer); } console.log(formatPrice(123567890.23)); // 123,567,890.23   Intl.NumberFormat - JavaScript | MDN\n Question: 写出执行结果， 并解释原因 var a = [0]; if (a) { console.log(a == true); } else { console.log(a); }  在程序和方法的最顶端，let 不像 var 一样，let 不会在全局对象里新建一个属性。比如：位于函数或代码顶部的 var 声明会给全局对象新增属性, 而 let 不会。\n Answer: false\n当 a 出现在 if 的条件中时，被转成布尔值，而 Boolean([0])为 true,所以就进行下一步判断 a == true,在进行比较时，[0]被转换成了 0，所以 0==true 为 false\n!![]; //true 空数组转换为布尔值是 true, !![0]; //true 数组转换为布尔值是 true [0] == true; //false 数组与布尔值比较时却变成了 false Number([]); //0 Number(false); //0 Number([\u0026#39;1\u0026#39;]); //1  双感叹号：用两个!!就可以将变量转化为对应布尔值\n 1 == true; //true 1 === Number(true) \u0026#39;true\u0026#39; == true; //false Number(\u0026#39;true\u0026#39;)-\u0026gt;NaN Number(true)-\u0026gt;1 \u0026#39;\u0026#39; = 0;//true \u0026#39;1\u0026#39; == true;//true Number(\u0026#39;1\u0026#39;)-\u0026gt;1  == 比较， 类型转换规则：\n 如果比较的是原始类型的值，原始类型的值会转成数值再进行比较 对象与原始类型值比较，对象会转换成原始类型的值再进行比较。 undefined 和 null 与其它类型进行比较时，结果都为 false，他们相互比较时结果为 true   Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \nWebGL - Web API 接口参考 | MDN\n","date":"2021-11-14T14:41:10+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-59/frontend-59-cover_hu0093becff9b3695b7123f78fcd954563_1159308_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-59/","title":"毎日のフロントエンド　59"},{"content":"第五十八日 HTML Question: HTML5 相对于 HTML4 有哪些优势 更简洁-文档声明 更语义-语义标签 功能更强-各种表单属性及自定义属性等\nCSS Question: box-sizing 常用的属性有哪些？分别有什么作用 The box-sizing css property sets how the total width and heights of elements are calculated.\nThere are two behaviors to be used to adjust:\n  content-box gives you the default box-sizing behavior. If you set an element\u0026rsquo;s width to 100 px, then element\u0026rsquo;s content box will be 100 px wide, and the width of any border or padding will be added to the final rendered width, making the element wider than 100 px.\n  border-box tells the browser to account for any border and padding in the values you specify for an element\u0026rsquo;s width and height. If you set an element\u0026rsquo;s width to 100 pixels, that 100 px will include any border or padding you added, and the content box will shrink to absorb that extra width.\n  border-box typically makes it much easier to size elements. And that\u0026rsquo;s the default styling that browsers use for the \u0026lt;table\u0026gt;, \u0026lt;select\u0026gt;, \u0026lt;button\u0026gt;elements, and for \u0026lt;input\u0026gt; elements whose type us radio, checkbox,reset, button, submit, color, or search.\n content-box 盒子的宽度不包含 border 和 padding，border-box 盒子的宽度包含 border 和 padding\n JavaScript Question: 请说下对proto和 prototype 的理解  只有函数对象才有prototype属性, prototype对象上存放共用的方法和属性 对象都有 __proto__属性，__proto__ 是指向该对象构造函数的原型属性（即prototype）, 函数本身也是对象， 同样有__proto__属性 同时，constructor是对象才有的属性,它是从一个对象指向一个函数的,指向的函数就是该对象的构造函数。每个对象都有构造函数  通过__proto__属性（从一个对象指向另一个对象）, 可以拿到Object原型对象上的属性和方法，原型对象上的__proto__又指向该构造函数的prototype，从而形成了一条原型链。\np1.__proto__ === Parent.prototype; //true\n__proto__通常称为隐式原型，prototype通常称为显式原型，那可以说一个对象的隐式原型指向了该对象的构造函数的显式原型。\n那么我们在显式原型上定义的属性方法，通过隐式原型传递给了构造函数的实例。这样一来实例就能很容易的访问到构造函数原型上的方法和属性了。\nParent.prototype.__proto__ === Object.prototype; //true\nReference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n一张图搞定 JS 原型\u0026amp;原型链\n","date":"2021-11-13T15:00:34+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-58/frontend-58-cover_hu8b21583feb74d263a0b19bbb61cd2e80_1501205_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-58/","title":"毎日のフロントエンド　58"},{"content":"第五十七日 HTML Question: HTML5的download属性 HTMLAnchorElement.download属性是一个DOMString，表明链接的资源将被下载，而不是显示在浏览器中。该值表示下载文件的建议名称。\n常规的\u0026lt;a\u0026gt;标签通过 href 实现链接跳转，如果只想下载文件而不是跳转预览，最好的方式是在\u0026lt;a\u0026gt;标签中添加download属性，就能很简单地实现下载操作。\ndownload是 HTML5 中\u0026lt;a\u0026gt;标签新增的一个属性，此属性会强制触发下载操作，指示浏览器下载 URL 而不是导航到它，并提示用户将其保存为本地文件，例如\n\u0026lt;a href=\u0026quot;result.png\u0026quot; download\u0026gt;download\u0026lt;/a\u0026gt;\nCSS Question: inline、block、inline-block这三个属性值有什么区别 CSS 显示模块分为内部显示类型和外部显示类型，内部显示类型是定义子元素如何参与内部布局，外部显示类型定义了父元素如何参与外部整个文档流的布局:\ninline-\u0026gt; inline-inline; block-\u0026gt; block-block; inline-block-\u0026gt; inline-block;\n inline： 行内元素，元素不独占一行，不可以修改宽高; block： 块级元素，元素独占一行，可以修改宽高; inline-block： 行内块级元素，元素不独占一行，并且可以修改宽高\n JavaScript Question: 写一个方法，使得sum(x)(y)和sum(x,y)返回的结果相同  sum(x)(y)和sum(x,y)返回的结果相同  const sum = function (x) { if (argument[1]) { return x + argument[1]; } else { return function (y) { return x + y; }; } }; console.log(sum(3, 4)); // 7  console.log(sum(3)(4)); // 7 Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n浅析 HTML5 中的 download 属性\nJavaScript 高阶函数浅析\nLodash Documentation # curry\n","date":"2021-11-12T16:05:02+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-57/frontend-57-cover_hue3849197f5b979cd742b80c6c887eb37_2295043_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-57/","title":"毎日のフロントエンド　57"},{"content":"第五十六日 HTML Question: 渐进式渲染是什么progressive rendering 渐进式渲染是用来提高网页性能，以尽快呈现页面的技术。 比如：\n 图片懒加载——页面上的图片不会一次性全部加载。当用户滚动页面到图片部分时，JavaScript 将加载并显示图像。 确定显示内容的优先级（分层次渲染）——为了尽快将页面呈现给用户，页面只包含基本的最少量的 CSS、脚本和内容，然后可以使用延迟加载脚本或监听 DOMContentLoaded/load 事件加载其他资源和内容。 异步加载 HTML 片段——当页面通过后台渲染时，把 HTML 拆分，通过异步请求，分块发送给浏览器。  CSS Question: margin和padding使用的场景有哪些 margin是用来隔开元素与元素的间距\npadding是用来隔开元素与内容的间隔\nmargin用于布局分开元素使元素与元素互不相干\npadding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段距离\nJavaScript Question: JSONP的原理是什么？解决什么问题 JSONP 是什么 JSONP 是一种动态 script 标签跨域请求技术。 指的是请求方动态创建 script 标签，src指向响应方的服务器（非同源的 url），同时传一个参数callback， callback 后面是functionName，当请求方发起请求时，响应方根据传过来的参数callback,构造并调用：xxx.call(undefined,\u0026lsquo;数据\u0026rsquo;),其中 数据 的传入格式是以JSON格式传入的，因为传入的 JSON 数据具有左右 padding,因而得名 JSONP 。 后端代码构造并调用了 xxx，浏览器接收到了响应，就会执行 xxx.call(undefined,\u0026lsquo;数据\u0026rsquo;),于是，请求方就知道了要的数据了。\nJSONP Usage //server.js const Koa = require(\u0026#39;koa\u0026#39;); const bodyParser = require(\u0026#39;koa-bodyparser\u0026#39;); const { getUser } = require(\u0026#39;./mock\u0026#39;); const app = new Koa(); app.use(bodyParser()); app.use(async (ctx, next) =\u0026gt; { const { path: curPath } = ctx.request; if (curPath === \u0026#39;/jsonp\u0026#39;) { // 设置响应头  ctx.set(\u0026#39;Content-Type\u0026#39;, \u0026#39;application/javascript;charset=utf-8\u0026#39;); ctx.set(\u0026#39;X-Content-Type-Options\u0026#39;, \u0026#39;nosniff\u0026#39;); const callback = ctx.query.callback; let data = getUser(ctx.query.type); data = JSON.stringify(data); ctx.body = `${callback}(${data})`; console.log(ctx.query); } }); console.log(\u0026#39;服务器已启动！\u0026#39;); app.listen(3001); // client.js const btn: HTMLElement = document.getElementById(\u0026#39;btn\u0026#39;); btn.addEventListener( \u0026#39;click\u0026#39;, () =\u0026gt; { let url = \u0026#39;http://127.0.0.1:3030/jsonp?type=all\u0026amp;callback=getdata\u0026#39;; loadScript(url); }, false ); function loadScript(src) { const script: HTMLScriptElement = document.createElement(\u0026#39;script\u0026#39;); script.src = src; script.onload = () =\u0026gt; { // 每次动态创建script标签之后,都将script标签删掉  document.body.removeChild(script); }; script.onerror = () =\u0026gt; { console.error(\u0026#39;请求失败了\u0026#39;); delete window[\u0026#39;getdata\u0026#39;]; document.body.removeChild(script); }; document.body.appendChild(script); } function getdata(data: any): void { // data 为服务端返回的数据  // to do something  alert(JSON.stringify(data)); } JSONP优缺点 优点：\n JSONP 可以跨源 兼容性更好  缺点：\n 只支持 GET 请求 jsonp 在调用失败的时候不会返回 HTTP 状态码 只支持跨域 HTTP 请求这种情况，不能解决不同域的两个页面之间如何进行 JavaScript 调用的问题。 安全性不佳：假如提供 jsonp 的服务存在页面注入漏洞，即它返回的 javascript 的内容被人控制的,那么所有调用这个 jsonp 的网站都会存在漏洞,这样的话危险就不止在一个域名下。  Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \nAsync Fragments: Rediscovering Progressive HTML Rendering with Marko\n","date":"2021-11-11T20:17:32+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-56/frontend-56-cover_hu143b0c39fffb81447a9d472d85d6e296_1446511_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-56/","title":"毎日のフロントエンド　56"},{"content":"第五十五日 HTML Question: HTML5 中新添加的表单属性有哪些  新的form属性1   autocomplete novalidate  新的input属性2  新类型：color，date，email，month，number，range，search，tel，time，week 新属性：autocomplate，autofocus，list，placeholder    CSS Question: 什么是视差滚动？如何实现视差滚动的效果 在同一视角下，鼠标或者页面滚动时，不同元素以不同的速率跟随滚动，产生生动的效果。\n如何实现视差滚动： 根据页面滚动高度的变化，JS 相应调整不同元素的不同位移，常见的插件有 Parallax.js | Simple Parallax Scrolling Effect with jQuery\nJavaScript Question: 写出执行结果，并解释原因 var a = 1; (function a() { a = 2; console.log(a); })();  立即执行的函数表达式(IIFE)的函数名称跟内部变量名称重名后，函数名称优先，因为函数名称是不可改变的，内部会静默失败，在严格模式下会报错\nvar a = 1; (function a() { \u0026#39;use strict\u0026#39;; a = 2; console.log(a); })(); // VM1059:4 Uncaught TypeError: Assignment to constant variable. // at a (\u0026lt;anonymous\u0026gt;:4:7) // at \u0026lt;anonymous\u0026gt;:6:3 Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n  \u0026lt;form\u0026gt;: The Form element - HTML: HyperText Markup Language | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \u0026lt;input\u0026gt;: The Input (Form Input) element - HTML: HyperText Markup Language | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-11-10T17:43:19+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-55/frontend-55-cover_hu67c9ad1ced82eae4afbbe173a2ebe537_3180563_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-55/","title":"毎日のフロントエンド　55"},{"content":"第五十四日 HTML Question: 了解 HTML5 的地理定位吗？怎么使用 Geolocation.getCurrentPosition() 方法用来获取设备当前位置\nnavigator.geolocation.getCurrentPosition(success, error, options); CSS Question: css3 的:nth-child 和:nth-of-type 的区别是什么？ :nth-child(n) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型。 :nth-of-type(n) 选择器匹配属于父元素的特定类型的第 N 个子元素。n 可以是数字、关键词或公式\nJavaScript Question: 写一个函数找出给定数组中的最大差值 function difference(arr) { return Math.max(...arr) - Math.min(...arr); } One more Question 写出执行结果，并解释原因\nfunction side(arr) { arr[0] = arr[2]; } function a(a, b, c = 3) { c = 10; side(arguments); return a + b + c; } a(1, 1, 1);  12\narguments 中 c 的值还是 1 不会变成 10。 c=1 赋值给了 a， 1+1+10， 10 为函数 a 中块级作用域内定义的c=10。\n因为 function a() 函数加了默认值，就按 ES 的方式解析，ES6 是有块级作用域的，c 的值不会改变\n function side(arr) { arr[0] = arr[2]; } function a(a, b, c) { // c没有默认值的情况，c=10  // 当非严格模式中的函数没有包含剩余参数、默认参数和解构赋值，那么arguments对象中的值会跟踪参数的值（反之亦然）  c = 10; console.log(arguments); side(arguments); return a + b + c; } a(1, 1, 1); // 21  argument 对象1\n  在严格模式下，剩余参数、默认参数和解构赋值参数的存在不会改变 arguments 对象的行为，但是在非严格模式下就有所不同了。\n Reference Geolocation.getCurrentPosition() - Web API 接口参考 | MDN\nhaizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n  Arguments 对象 - JavaScript | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-11-09T11:39:45+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-54/frontend-54-cover_hu4507f086d4f8c26b1105d9908976a66c_4915421_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-54/","title":"毎日のフロントエンド　54"},{"content":"第五十三日 HTML Question: web workers 能帮我们解决哪些问题 Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。\nWeb Worker 有以下几个使用注意点:\n  同源限制: 必须与主线程的脚本文件同源。\n  DOM 限制\n Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以 navigator 对象和 location 对象。    通信联系\n Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。    脚本限制\n Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。    文件限制\n Worker 线程无法读取本地文件，即不能打开本机的文件系统file://，它所加载的脚本，必须来自网络。    CSS Question: 怎么使用自定义字体？有什么注意事项 @font-face { font-family: \u0026#39;自定义字体名称\u0026#39;; src: url(\u0026#39;字体文件名.eot\u0026#39;); /* Modern Browsers url(\u0026#39;字体文件名.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;), / Safari, Android, iOS / url(\u0026#39;字体文件名.svg#字体文件名\u0026#39;) format(\u0026#39;svg\u0026#39;); / Legacy iOS */ font-style: normal; font-weight: normal; } JavaScript Question: document的 load 和 ready 有什么区别 Dom文档执行顺序：\n 解析 HTML 结构 加载外部脚本和样式表文件 解析并执行脚本代码 构建 html dom 模型 // ready 页面资源加载完成 加载图片等外部文件 页面加载完毕 // load dom加载完成  Reference Web Worker 使用教程 - 阮一峰的网络日志\n","date":"2021-11-08T19:38:24+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-53/frontend-53-cover_hu4c1ea721cfa3846928b5c5544e9117fc_528188_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-53/","title":"毎日のフロントエンド　53"},{"content":"第五十二日 HTML Question Form表单提交时为什么会刷新页面？怎么预防刷新 因为早期网页交互模型只能是浏览器提交数据给服务器，服务器做出响应重新返回一个页面，浏览器加载这个页面进行显示。早期前端没有编程式发送网络请求的 API，更没有前端路由管理的概念，所以表单提交跳转页面是广泛接受的方案。\n不想刷新可以使用 JS 拦截 form 的 onsubmit 事件，阻止掉浏览器的默认行为，然后用 ajax/fetch 和后台交互。另一个偏方是使用 iframe 作为 form 的 target，不过 JS 处理方面不如让浏览器别管自己全手动发请求来得简单。\nCSS Question 要是position跟display、overflow、float这些特性相互叠加后会怎么样 display、position 和 float 的相互关系 display 属性规定元素应该生成的框的类型。block inline\u0026hellip;\nposition 属性规定元素的定位类型。\n absolute表示生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位； fixed成绝对定位的元素，相对于浏览器窗口进行定位； relative生成相对定位的元素，相对于其正常位置进行定位； static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。  Float也是是一种布局方式，它定义元素在哪个方向浮动。在布局过程中也经常会使用它来达到左右并排布局的效果。\n position:absolute和position:fixed 优先级最高，有它存在的时候，浮动不起作用，display 的值也需要调整； 其次，元素的 float 特性的值不是 none 的时候或者它是根元素的时候，调整 display 的值； 最后，非根元素，并且非浮动元素，并且非绝对定位的元素，display 特性值等同设置值。   display 的值为 none: position 和 float 不起作用, 浮动和定位无效 position 的值是 absolute 或 fixed: 浮动失效，display 会被按规则重置 float 的值不是 none: 浮动并且 \u0026lsquo;display\u0026rsquo; 会被按照转换设置  JavaScript Question 什么是事件委托 Event Delegation is basically a pattern to handle events efficiently. Instead of adding an event listener to each and every similar element, we can add an event listener to a parent element and call an event on a particular target using the .target property of the event object.\nExample without event delegation:\nconst customUl = document.createElement(\u0026#39;ul\u0026#39;); for (var i = 1; i \u0026lt;= 10; i++) { const newElement = document.createElement(\u0026#39;li\u0026#39;); newElement.textContent = \u0026#39;This is line \u0026#39; + i; newElement.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { console.log(\u0026#39;Responding\u0026#39;); }); customUI.appendChild(newElement); } The above code will associate the function with every \u0026lt;li\u0026gt; element.\nImplementing the same functionalities with an alternate approach. In this approach, we will associate the same function with all event listeners. We are creating too many responding functions. We could extract this function and just reference the function too many functions:\nconst customUl = document.createElement(\u0026#39;ul\u0026#39;); function responding() { console.log(\u0026#39;Responding\u0026#39;); } for (var i = 1; i \u0026lt;= 10; i++) { const newElement = document.createElement(\u0026#39;li\u0026#39;); newElement.textContent = \u0026#39;This is line \u0026#39; + i; newElement.addEventListener(\u0026#39;click\u0026#39;, responding); customUI.appendChild(newElement); } In above approach, we still have too many event listners pointing to the same function.\nImplementing the same functionalities using a single function and single event:\nconst customUl = document.createElement(\u0026#39;ul\u0026#39;); function responding() { console.log(\u0026#39;Responding\u0026#39;); } for (var i = 1; i \u0026lt;= 10; i++) { const newElement = document.createElement(\u0026#39;li\u0026#39;); newElement.textContent = \u0026#39;This is line \u0026#39; + i; customUI.appendChild(newElement); } customUI.addEventListener(\u0026#39;click\u0026#39;, responding); Now there is a single event listener and a single responding function. In the above-shown method, we have improved the performance, but we have lost access to individual \u0026lt;li\u0026gt; elements so to resolve this issue, we will use a technique called event delegation.\nThe event object has a special property call .target which will help us in getting access to individual \u0026lt;li\u0026gt; elements with the help of phases.\nSteps:\n \u0026lt;ul\u0026gt; element is clicked. The event goes in the capturing phase. It reaches the target (\u0026lt;li\u0026gt; in our case). It switches to the bubbling phase. When it hits the \u0026lt;ul\u0026gt; element, it runs the event listener. Inside the listener function event.target is the element that was clicked. Event.target provides us access to the \u0026lt;li\u0026gt; element that was clicked.  The .nodeName property of the .target allows us to identify a specific node. If our parent element contains more than one child element then we can identify specific elements by using the .nodeName property.\nconst customUl = document.createElement(\u0026#39;ul\u0026#39;); function responding(evt) { if (evt.target.nodeName === \u0026#39;li\u0026#39;) console.log(\u0026#39;Responding\u0026#39;); } for (var i = 1; i \u0026lt;= 10; i++) { const newElement = document.createElement(\u0026#39;li\u0026#39;); newElement.textContent = \u0026#39;This is line \u0026#39; + i; customUI.appendChild(newElement); } customUI.addEventListener(\u0026#39;click\u0026#39;, responding);  当发生点击事件（或传播的任何其他事件）时：\n 事件从 window、document、根元素向下传播，并经过目标元素的祖先（捕获阶段）； 事件发生在目标（目标阶段）上； 最后，事件在目标祖先之间冒出气泡，直到根元素 document 和 window（冒泡阶段）。  该机制称为事件传播。\n事件委托是一种有用的模式，因为你可以只需要用一个事件处理程序就能侦听多个元素上的事件。\n使用事件委托需要三个步骤：\n 确定要监视事件的元素的父级元素 把将事件侦听器附加到父元素 用 event.target 选择目标元素  Reference position 跟 display、margin collapse、overflow、float 这些特性相互叠加后会怎么样？\nEvent Delegation in JavaScript - GeeksforGeeks\n浅析 JavaScript 中的事件委托 - SegmentFault 思否\n","date":"2021-11-07T10:47:11+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-52/frontend-52-cover_hu7ada2d7a71634d05b97ddf35971cff96_4596727_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-52/","title":"毎日のフロントエンド　52"},{"content":"第五十一日 JavaScript Question: 字符串相连有哪些方式？哪种最好？为什么？ var a = \u0026#39;aaaa\u0026#39;; var b = \u0026#39;bbbbb\u0026#39;; // 方法一： “+” var c = a + b; console.log(\u0026#39;c:\u0026#39;, c); // 方法二： “join(\u0026#34;\u0026#34;)” var d = []; d.push(a, b); console.log(\u0026#39;d:\u0026#39;, d.join(\u0026#39;\u0026#39;)); // 方法三：模版字符串 `${}` var e = `${a}${b}`; console.log(\u0026#39;e:\u0026#39;, e); Test Question: 说一下单元测试、E2E 测试？它们有什么区别？  Unit Test  单元测试是用来对一个模块， 一个函数或者一个类进行正确性校验的测试工作。 是从程序员的角度进行测试\nE2E Test  站在用户的角度进行测试。 不关心内部实现。\n区别。   Unit 测试是程序员写好逻辑后，很容易测试自己的实现， 是否符合预期。 E2E 是测试所有需求是不是都可以正确的实现。且代码重构之后，需求不变的情况下， 测试代码是无需改变的。  ","date":"2021-11-06T14:08:07+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-51/frontend-51-cover_huf9bebf57e38dee1401493ccccc38150e_4688895_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-51/","title":"毎日のフロントエンド　51"},{"content":"第五十日 CSS Question: 列举 CSS 优化、提高性能的方法 加载性能  压缩 CSS 尽量，通过link方式加载，而不是@import 复合属性其实分开写，执行效率更高，因为 CSS 最终也还是要去解析如 margin-left: left;  选择器性能  尽量少的使用嵌套，可以采用BEM1的方式来解决命名冲突 尽量少甚至是不使用标签选择器，这个性能实在是差，同样的还有*选择器 利用继承，减少代码量  渲染性能  慎重使用高性能属性：浮动、定位； 尽量减少页面重排、重绘； css 雪碧图 自定义 web 字体，尽量少用 尽量减少使用昂贵属性，如 box-shadow/border-radius/filter/透明度/:nth-child 等 使用 transform 来变换而不是宽高等会造成重绘的属性  JavaScript Question: 请写出一个函数求出 N 的阶乘（即 N!） const factorial = (n) =\u0026gt; { if (n \u0026gt; 1) return n * factorial(n - 1); return 1; }; One more question 写出执行结果，并解释原因\nvar min = Math.min(); max = Math.max(); console.log(min \u0026lt; max);  false MDN 相关文档  Math.min 的参数是 0 个或者多个，如果多个参数很容易理解，返回参数中最小的。如果没有参数，则返回 Infinity，无穷大。 Math.max 没有传递参数时返回的是-Infinity. 所以输出 false    Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n  BEM 101 | CSS-Tricks\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-11-05T11:24:58+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-50/frontend-50-cover_huf9bebf57e38dee1401493ccccc38150e_4688895_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-50/","title":"毎日のフロントエンド　50"},{"content":"5 Way to Append Item to Array in JavaScript Here are 5 ways to add an item to the end of an array.\npush splice length will mutate the orginal array.\nWhereas concat and spread will not and will instead return a new array.\nMutative - 3 ways to Append Item to Array push const zoo = [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;]; zoo.push(\u0026#39;🐧\u0026#39;); console.log(zoo); // [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;, \u0026#39;🐧\u0026#39;] Of course, you can push multiple items.\nconst zoo = [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;]; zoo.push(\u0026#39;🐧\u0026#39;, \u0026#39;🐦\u0026#39;, \u0026#39;🐤\u0026#39;); console.log(zoo); // [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;, \u0026#39;🐧\u0026#39;, \u0026#39;🐦\u0026#39;, \u0026#39;🐤\u0026#39;]  // or  const zoo = [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;]; const birds = [\u0026#39;🐧\u0026#39;, \u0026#39;🐦\u0026#39;, \u0026#39;🐤\u0026#39;]; zoo.push(...birds); console.log(zoo); // [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;, \u0026#39;🐧\u0026#39;, \u0026#39;🐦\u0026#39;, \u0026#39;🐤\u0026#39;] splice    Parameters Parameter Name Definition     1 startIndex The index where you want to add/remove item   2 deleteCount The number of items you want to remove   3 items The number you want to add (If you\u0026rsquo;re removing, you can just leave this blank)    const zoo = [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;]; zoo.splice( zoo.length, // We want add at the END of our array  0, // We do NOT want to remove any item  \u0026#39;🐧\u0026#39;, \u0026#39;🐦\u0026#39;, \u0026#39;🐤\u0026#39; // These are the items we want to add ); console.log(zoo); // [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;, \u0026#39;🐧\u0026#39;, \u0026#39;🐦\u0026#39;, \u0026#39;🐤\u0026#39;] length array.length returns us the total count of items in the array. That means the length us always one number higher than the last item of out index. So by assigning a value at the length index, it\u0026rsquo;s essentially adding an item to the end of the array.\nconst zoo = [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;]; const length = zoo.length; // 2  zoo[length] = \u0026#39;🐯\u0026#39;; console.log(zoo); // [\u0026#39;🦊\u0026#39;, \u0026#39;🐮\u0026#39;, \u0026#39;🐯\u0026#39;] Non Mutative - 2 ways to Append Item to Array The original array will remain untouched and a new array will contain the addition.\nconcat This method is meant to merge arrays. So we can use it to add multiple items by passing in an array.\nIt doesn\u0026rsquo;t just accept arrays as its parameter, it also acceptes value.\nconst ocean = [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;]; const aquarium = ocean.concat(\u0026#39;🐡\u0026#39;); // Add a single value const sushi = ocean.concat(\u0026#39;🐡\u0026#39;, \u0026#39;🍚\u0026#39;); // Add multiple values  aquarium; // [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;, \u0026#39;🐡\u0026#39;] sushi; // [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;, \u0026#39;🐡\u0026#39;, \u0026#39;🍚\u0026#39;]  // Original Array Not Affected ocean; // [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;] spread We can uyse the spread syntax to expand each array element into individual elements. A very popular application is to use spread to crate a copy or merge two separetate arrays. This is similar to the effects of concat\nconst ocean = [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;]; const fish = [\u0026#39;🐠\u0026#39;, \u0026#39;🐟\u0026#39;]; const aquarium = [...ocean, ...fish]; aquarium; // [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;, \u0026#39;🐠\u0026#39;, \u0026#39;🐟\u0026#39;]  // Original Array Not Affected ocean; // [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;] if we don\u0026rsquo;t use spread, we will get this: a nested array\nconst ocean = [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;]; const fish = [\u0026#39;🐠\u0026#39;, \u0026#39;🐟\u0026#39;]; const aquarium = [ocean, fish]; // [ [\u0026#39;🐙\u0026#39;, \u0026#39;🦀\u0026#39;], [\u0026#39;🐠\u0026#39;, \u0026#39;🐟\u0026#39;] ] To Mutate or NOT IT Really depends on your use case. When you\u0026rsquo;re working in Redux or any state management architecture, then it\u0026rsquo;s all about the immutability. So the non-mutatve methods will be the right choices.\nAlso the idea of immutability is often preferred as it\u0026rsquo;s considered a good practice to avoid side effects \u0026ndash; which is the foundation of functional programming and producing pure functions.\nReference 5 Way to Append Item to Array in JavaScript | SamanthaMing.com\n","date":"2021-11-04T16:52:18+09:00","image":"https://youkoucoding.github.io/p/append-item-to-array-in-javascript/append-item-array-cover_hu010db2d0b906fa0210d301729f6c3d38_1663282_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/append-item-to-array-in-javascript/","title":"Append Item to Array in JavaScript"},{"content":"第四十九日 HTML Question: 说说对target=\u0026quot;_blank\u0026quot;的理解？有啥安全性问题？如何防范 恶意攻击问题\n如果网站上有一个使用了 target=\u0026quot;_blank\u0026quot; 的 a 标签链接，一旦用户点击了这个链接打开了新的标签页，如果这个标签页跳转的网站内存在的恶意代码，那么你原本页面的网站可能会被转到一个假的页面。也就是说，当用户回到原本的页面时，看到的可能就是已经被替换过的钓鱼页面了。\n防范\n在 \u0026lt;iframe\u0026gt; 中有一个 sandbox 属性，可以使用以下的一些方法来预防链接:\n Referrer Policy 和 noreferrer  \u0026lt;a href=\u0026#34;https://an.evil.site\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noreferrer\u0026#34;\u0026gt; Enter an \u0026#34;evil\u0026#34; website \u0026lt;/a\u0026gt; noopener  \u0026lt;a href=\u0026#34;https://an.evil.site\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;\u0026gt; Enter an \u0026#34;evil\u0026#34; website \u0026lt;/a\u0026gt; 3 nofollow\nnofollow 是 HTML 页面中 a 标签的属性值。这个标签的意义是告诉搜索引擎\u0026quot;不要追踪此网页上的链接或不要追踪此特定链接\u0026quot;\nJavaScript Question: 写个还剩下多少天过年的倒计时 const day = Math.floor( (new Date(\u0026#39;2019-12-31 23:59:59:999\u0026#39;) - new Date()) / 864e5 ); // 210  1000*60*60*24 or 86400000 or 864e5\n 864e5 is a valid Javascript number that represents the number of miliseconds in 24 hours day.\nOne more question Question: redux-saga 和 mobx 的比较 状态管理 redux-sage 是 redux 的一个异步处理的中间件 mobx 是数据管理库，和 redux 一样\n设计思想 redux-sage 属于 flux 体系， 函数式编程思想 mobx 不属于 flux 体系，面向对象编程和响应式编程\n主要特点   redux-sage 因为是中间件，更关注异步处理的，通过 Generator 函数来将异步变为同步，使代码可读性高，结构清晰。action 也不是 action creator 而是 pure action，\n  在 Generator 函数中通过 call 或者 put 方法直接声明式调用，并自带一些方法，如 takeEvery，takeLast，race 等，控制多个异步操作，让多个异步更简单。\n  mobx 是更简单更方便更灵活的处理数据。 Store 是包含了 state 和 action。state 包装成一个可被观察的对象， action 可以直接修改 state，之后通过 Computed values 将依赖 state 的计算属性更新 ，之后触发 Reactions 响应依赖 state 的变更，输出相应的副作用 ，但不生成新的 state\n  数据可变性  redux-sage 强调 state 不可变，不能直接操作 state，通过 action 和 reducer 在原来的 state 的基础上返回一个新的 state 达到改变 state 的目的。 mobx 直接在方法中更改 state，同时所有使用的 state 都发生变化，不生成新的 state。  写法难易度  redux-sage 比 redux 在 action 和 reducer 上要简单一些。需要用 dispatch 触发 state 的改变，需要 mapStateToProps 订阅 state。 mobx 在非严格模式下不用 action 和 reducer，在严格模式下需要在 action 中修改 state，并且自动触发相关依赖的更新。  使用场景  redux-sage 很好的解决了 redux 关于异步处理时的复杂度和代码冗余的问题，数据流向比较好追踪。但是 redux 的学习成本比 较高，代码比较冗余，不是特别需要状态管理，最好用别的方式代替。 mobx 学习成本低，能快速上手，代码比较简洁。但是可能因为代码编写的原因和数据更新时相对黑盒，导致数据流向不利于追踪。  Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n隐藏危险: target = \u0026ldquo;_blank\u0026rdquo; 和 \u0026ldquo;opener\u0026rdquo; - 知乎\n","date":"2021-11-04T13:26:16+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-49/frontend-49-cover_huf85f6763ad22d7115d9deb6f5e8b1b11_5837531_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-49/","title":"毎日のフロントエンド　49"},{"content":"第四十八日 HTML Question: 对 WEB 标准和 W3C 的理解与认识 web 标准简单来说可以分为结构、样式和行为。HTML标签构成页面的结构框架。css完成美化html标签构成的页面。js可以完成页面和用户的交互。\nW3C对web标准提出了规范化的要求，也就是在实际编程中的一些代码规范：包含如下几点\n  对于结构要求：（标签规范可以提高搜索引擎对页面的抓取效率，对 SEO 很有帮助）\n 标签字母要小写 标签要闭合 标签不允许随意嵌套    对于 css 和 js 来说\n 尽量使用外链 css 样式表和 js 脚本。是结构、表现和行为分为三块，符合规范。同时提高页面渲染速度，提高用户的体验。 样式尽量少用行间样式表，使结构与表现分离，标签的 id 和 class 等属性命名要做到见文知义，标签越少，加载越快，用户体验提高，代码维护简单，便于改版 不需要变动页面内容，便可提供打印版本而不需要复制内容，提高网站易用性。    CSS Question: 全屏滚动的原理是什么吗？它用到了 CSS 的哪些属性  html  \u0026lt;div class=\u0026#34;page-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;page-item\u0026#34;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;page-item\u0026#34;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;page-item\u0026#34;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; css  html, body设置 overflow: hidden, 让视图中只包括一个分页; 设置滑动分页的长宽都是 100%; 外部容器设置 transition 过渡效果, 并设置为相对定位, 滚动是修改外部容器的 Top 值, 实现滚动效果\nhtml, body { padding: 0; margin: 0; overflow: hidden; } .page-container { position: relative; top: 0; transition: all 1000ms ease; touch-action: none; } .page-item { display: flex; justify-content: center; align-items: center; width: 100%; height: 100%; border: 1px solid #ddd; } JavaScript   初始化,容器高度设置为窗口高度  var container = document.querySelector(\u0026#39;.page-container\u0026#39;); // 获取根元素高度, 页面可视高度 var viewHeight = document.documentElement.clientHeight; // 获取滚动的页数 var pageNum = document.querySelectorAll(\u0026#39;.page-item\u0026#39;).length; // 初始化当前位置, 距离原始顶部距离 var currentPosition = 0; // 设置页面高度 container.style.height = viewHeight + \u0026#39;px\u0026#39;;  初始化滚动事件  向下滚动时, 当 currentPosition 比 整体分页高度 大的时候(绝对值相比小的时候), 向下滚动; 向上滚动时, 当 currentPosition 大于 0 的时候, 向上滚动.\n// 向下滚动页面 function goDown() { if (currentPosition \u0026gt; -viewHeight * (pageNum - 1)) { currentPosition = currentPosition - viewHeight; container.style.top = currentPosition + \u0026#39;px\u0026#39;; } } // 向上滚动页面 function goUp() { if (currentPosition \u0026lt; 0) { currentPosition = currentPosition + viewHeight; container.style.top = currentPosition + \u0026#39;px\u0026#39;; } }  节流函数: 即在规定时间内只会触发一次指定方法, 用于滚动时防止多次触发  function throttle(fn, delay) { let baseTime = 0; return function () { const currentTime = Date.now(); if (baseTime + delay \u0026lt; currentTime) { fn.apply(this, arguments); baseTime = currentTime; } }; }  监听鼠标滚动  滚动事件 firefox 与其他浏览器的事件不同, 所以需要进行判断. deltaY大于 0 的时候, 想下滚动; 反之, 向上滚动.\nvar handlerWheel = throttle(scrollMove, 1000); // https://developer.mozilla.org/en-US/docs/Web/API/Element/mousewheel_event#The_detail_property // firefox的页面滚动事件其他浏览器不一样 if (navigator.userAgent.toLowerCase().indexOf(\u0026#39;firefox\u0026#39;) === -1) { document.addEventListener(\u0026#39;mousewheel\u0026#39;, handlerWheel); } else { document.addEventListener(\u0026#39;DOMMouseScroll\u0026#39;, handlerWheel); } function scrollMove(e) { if (e.deltaY \u0026gt; 0) { goDown(); } else { goUp(); } }  监听移动端 touch 操作  当 touch 的最终位置大于起始位置时, 则页面向上滚动; 反之, 向下滚动.\nvar touchStartY = 0; document.addEventListener(\u0026#39;touchstart\u0026#39;, (event) =\u0026gt; { touchStartY = event.touches[0].pageY; }); var handleTouchEnd = throttle(touchEnd, 500); document.addEventListener(\u0026#39;touchend\u0026#39;, handleTouchEnd); function touchEnd(e) { var touchEndY = e.changedTouches[0].pageY; if (touchEndY - touchStartY \u0026lt; 0) { // 向上滑动, 页面向下滚动  goDown(); } else { goUp(); } } JavaScript Question: 对事件循环有了解吗 单线程模型 JS 引擎有多个线程，但引擎同时只执行一个任务，其他任务都必须在后面排队，即引擎只在一个线程上运行。这个线程称为主线程。\n事件循环机制 JS 本身并不慢，慢的是读写外部数据，比如等待 Ajax 请求返回结果。如果等着 Ajax 返回结果出来，再往下执行，就会耗费很长的时间。所以 JS 设计了一种机制，CPU 可以不管 IO 操作，而是挂起该任务，先执行后面的任务，等到 IO 操作返回了结果，再继续执行挂起的任务。\n同步任务执行完后，引擎一遍又一遍检查那些挂起来的异步任务是否满足进入主线程的条件。这种循环检查的机制，就叫做事件循环机制。\n任务队列 JS 引擎运行时，除了一个正在运行的主线程，还提供一个或多个任务队列，里面是各种被挂起的异步任务。首先，主线程会去执行所有的同步任务，等到同步任务全部执行完，就会去看任务队列里面的异步任务，如果满足条件，那么异步任务就重新进入主线程开始执行，这时它就会变成同步任务。等到执行完，下一个异步任务再进入主线程开始执行。一旦任务队列清空，程序就结束执行。\n同步任务和异步任务 程序里面所有的任务可以分成两类：\n同步任务：没有被引擎挂起，在主线程上排队执行的任务。只有前一个任务执行完毕，才能执行后一个任务。 异步任务：被引擎挂起，不进入主线程，而进入任务队列的任务。只有引擎认为某个异步任务可以执行了，该任务才会进入主线程执行。排在异步任务后面的代码，不用等待异步任务结束会马上运行。\nReference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\n","date":"2021-11-03T15:29:08+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-48/frontend-48-cover_huee392f8af400356f6133da49ffc9f64d_1815593_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-48/","title":"毎日のフロントエンド　48"},{"content":"第四十七日 HTML Question: HTML5 如何使用音频和视频 \u0026lt;video\u0026gt;1\n\u0026lt;audio\u0026gt;2\nCSS Question: 怎样抽离样式模块的 通用的和业务相关的分离出来，通用的做成样式模块儿共享，业务相关的，放进业务相关的库里面做成对应功能的模块儿。3\nJavaScript Question: 请说说对事件冒泡机制的理解  event-flow \n按照 W3C 事件模型，事件流按照次序依次为捕获阶段， 目标阶段，冒泡阶段。如果事件绑定时候，禁止了冒泡，则事件流会停止在目标阶段。\n先说两个有关 DOM 事件流的概念事件冒泡和事件捕获。\n 事件冒泡： 事件沿着 DOM 树向上通知 事件捕获：和事件冒泡相反，事件沿着 DOM 数向下通知  开发者可以自己决定事件处理注册到捕获阶段，或者是冒泡阶段。 element1.addEventListener('click',doSomething2,true) 如果最后一个参数为 true，则注册到捕获阶段。\nQuestion: React 事件绑定原理4 React 并不是将 click 事件绑在该 div 的真实 DOM 上，而是在 document 处监听所有支持的事件，当事件发生并冒泡至 document 处时，React 将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。 另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 event.preventDefault。\n react-event \nReference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n  \u0026lt;video\u0026gt; - HTML（超文本标记语言） | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \u0026lt;audio\u0026gt; - HTML（超文本标记语言） | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 分类方法 - CSS 规范 - 规范 - NEC : 更好的 CSS 样式解决方案\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n React 事件绑定原理 · Issue #23 · lgwebdream/FE-Interview\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-11-02T10:34:36+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-47/frontend-47-cover_huee392f8af400356f6133da49ffc9f64d_1815593_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-47/","title":"毎日のフロントエンド　47"},{"content":"第四十六日 CSS Question: 对媒体查询的理解 CSS3中的媒体查询  width – 输出设备渲染区域（如可视区域的宽度或打印机纸盒的宽度）的宽度 height – 输出设备渲染区域（如可视区域的高度或打印机纸盒的高度）的高度 device-width – 输出设备的宽度（整个屏幕或页的高度，而不是仅是渲染区域） device-height – 输出设备的高度（整个屏幕或页的高度，而不是仅是渲染区域） orientation – 设备处于横屏（宽度大于高度）模式还是竖屏（高度大于宽度）模式 aspect-ratio – 输出设备目标显示区域的宽高比 device-aspect-ratio – 输出设备的宽高比 resolution – 输出设备的分辨率（像素密度） color – 检查设备支持多少种颜色等 color-index – 输出设备中颜色查询表中的条目数量 monochrome – 指定了一个黑白（灰度）设备每个像素的比特数 scan – 检查电视输出设备是顺序扫描还是隔行扫描 grid – 判断输出设备是网格设备还是位图设备  基本语法 媒体查询最基本的形式，就是单独或组合使用媒体类型和媒体特性(后者要置于括号中)，如：\n@media screen { body { font-size: 20px; } } @media screen, print { body { font-size: 20px; } } @media (width: 30em) { nav li { display: block; } } @media screen and (width: 30em) { nav li { display: block; } } 嵌套 /*例子1:媒体类型套媒体特性*/ @media screen { @media (min-width: 20em) { img { display: block; width: 100%; height: auto; } } @media (min-width: 40em) { img { display: inline-block; max-width: 300px; } } } /*例子2:媒体特性多层嵌套*/ @media (hover: on-demand) { @media (pointer: coarse) { input[type=checkbox] ~ label { padding: .5em; } } @media (pointer: fine) { input[type=checkbox] ~ label { padding: .1em; } } } 否定式查询 可以用关键字not表示一个否定查询； not必须置于查询的一开头并会对整条查询串生效，除非逗号分割的多条\n@media not print { body { background: url(\u0026#39;paisley.png\u0026#39;); } } /*否定`print and (min-resolution: 1.5dppx)`这一整个条件*/ @media not print and (min-resolution: 1.5dppx) { .external { background: url(\u0026#39;arrow-lowres.png\u0026#39;); } } /* not A 或 not B */ @media not (hover: hover), not (pointer: coarse) { font-size: 20px; } 根据媒体特性的范围查询 指定一个固定的宽度通常是没有意义的，更多的情况下，我们需要限定的是类似“小于等于”或“大于等于”这样的范围，而大多数媒体特性可以通过添加max-和min-前缀达到上述目的\n/*0 至 30em*/ @media (max-width: 30em) { nav li { display: block; } } /*30em 至 100em*/ @media (min-width: 30em) and (max-width: 100em) { nav li { display: block; } } 媒体查询不仅是为了适应终端尺寸的， 比如：打印的时候是不需要打印一些只需要体现在网页上的元素, media query都可以解决。\n@media print { .site-footer-credits { display: none; } .noprint { display: none; } .page-header { text-align: left; } } JavaScript Question: 写一个使两个整数进行交换的方法（不能使用临时变量） 利用执行顺序\na = a + b; b = a - b; a = a - b; 异或取值\na ^= b; b ^= a; a ^= b;  let a = 1, b = 2; [a, b] = [b, a]; Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n使用媒体查询 - CSS（层叠样式表） | MDN\n全面理解 CSS 媒体查询 - 掘金\n","date":"2021-11-01T15:01:13+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-46/frontend-46-cover_hub658970c4a8c56564578238029a5a6aa_1150640_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-46/","title":"毎日のフロントエンド　46"},{"content":"第四十五日 HTML Question: xml与html有什么区别  html不区分大小写，xml区分大小写 html可以没有闭合标签，xml必须有闭合标签 html可以拥有不带值的属性名，xml中所有的属性必须带值 html是用于显示数据，xml主要用于描述，存放数据  CSS Question: 等高布局有多少种  flex拉伸  display: flex; align-items: stretch; padding margin抵消 然后background-clip默认是border-box所以会在被抵消的位置依然显示背景 造成等高假象  .box, .box2 { float: left; width: 100px; } .box { background: #cccccc; height: 300px; } .box2 { background: #306eff; padding-bottom: 99999px; margin-bottom: -99999px; } JavaScript Question: 写出几种创建对象的方式，区别是什么 new Object() var obj = new Object(); var obj = {}; // 等价 工厂模式 优点是 可以解决创建多个相似对象的问题，缺点是 无法识别对象的类型\nfunction createObj(name, age) { var obj = {}; obj.name = name; obj.age = age; return obj; } var Anson = createObj(\u0026#39;Anson\u0026#39;, 18); console.log(Anson); //{name: \u0026#34;Anson\u0026#34;, age: 18} 构造函数 优点是 可以创建特定类型的对象，缺点是 多个实例重复创建方法\nfunction Person(name, age) { this.name = name; this.age = age; this.sayName = function () { alert(this.name); }; } var person = new Person(\u0026#39;小明\u0026#39;, 13); console.log(person); //Person {name: \u0026#34;小明\u0026#34;, age: 13, sayName: ƒ} Object.create() 传入一个原型对象，创建一个新对象，使用现有的对象来提供新创建的对象的__proto__，实现继承\nconst person = { isHuman: false, printIntroduction: function () { console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`); }, }; const me = Object.create(person); me.name = \u0026#39;Matthew\u0026#39;; // \u0026#34;name\u0026#34; is a property set on \u0026#34;me\u0026#34;, but not on \u0026#34;person\u0026#34; me.isHuman = true; // inherited properties can be overwritten  me.printIntroduction(); // expected output: \u0026#34;My name is Matthew. Am I human? true\u0026#34; 动态原型 优点 可以判断某个方法是否有效，来决定是否需要初始化原型，if 只会在仅在碰到第一个实例调用方法 时会执行，此后所有实例共享此方法，需要注意的是，不能重新原型对象。\nfunction Person(name, age) { this.name = name; this.age = age; if (typeof this.sayName != \u0026#39;function\u0026#39;) { Person.prototype.sayName = function () { alert(this.name); }; } } var person = new Person(\u0026#39;小红\u0026#39;, 15); console.log(person); //Person {name: \u0026#34;小红\u0026#34;, age: 15} 动态创建sayName: ƒ () Question: 整数一组，请把他们分成三份数组，确保每一份的 和 尽量相等 11，42，23，4，5，6 4 5 6 11 23 42 56 78 90\n/** * @param array 原始数组 * @param count 要分成的份数 **/ const func = (array, count) =\u0026gt; { // 将原始数组排序， 从大到小  array.sort((a, b) =\u0026gt; b - a); // 每一个大组的 平均值  let avg = array.reduce((a, b) =\u0026gt; a + b) / count; //从大到小求和，取最接近平均值的一组，放入 一个 二维数组  let res_arr = []; let current = 0; for (let i = 0; i \u0026lt; count - 1; i++) { // \u0026#34;\u0026amp;\u0026amp; i\u0026#34; 跳过第一轮循环。  // 判断第一轮循环结束后，current 加上 array 最后一个元素（最小的一个数）的一半， 是否比每组的 和 小  // 注意： 因为 下文的 forEach 循环，回遍历的最后一个元素，说明最后一个元素加current 会大于 avg， 因此取最后一个元素的一半相加进行判断  // 如果小，则： 将倒数第二个元素（如果存在的话） push 进入 结果二维数组的 上一个循环产生结果（数组元素）中。  // 因为，为了确保分组的和尽量相等，（若加上最后一个元素，已经超过avg） ??????  if (current + array[array.length - 1] / 2 \u0026lt; avg \u0026amp;\u0026amp; i) { array.pop(); // i \u0026gt;= 1  // todo: ???  res_arr[i - 1].push(array[array.length - 1]); } // 将上一轮 current 重新归零  current = 0; res_arr[i] = []; // 遍历原始数组，1.从头到尾，对每个元素求和。 2. 删除 已经加过的元素 3. 将各个元素，push至，res_arr第i个数组元素。  // note: 第二个参数是index  array.forEach((item, index) =\u0026gt; { current += item; array.splice(index, 1); res_arr[i].push(item); // 遍历想加的过程中，如果 和 大于 平均值avg，（说明，一个分组以完成，且多加了一个元素），  // 从res_arr[i]删除多加的元素。当然原始数组中还需要把多删除的元素，加回去（并且是数组首位）。  if (current \u0026gt; avg) { current -= item; array.splice(index, 0, item); res_arr[i].pop(); } }); } // 因为，以上主循环结束点是 count-1，所以，array中的剩余元素就是： 分组的最后一组（减少一轮计算，提高性能）。  // 将剩余的数组，作为res_arr的最后一个元素， push  res_arr[count - 1] = array; return res_arr; }; //test console.log(func([11, 42, 23, 4, 5, 6, 4, 5, 6, 11, 23, 42, 56, 78, 90], 3));  function getSum(arr) { return arr.reduce((a, b) =\u0026gt; a + b, 0); } function getMinArrIndex(arrs) { let minArrIndex = 0; arrs.forEach((arr, index) =\u0026gt; { if (getSum(arrs[minArrIndex]) \u0026gt; getSum(arrs[index])) { minArrIndex = index; } }); return minArrIndex; } function getAlmostEqual(arr, part) { let orderedArr = arr.sort((a, b) =\u0026gt; b - a); let res = Array(part) .fill(void 0) .map(() =\u0026gt; []); orderedArr.forEach((value) =\u0026gt; { let minArrIndex = getMinArrIndex(res); res[minArrIndex].push(value); }); return res; } getAlmostEqual([11, 42, 23, 4, 5, 6, 4, 5, 6, 11, 23, 42, 56, 78, 90], 3); Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n","date":"2021-10-31T10:35:03+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-45/frontend-45-cover_hub658970c4a8c56564578238029a5a6aa_1150640_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-45/","title":"毎日のフロントエンド　45"},{"content":"第四十四日 HTML Question: ｀ video` 标签中预加载视频用到的属性是什么 preload\n   属性 值 描述     autoplay autoplay 如果出现该属性，则视频在就绪后马上播放   controls controls 如果出现该属性，则向用户显示控件，比如播放按钮   height pixels 设置视频播放器的高度   loop loop 如果出现该属性，则当媒介文件完成播放后再次开始播放   preload preload 如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 \u0026ldquo;autoplay\u0026rdquo;，则忽略该属性   src url 要播放的视频的 URL   width pixels 设置视频播放器的宽度    CSS Question: 写一个满屏品字布局的方案  标准流  \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;top\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;bottom\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;/body\u0026gt; .top { width:50%; marign:auto; } .bottom { font-size:0; } .bottom div { display:inline-block width:50%; }  浮动布局  \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;top\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;bottom\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;/body\u0026gt; .top { width: 50%; height: 50%; marign: auto; } .bottom { height: 50%; overflow: hidden; } .bottom div { float: left; width: 50%; }  flex布局  \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;top\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;bottom\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;/body\u0026gt; .top { width: 50%; height: 50%; marign: auto; } .bottom { display: flex; height: 50%; } .bottom div { flex: 1; height: 100%; }  grid布局  \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;top\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;div\u0026gt; \u0026lt;/body\u0026gt; .body { display: grid; grid-template-columns: repeat(4, 1fr); grid-template-rows: repeat(2, 1fr); } .top { grid-column-start: 1; grid-column-end: 3; } JavaScript Question: 深度克隆对象的方法有哪些 深拷贝和浅拷贝只针对像Object和Array这样的复杂对象的\n JSON.stringify  JSON.parse(JSON.stringfy(X))，其中X只能是Number, String, Boolean, Array, 扁平对象，即那些能够被 JSON 直接表示的数据结构。\n   JSON.stringify 有一定的局限:\n date: [new Date(1536627600000), new Date(1540047600000)], date: new RegExp('\\\\w+'), date: function func() { console.log('fff') } object里有NaN、Infinity和-Infinity，则序列化的结果会变成null JSON.stringify() 只能序列化对象的可枚举的自有属性，例如 如果 obj 中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的 constructor 对象中存在循环引用的情况也无法正确实现深拷贝  let obj = { name: \u0026#39;liming\u0026#39;, age: 12, parents: { mother: { name: \u0026#39;zhanglan\u0026#39;, age: 34 }, father: { name: \u0026#39;lifeng\u0026#39;, age: 35 }, }, score: [1, 2, 3, 4, 5, 6], say: function () { console.log(\u0026#39;my name is \u0026#39; + this.name); }, null: null, undefined: undefined, }; console.log(JSON.parse(JSON.stringify(obj)));  深度递归  function deepClone(value) { if (Object.prototype.toString.call(value) === \u0026#39;[object Object]\u0026#39;) { //对象  let returnObj = {}; for (let key in value) { returnObj[key] = deepClone(value[key]); } return returnObj; } else if (Object.prototype.toString.call(value) === \u0026#39;[object Array]\u0026#39;) { //数组, 需要特殊处理  let returnArr = []; for (i = 0, len = value.length; i \u0026lt; len; i++) { returnArr.push(deepClone(value[i])); } return returnArr; } return value; } Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n","date":"2021-10-30T20:55:46+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-44/frontend-44-cover_huc6e905b6a2b48aceec4d5bdac449ba5b_2387857_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-44/","title":"毎日のフロントエンド　44"},{"content":"第四十三日 HTML Question: 如何让元素固定在页面底部？有哪些比较好的实践 \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;!-- 页面主体内容区域 --\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt;\u0026lt;!-- 需要做到 Sticky Footer 效果的页脚 --\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 方案一：absolute\n/* content 的 padding-bottom 需要与 footer 的 height 一致 */ html, body { height: 100%; } .wrapper { position: relative; min-height: 100%; padding-bottom: 50px; box-sizing: border-box; } .footer { position: absolute; bottom: 0; height: 50px; } 方案二：calc\n.content { min-height: calc(100vh - 50px); } .footer { height: 50px; } 方案三：table\nhtml, body { height: 100%; } .wrapper { display: table; width: 100%; min-height: 100%; } .content { display: table-row; height: 100%; } 方案四：Flexbox\nhtml { height: 100%; } body { min-height: 100%; display: flex; flex-direction: column; } .content { flex: 1; } 方案五：grid\nhtml { height: 100%; } body { min-height: 100%; display: grid; grid-template-rows: 1fr auto; } .footer { grid-row-start: 2; grid-row-end: 3; } CSS Question: span 与 span 之间有看不见的空白间隔是什么原因引起的？有什么解决办法 产生空白的原因： 元素被当成行内元素排版的时候，元素之间的空白符（空格、回车换行等）都会被浏览器转换成一个空白字符，这个字符的大小受font-size影响\nsolution:\n 去掉换行，将 span 写成一行 \u0026lt;span\u0026gt;hello\u0026lt;/span\u0026gt;\u0026lt;span\u0026gt;world\u0026lt;/span\u0026gt; 父元素使用 flex 布局：.wrap {display: flex; flex-direction: row;} 父元素设置 font-size: 0; span 子元素再设置字体大小 font-size: 16px; span 子元素设置 float: left  JavaScript Question: 能不能简单概括一下jQuery 的实现原理 (function (window, undefined, document) { function jQuery(prop) { return new jQuery.prototype.init(); } jQuery.prototype = { contructor: jQuery, init: function (prop) {}, // ...  }; jQuery.prototype.init.prototype = jQuery.prototype; window[\u0026#39;jQuery\u0026#39;] = window[\u0026#39;$\u0026#39;] = new jQuery(); })(window, undefined, document); jQuery 是通过封装浏览器原生的 DOM API 实现 dom 元素的选取，然后封装到 jQuery 对象中去，同时根据浏览器检测对不同浏览器操作不同的 APi .jQuery 对象上高度集成了API。当然 jQuery 还有做的更多比如，可以 new jQuery('div'),也可以直接$('div'),这个巧妙地运算就是上面init方法；如果页面已经有$时，jQuery 会先将$接管把之前$的全局名保存下来\nReference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \nJELLY | Sticky Footer，完美的绝对底部\nSticky Footer, Five Ways | CSS-Tricks\n","date":"2021-10-29T10:43:39+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-43/frontend-43-cover_hu848b744b5f7a7a4725cf111cfb5199df_2021980_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-43/","title":"毎日のフロントエンド　43"},{"content":"第四十二日 HTML Question: 解释下什么是ISISO8859-2字符集 ISO/IEC 8859-1，又称 Latin-1 或“西欧语言”，ISO/IEC 8859-2 Latin-2或“中欧语言”，是国际标准化组织内 ISO/IEC 8859 的 8 位字符集。它以 ASCII 为基础，在空置的 0xA0-0xFF 的范围内，加入 192 个字母及符号，藉以供使用变音符号的拉丁字母语言使用。\nCSS Question: 重置（初始化）css 的作用是什么 统一各个浏览器自带的默认样式, 保证各个浏览器尽量统一样式\nJavaScript Question: window 对象和 document 对象有什么区别 window对象 代表浏览器中的一个打开的窗口或者框架，window对象会在或者每次出现时被自动创建，在客户端JavaScript中，Window对象是全局对象global(node)，所有的表达式都在当前的环境中计算，要引用当前的窗口不需要特殊的语法，可以把那个窗口属性作为全局变量使用，例如：可以只写document，而不必写window.document。同样可以把窗口的对象方法当做函数来使用，如：只写 alert()，而不必写 window.alert. window对象实现了核心 JavaScript 所定义的全局属性和方法。\ndocument对象 代表整个HTML文档，可以用来访问页面中的所有元素。 每一个载入浏览器的 HTML 文档都会成为 document 对象。document 对象使我们可以使用脚本(js)中对 HTML 页面中的所有元素进行访问。document 对象是 window 对象的一部分可以通过 window.document 属性对其进行访问 HTMLDocument 接口进行了扩展，定义 HTML 专用的属性和方法，很多属性和方法都是 HTMLCollection 对象，其中保存了对锚、表单、链接以及其他可脚本元素的引用。\n document是文档对象，以html形式展示。是window对象里面的 一部分  Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n","date":"2021-10-28T11:47:15+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-42/frontend-42-cover_hua32e1630b7df330effbe4a1d2547e7cd_1291070_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-42/","title":"毎日のフロントエンド　42"},{"content":"第四十一日 HTML JavaScript webSocket 怎么兼容处理 WebSocket是一种在服务器与客户端双向通讯的技术，使用原生的WebSocket可以最小化 服务器资源的使用并且为两者提供了一种统一的通信方式。随着 HTML5 的普及，现代浏览器（IE10+）基本上都已经原生支持WebSocket\n SockJS Socket.IO  Socket.IO 能够启用基于事件的双向通信，使用它同样也需要搭建相应的服务端；首先它也会首选 WebSocket，如果不支持则会使用下面的替代方案：\n Adobe Flash Socket（缺点：需要在服务器上打开一个额外的端口，默认为 10843） Ajax long polling Ajax multipart streaming Forever iframe JSONP polling  CSS JavaScript 怎么让英文单词的首字母大写 /* Keyword values */ text-transform: capitalize; /*强制每个单词的首字母转换为大写*/ text-transform: uppercase; /*强制所有字符被转换为大写*/ text-transform: lowercase; text-transform: none; /*阻止所有字符的大小写被转换*/ text-transform: full-width; /*强制字符 — 主要是表意字符和拉丁文字 — 书写进一个方形里，并允许它们按照一般的东亚文字（比如中文或日文）对齐*/  .demo::first-letter { text-transform: uppercase; } JavaScript JavaScript 说说对 IIFE 的理解 IIFE：立即调用函数表达式，在一些常见的框架中，会使用立即执行函数形成一个独立作用域，在这个函数通常会写一些依赖环境之类的东西；立即执行函数中，写完其中的变量不会被销毁，形成闭包\n在立即执行函数中，如果想要访问全局中的变量，直接行参引入 window 即可\n(function(){})(); (function(){}());\n(function () { statements; })();  包围在()里的一个匿名函数，拥有独立的词法作用域 再次使用()创建了一个立即执行函数表达式，到此直接执行函数  Reference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nWebSocket 教程 - 阮一峰的网络日志\n","date":"2021-10-27T14:51:33+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-41/frontend-41-cover_hu525553c2cb9d13bd725600d6caadba7f_2217610_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-41/","title":"毎日のフロントエンド　41"},{"content":"第四十日 HTML Question: html5 都有哪些新的特性？移除了哪些元素 新增特性:\n canvas svg video drag \u0026amp; drop localStorage/sessionStorage 语义化标签: header/nav/section/article/footer input 类型: date/datetime/email/range  移除元素:\n applet big font frame/frameset  CSS Question: 怎么才能让图文不可复制？ // 禁止右键菜单 document.body.oncontextmenu = (e) =\u0026gt; { return false; // e.preventDefault(); }; // 禁止文字选择 document.body.onselectstart = (e) =\u0026gt; { return false; // e.preventDefault(); }; // 禁止复制 document.body.oncopy = (e) =\u0026gt; { return false; // e.preventDefault(); }; // 禁止粘贴 document.body.onpaste = (e) =\u0026gt; { return false; // e.preventDefault(); };  /* CSS禁止文本选择，这样不会触发js */ body { user-select: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; -o-user-select: none; } JavaScript Question: 为什么会有跨域问题？怎么解决跨域？ 浏览器为了安全，产生了同源策略，协议、域名、端口有一个不同，产生跨域问题。不同协议、不同域名、不同端口,即为不同源。\n常用的跨域方式有：\n JSONP： 优点是可以兼容老浏览器，缺点是只能发送 GET 请求 CORS：优点简单方便，支持 post 请求，缺点是需要后端的配合,不支持老版浏览器 Server Proxy：优点是前端正常发送 ajax 请求，缺点是后端会二次请求  One more question Question: 说一下 Http 缓存策略，有什么区别，分别解决了什么问题 浏览器缓存策略 浏览器每次发起请求时，先在本地缓存中查找结果以及缓存标识，根据缓存标识来判断是否使用本地缓存。如果缓存有效，则使用本地缓存；否则，则向服务器发起请求并携带缓存标识。根据是否需向服务器发起 HTTP 请求，将缓存过程划分为两个部分：强制缓存和协商缓存，强缓存优先于协商缓存。\n 强缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。 协商缓存，让客户端与服务器之间能实现缓存文件是否更新的验证、提升缓存的复用率，将缓存信息中的 Etag 和 Last-Modified 通过请求发送给服务器，由服务器校验，返回 304 状态码时，浏览器直接使用缓存。  HTTP 缓存都是从第二次请求开始的：\n 第一次请求资源时，服务器返回资源，并在 response header 中回传资源的缓存策略 第二次请求时，浏览器判断这些请求参数，击中强缓存就直接 返回状态码 200，否则就把请求参数加到 request header 头中传给服务器，看是否击中协商缓存，击中则返回 304，否则服务器会返回新的资源。   http-cache-flow-chart \n强缓存  强缓存命中则直接读取浏览器本地的资源，在 network 中显示的是 from memory 或者 from disk 控制强制缓存的字段有：Cache-Control（http1.1）和 Expires（http1.0） Cache-control 是一个相对时间，用以表达自上次请求正确的资源之后的多少秒的时间段内缓存有效。 Expires 是一个绝对时间。用以表达在这个时间点之前发起请求可以直接从浏览器中读取数据，而无需发起请求 Cache-Control 的优先级比 Expires 的优先级高。前者的出现是为了解决 Expires 在浏览器时间被手动更改导致缓存判断错误的问题 如果同时存在则使用Cache-control  强缓存 expires   该字段是服务器响应消息头字段，告诉浏览器在过期时间之前可以直接从浏览器缓存中存取数据\n  Expires 是 HTTP 1.0 的字段，表示缓存到期时间，是一个绝对的时间 (当前时间+缓存时间)。在响应消息头中，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求。\n  由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效，重新请求该资源。此外，即使不考虑修改，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。\n  优点:\n HTTP 1.0 产物，可以在 HTTP 1.0 和 1.1 中使用，简单易用。 以时刻标识失效时间。 缺点： 时间是由服务器发送的(UTC)，如果服务器时间和客户端时间存在不一致，可能会出现问题。 存在版本问题，到期之前的修改客户端是不可知的。  强缓存 cache-control   已知Expires的缺点之后，在HTTP/1.1中，增加了一个字段 Cache-control，该字段表示资源缓存的最大有效时间，在该时间内，客户端不需要向服务器发送请求。\n  这两者的区别就是前者是绝对时间，而后者是相对时间。下面是一些 Cache-control 字段常用的值：\n max-age: 即最大有效时间 must-revalidate: 如果超过了 max-age 的时间，浏览器必须向服务器发送请求，验证资源是否还有效 no-cache: 不使用强缓存，需要与服务器验证缓存是否新鲜 no-store: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强制和对比 public: 所有的内容都可以被缓存, 包括客户端和代理服务器， 如 CDN private: 所有的内容只有客户端才可以缓存, 代理服务器不能缓存, 默认值    Cache-control 的优先级高于 Expires，为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段都可以设置\n  该字段可以在请求头或者响应头设置，可组合使用多种指令\n  优点：\n HTTP 1.1 产物，以时间间隔标识失效时间，解决了 Expires 服务器和客户端相对时间的问题 比Expires 多了很多选项设置  缺点：存在版本问题，到期之前的修改客户端是不可知的\n协商缓存  协商缓存的状态码由服务器决策返回200或者304 当浏览器的强缓存失效的时候或者请求头中设置了不走强缓存，并且在请求头中设置了If-Modified-Since 或者 If-None-Match 的时候，会将这两个属性值到服务端去验证是否命中协商缓存，如果命中了协商缓存，会返回 304 状态，加载浏览器缓存，并且响应头会设置 Last-Modified 或者 ETag 属性。 对比缓存在请求数上和没有缓存是一致的，但如果是 304 的话，返回的仅仅是一个状态码而已，并没有实际的文件内容，因此 在响应体体积上的节省是它的优化点。 协商缓存有 2 组字段(不是两个)，控制协商缓存的字段有：Last-Modified/If-Modified-since（http1.0） 和 Etag/If-None-match（http1.1） Last-Modified/If-Modified-since 表示的是服务器的资源最后一次修改的时间；Etag/If-None-match 表示的是服务器资源的唯一标 识，只要资源变化，Etag 就会重新生成。 Etag/If-None-match 的优先级比 Last-Modified/If-Modified-since 高。  Reference Javascript 中的复制粘贴功能 \n前端常见跨域解决方案（全） - SegmentFault 思否\n跨域资源共享 CORS 详解 - 阮一峰的网络日志\n彻底弄懂浏览器缓存策略 | 机器之心\n","date":"2021-10-26T10:14:45+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-40/frontend-40-cover_hu525553c2cb9d13bd725600d6caadba7f_2217610_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-40/","title":"毎日のフロントエンド　40"},{"content":"第三十九日 HTML Question: title 与 h1、b 与 strong、i 与 em 的区别分别是什么？  title标签写在body里面不会被渲染,只能写在head里面,对网站 SEO 比较重要 h1标签写在 body 里面,但是写在 head 里(不推荐),渲染的时候会自动渲染到 body 里面去 b标签与strong标签在表现上是一样的,都自带font-weight: bold属性  b 仅表示加粗既装饰用，我们应该使用 CSS 而不应该使用 b   i标签与em标签在表现上是一样的,都自带font-style: italic属性  i 用于斜体展示，我们应该使用 CSS 而不应该使用 i   b标签与i标签是物理标记,告诉浏览器以何种格式显示文字 strong标签与em标签是逻辑标记,逻辑元素告诉浏览器这些文字有怎么样的重要性  CSS Question: CSS 水平和垂直居中的方法  绝对布局  .parent { position: relative; } .child { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); } flexbox flexbox  .parent { display: flex; justify-content: center; align-items: center; } JavaScript Question: 说说对模块化的理解 Javascipt 模块化\n Problem   命名问题：所有文件的方法都挂载到window/global上，会污染全局环境，并且需要考虑命名冲突问题 依赖问题：script是顺序加载的，如果各个文件文件有依赖，就得考虑 js 文件的加载顺序 网络问题：如果 js 文件过多，所需请求次数就会增多，增加加载时间  4 种规范: CommonJS、AMD、UMD、ESM  CommonJS CommonJS是一个更偏向于服务器端的规范。NodeJS采用了这个规范。CommonJS的一个模块就是一个脚本文件。require 命令第一次加载该脚本时就会执行整个脚本，然后在内存中生成一个对象。\nCommonJS规范代表node.js的模块系统，在node里面实现了moduel、exports、require、global四个变量\n 允许模块以require的方式同步加载其他模块,然后通过exports和module.exports的形式向外暴露接口。 使用方式如下，如果只是对外暴露一些属性或者方法用exports，如果要暴露一个对象（包含属性和方法）则使用module.exports  //导入 require(\u0026#39;module\u0026#39;); require(\u0026#39;./app.js\u0026#39;); //导出 exports.getSomethInfo = function () {}; module.exports = { someValue, someFunction };   优点\n 简单易用 服务端的模块便于复用    缺点\n 同步加载在浏览器端不适用，会阻碍加载，浏览器资源是异步加载的 不能非阻塞并行加载多个模块    AMDAsynchronous Module Definition （异步加载模块） 采用异步方式加载模块，模块的加载不影响后面语句的运行。所有依赖模块的语句，都定义在一个回调函数中，等到加载完成之后，回调函数才执行。\nrequire([module], callback); // AMD也采用require命令加载模块，但是不同于CommonJS，它要求两个参数  第一个参数[module]，是一个数组，里面的成员是要加载的模块，callback是加载完成后的回调函数，回调函数中参数对应数组中的成员（模块）。  // 定义 define(\u0026#34;module\u0026#34;, [\u0026#34;dep1\u0026#34;, \u0026#34;dep2\u0026#34;], function(d1, d2) {...}); // 加载模块 require([\u0026#34;module\u0026#34;, \u0026#34;../app\u0026#34;], function(module, app) {...});   优点\n 适合在浏览器环境中异步加载模块 可以并行加载多个模块    缺点\n 提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅 不符合通用的模块化思维方式，是一种妥协的实现    AMD 规范代表 requirejs1\n  UMD 规范（异步加载模块）(Universal Module Definition) 所谓的通用，就是兼容了 CmmonJS 和 AMD 规范，这意味着无论是在 CommonJS 规范的项目中，还是 AMD 规范的项目中，都可以直接引用 UMD 规范的模块使用。\n原理其实就是在模块中去判断全局是否存在 exports 和 define，如果存在 exports，那么以 CommonJS 的方式暴露模块，如果存在 define 那么以 AMD 的方式暴露模块:\n(function (root, factory) { if (typeof define === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; define.amd) { define([\u0026#34;jquery\u0026#34;, \u0026#34;underscore\u0026#34;], factory); } else if (typeof exports === \u0026#34;object\u0026#34;) { module.exports = factory(require(\u0026#34;jquery\u0026#34;), require(\u0026#34;underscore\u0026#34;)); } else { root.Requester = factory(root.$, root._); } }(this, function ($, _) { // this is where I defined my module implementation  const Requester = { // ... };  return Requester; })); CMD 规范（异步加载模块）  CMD 规范和 AMD 很相似，简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性；在 CMD 规范中，一个模块就是一个文件。 定义模块使用全局函数 define，其接收 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串； factory 是一个函数，有三个参数，function(require, exports, module)：  require 是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口：require(id) exports 是一个对象，用来向外提供模块接口 module 是一个对象，上面存储了与当前模块相关联的一些属性和方法    define(function (require, exports, module) { var a = require(\u0026#39;./a\u0026#39;); a.doSomething(); // 依赖就近书写，什么时候用到什么时候引入  var b = require(\u0026#39;./b\u0026#39;); b.doSomething(); }); ES6模块化 ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案\n// 导入 import \u0026#34;/app\u0026#34;; import React from “react”; import { Component } from “react”; // 导出 export function multiply() {...}; export var year = 2018; export default ... ... require与import的区别 require使用与CommonJs规范，import使用于 Es6 模块规范；所以两者的区别实质是两种规范的区别；\n  CommonJS\n 对于基本数据类型，属于复制。即会被模块缓存；同时，在另一个模块可以对该模块输出的变量重新赋值。 对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。 当使用 require 命令加载某个模块时，就会运行整个模块的代码。 当使用 require 命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，- CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。 循环加载时，属于加载时执行。即脚本代码在 require 的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。    ES6 模块\n 对于只读来说，即不允许修改引入变量的值，import 的变量是只读的，不论是基本数据类型还是复杂数据类型。当模块遇到 import 命令时，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。 对于动态来说，原始值发生变化，import 加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。 循环加载时，ES6 模块是动态引用。只要两个模块之间存在某个引用，代码就能够执行。    require/exports 是必要通用且必须的；因为事实上，目前编写的 import/export 最终都是编译为 require/exports 来执行的。\nReference haizlin/fe-interview: HTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/小程序/软技能……\nlgwebdream/FE-Interview \n文字を強調するタグ strong・b・em・i の違いと SEO 効果 | なんでものびる WEB\nJs 前端模块化规范 \nJavascript 模块化详解 - SegmentFault 思否\n  RequireJS\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-10-25T10:58:32+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-39/frontend-39-cover_hu5ea06f4f526d4ef1243b976709e90d09_1774697_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-39/","title":"毎日のフロントエンド　39"},{"content":"第三十八日 HTML Question: 说说你对 cookie 和 session 的理解 cookie HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。\ncookie 分发是通过扩展 HTTP 协议来实现的，服务器通过在 HTTP 的响应头header中加上一行特殊的指示以提示浏览器按照指示生成相应的 cookie。然而纯粹的客户端脚本如 JavaScript 等方式也可以生成 cookie。\ncookie 的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的 cookie，如果某个 cookie 所声明的作用范围大于等于将要请求的资源所在的位置，则把该 cookie 附在请求资源的 HTTP 请求头上发送给服务器。\nCookie 主要用于:\n 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等）  创建 Cookie:\n当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。\nSession cookie机制弥补了 HTTP 协议无状态的不足。在 Session 出现之前，基本上所有的网站都采用 Cookie 来跟踪会话。\n与 Cookie 不同的是，session是以服务端保存状态。\n当客户端请求创建一个session的时候，服务器会先检查这个客户端的请求里是否已包含了一个session标识 - sessionId`:\n 如果已包含这个 sessionId，则说明以前已经为此客户端创建过 session，服务器就按照 sessionId 把这个 session 检索出来使用（如果检索不到，可能会新建一个） 如果客户端请求不包含 sessionId，则为此客户端创建一个 session 并且生成一个与此 session 相关联的 sessionId  What is Cookie? A cookie us a small file with the maximum size of 4kb that the web server stores on the client. Once a cookie has been set, all page requests that follow return the cookie name and value. A cookie can only be read from the domain that it has been issued from. Most web browsers have options for disabling cookies, third party cookies or both.\nWhat is a Session? A session is a global variable stored on the server. Each session is assigned a unique id which is used to retrieve stored values. Whenever a session is created, a cookie containing the unique session id is stored on the user\u0026rsquo;s computer and returned with every request to the server. If the client browser does not support cookiesm the unique session id is displayed in the URL. Sessions have the capacity to store relatively large data compared to cookies.\nThe session values are automaticlly deleted when the browser is closed.\nKEY Difference  Cookies are client-side files that contain user information, whereas Sessions are server-side files that contain user information. Cookie is not dependent on session, but Session is dependent on Cookie. Cookie expires depending on the lifetime you set for it, while a Session ends when a user closes browser. The maximum cookie size is 4kb whereas in session, you can store as much data as you like. Cookie does not have a function named unsetcookie() while in Session you can use. Session_destroy(); which is used to destroy all registered data or to unset some.  Why and when to use Cookie? Http is a stateless protocol; cookies allow us to track the state of the application using small files stored on the user\u0026rsquo;s computer. The path were cookies are stored depends on the browser.\nWhy and when to use Session? To store important information such as the user id more securely on the server where malicious users cannot temper with them. Sessions are used to pass values from one page to another.\nIt is also used when you want the alternative to cookies on browsers that do not support cookies, to store global variables in an efficient and more secure way compared to passing them in the URL, developing an application such as a shopping cart that has to temporary store information with a capacity large than 4kb.\nCSS Question: 实现单行文本居中和多行文本左对齐并超出显示\u0026quot;\u0026hellip;\u0026quot; .one { text-align: center } .multi { overflow: hidden text-overflow: ellipsis display: -webkit-box -webkit-line-clamp: 3 -webkit-box-orient: vertical } JavaScript Question: 说说你对 eval 的理解 eval() 函数会将传入的字符串当做 JavaScript 代码进行执行。\nThe eval() function evaluates JavaScript code represented as a string.\n Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use eval().\n  不安全的, 容易出错 性能低 某种情况下跟 new Function(), setTimeout, setInterval 类似 不利于代码可维护性, 可拓展性 不是在无可奈何的情况下, 请不要使用  Question: 一个给定字符串中，不重复出现的最长的子字符串 以及 这个子字符串的长度（第 4 题） function lengthOfStr(str) { let res = \u0026#39;\u0026#39;; let result = [...str].reduce((acc, v, i) =\u0026gt; { if (i === 0) { return v; } else { if (acc.indexOf(v) \u0026lt; 0) { return acc + v; } else { res = res.length \u0026lt; acc.length ? acc : res; return acc.slice(acc.indexOf(v) + 1, acc.length) + v; } } }, \u0026#39;\u0026#39;); console.log(res.length \u0026gt; result.length ? res : result); return Math.max(res.length, result.length); }  let str = \u0026#39;fdsfsdzffdfdddfsdsds\u0026#39;; let arr = []; const s = str.split(\u0026#39;\u0026#39;); let total = 0; // 长度 let maxStr = \u0026#39;\u0026#39;; // 最长不重复长度的字符串 for (let i = 0; i \u0026lt; s.length; i++) { const ele = s[i]; const idx = arr.indexOf(ele); if (idx \u0026gt; -1) { arr = arr.slice(idx + 1); } arr.push(ele); if (arr.length \u0026gt; total) { maxStr = arr.join(\u0026#39;\u0026#39;); total = arr.length; } } console.log(total); console.log(maxStr);  /** * 题目：字符串出现的不重复最长长度 * 整体思路： * 用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可 * 对于遇到重复字符如何收缩窗口大小？ * 可以用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可 * 挪动的过程中记录最大长度 */ var lengthOfLongestSubstring = function (s) { let map = new Map(); let i = -1; let res = 0; let n = s.length; for (let j = 0; j \u0026lt; n; j++) { if (map.has(s[j])) { i = Math.max(i, map.get(s[j])); } res = Math.max(res, j - i); map.set(s[j], j); } return res; }; Reference session 和 cookie - 掘金\n详解 cookie、session、webStorage - 掘金\nCookies and Sessions - cs142\nHTTP cookies - HTTP | MDN\nDifference between Cookie and Session\nlgwebdream/FE-Interview: Html、Css、JavaScript、Vue、React、Node、TypeScript、Webpack、算法、网络与安全、浏览器\n","date":"2021-10-24T10:07:50+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-38/frontend-38-cover_hua170349b69ba04ffb68ab040ea06566b_1690641_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-38/","title":"毎日のフロントエンド　38"},{"content":"第三十七日 HTML Question: html5 哪些标签可以优化 SEO 通过标签语义化优化 SEO\n  \u0026lt;h1\u0026gt;是最高的等级，所以你需要准确确定每个页面最重要的内容是什么，要优化的关键词在哪里。以我们最常见的博客为例，博客首页罗列最多的通常就是最新博文，而最重要的应该就是博客的名称了，而后面最新文章的链接标题则可以使用\u0026lt;h2\u0026gt;或者\u0026lt;h3\u0026gt;，一般都使用\u0026lt;h2\u0026gt;，表示次级标题。\n  strong标签的使用, title网站 SEO 标题\n  meta name=\u0026quot;title\u0026quot; content=\u0026quot;网站标题\u0026quot;\n  meta name=\u0026quot;description\u0026quot; content=\u0026quot;网站描述\u0026quot;\n  meta name=\u0026quot;keywords\u0026quot; content=\u0026quot;网站关键词\u0026quot;\n  a href=\u0026quot;链接地址\u0026quot; title=\u0026quot;链接说明\u0026quot;\n  img src=\u0026quot;图片链接地址\u0026quot; alt=\u0026quot;图片说明\u0026quot;\n  div id=\u0026quot;copyright\u0026quot; 版权部分加上网站名称和链接\n   html - structure \n  nav: 可以帮助 UA 迅速获得导航内容，例如读屏器可以省去很多渲染直接跳到导航位置。\n  aside: 可以表示与周围内容关系不太密切的内容 (广告)，通常表现为侧边栏内容 (相关背景内容)、引述内容\n  header: 通常是一组介绍性描述 (搜索框 / logo / …)，网络爬虫知道诸如与之类的部分后可以非常简单的跳过它们，更好的定位网页内容\n  article: 独立的文档、页面、应用、站点，可以单独发布、重用；可以是一篇帖子、一篇文章、一则用户评论、一个可交互的 widget\n  section: 按主题将内容分组，通常会有标题 (heading): 内容体现在文档的提纲 (outline) 中时，用 section 是合适\n  CSS Question: 不使用 border 画出 1px 高的线，在不同浏览器的标准和怪异模式下都能保持效果一样 \u0026lt;div style=\u0026#34;width: 100%;height: 1px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;hr size=\u0026#34;1\u0026#34; /\u0026gt; JavaScript Question: 找到字符串中最长的单词，并返回它的长度 function findLongestWord(str) { var stringArr = str.split(\u0026#39; \u0026#39;); return stringArr.reduce(function (prev, next) { // 返回值为参数与当前字符串中较大的数  // 返回值会作为下次计算的 prev 传入  return Math.max(prev, next.length); }, 0); } Question: 实现斐波那契数列 递归\n递归的方法定义\nF(0) = 0; F(1) = 1; F(n) = F(n - 1) + F(n - 2);  正常递归版本, 这个版本有个问题就是存在大量重复计算。如：当 n 为 5 的时候要计算 fib(4) + fib(3)当 n 为 4 的要计算 fib(3) + fib(2) ，这时 fib(3)就是重复计算了。  function fib(n) { if (n \u0026lt; 0) throw new Error(\u0026#39;输入的数字不能小于0\u0026#39;); if (n \u0026lt; 2) { return n; } return fib(n - 1) + fib(n - 2); } for 循环: 这个版本没有重复计算问题。循环的问题在于状态变量太多，为了实现 fib 这里使用了 4 个状态变量(f0,f1,curFib,i) 而状态变量 在写、修改、删除的过程中需要格外小心。状态变量多,增加阅读难度。  function fib(n) { if (n \u0026lt; 0) throw new Error(\u0026#39;输入的数字不能小于0\u0026#39;); let f_0 = 0; let f_1 = 1; let curFib = f0; if (n \u0026lt; 2) { return n; } for (let i = 1; i \u0026lt; n; i++) { curFib = f_0 + f_1; f_0 = f_1; f_1 = curFib; } return curFib; } 去除重复计算的递归版本:把前两位数字做成参数巧妙的避免了重复计算，性能也有明显的提升。n 做递减运算，前两位数字做递增（斐波那契数列的递增）,这段代码一个减，一个增。  function fib(n) { if (n \u0026lt; 0) throw new Error(\u0026#39;输入的数字不能小于0\u0026#39;); if (n \u0026lt; 2) return n; function _fib(n, a, b) { if (n === 0) return a; return _fib(n - 1, b, a + b); } return _fib(n, 0, 1); } 基于 ES6 Generator 实现  function* fib(n) { if (n \u0026lt; 0) throw new Error(\u0026#39;输入的数字不能小于0\u0026#39;); let f0 = 1, f1 = 1, count = 0; while (count \u0026lt; n) { yield f0; [f0, f1] = [f1, f0 + f1]; count++; } } Array  function fib(n) { if (n \u0026lt; 0) throw new Error(\u0026#39;输入的数字不能小于0\u0026#39;); if (n \u0026lt; 2) { return n; } let list = []; list[0] = 0; list[1] = 1; for (let i = 1; i \u0026lt; n; i++) { list[i + 1] = list[i] + list[i - 1]; } return list[n]; } Reference HTML 标签语义化与 SEO - 掘金\n前端题\n","date":"2021-10-23T12:52:30+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-37/frontend-37-cover_hu20e66b4b944b265ee469f519e298d070_872394_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-37/","title":"毎日のフロントエンド　37"},{"content":"第三十六日 HTML Question: HTML 与 XHTML 二者有不同 HTML vs HTML5 vs XHTML\nAll three are markup language, performing, essentially, the same task.\nHTML and HTML5 A markup language most common today is HTML. It was designed by the inventor of the World Wide Web.\nXHTML It is worth noting that before HTML5 was released, the World Wide Web Consortium (W3C) initiated work to develop an extension of the basic HTML, merging it with XML format.\nThis was meant to resolve some compatibility issues that browsers were experiencing at the time.\nDifferences between HTML vs XHTML vs HTML5 Listed below are some of the main differences between HTML and HTML5:\n HTML5 provides better support for different types of media – for example, audio and video. It is done by providing additional tags for media files. HTML5 enables Javascript to run in the browser – a feature, previously unavailable in HTML. HTML5 introduced brand-new input attributes, including email, URLs, date and time, and search, to name a few. HTML5 has better browser compatibility than HTML. It is also device-independent. HTML5 adopts superior text processing rules, also known as parsing. This allows for much greater parsing flexibility than HTML. HTML5 now makes it a lot easier to find locations without the need for third-party plugins. HTML5 provides native support for vector graphics. This reduces the need for third-party software, such as Adobe Flash.  Listed below are some of the main differences between HTML and XHTML:\n HTML accepts that some elements may not contain the closing tag. XHTML expects that all elements with no exception include a closing tag(XHTML 标签必须关闭) XHTML, unlike HTML, does not allow elements to overlap. For a document to be valid XHTML, attributes cannot be minimized. -XHTML requires that all attribute values (e.g., font size) are quoted – even the numeric ones. There is no such requirement in HTML.  Listed below are some of the main differences between HTML5 and XHTML:\n XHTML is case sensitive (same as HTML), whereas HTML5 is not. Both XHTML and HTML have a more complex doctype than HTML5. HTML5 is compatible with all browsers. XHTML is not. HTML5, being a successor of HTML, is much more flexible than XHTML. XHTML is better suited for desktop computers, while HTML5 is better suited for mobile devices — smartphones and tablets.  CSS Question: 写出主流浏览器内核私有属性的 css 前缀    浏览器 内核 CSS 前缀     Chrome Blink 内核（新） -webkit-   Firefox Gecko 内核 -moz-   Safari Webkit 内核 -webkit-   Opera Webkit 内核（新） -o-   IE/Edge Trident 内核 -ms-    JavaScript Question: 合并二维有序数组成一维有序数组，归并排序的思路 /** * 解题思路： * 双指针 从头到尾比较 两个数组的第一个值，根据值的大小依次插入到新的数组中 * 空间复杂度：O(m + n) * 时间复杂度：O(m + n) * @param {Array} arr1 * @param {Array} arr2 */ function merge(arr1, arr2) { let result = []; while (arr1.length \u0026gt; 0 \u0026amp;\u0026amp; arr2.length \u0026gt; 0) { if (arr1[0] \u0026lt; arr2[0]) { /*shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。*/ result.push(arr1.shift()); } else { result.push(arr2.shift()); } } return result.concat(arr1).concat(arr2); } function mergeSort(arr) { let lengthArr = arr.length; if (lengthArr === 0) { return []; } while (arr.length \u0026gt; 1) { let arrayItem1 = arr.shift(); let arrayItem2 = arr.shift(); let mergeArr = merge(arrayItem1, arrayItem2); arr.push(mergeArr); } return arr[0]; } let arr1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], ]; let arr2 = [ [1, 4, 6], [7, 8, 10], [2, 6, 9], [3, 7, 13], [1, 5, 12], ]; mergeSort(arr1); mergeSort(arr2); Soft Skill Question 前端安全，说说对 XSS 和 CSRF 的理解 XSS攻击全称跨站脚本攻击,一般有sql注入，js脚本注入。 评论类型模块的提交过程中不要相信客户的输入内容，需要进行转义。\ncsrf跨站请求伪造 请求需要鉴权，如携带 token，或者利用 seesion，cookie。敏感信息提交可以使用验证码\nReference HTML vs HTML5 vs XHTML: the Difference\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-10-22T11:27:44+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-36/frontend-36-cover_hu85575022c92bc4a88deb51d9b1a51415_3856305_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-36/","title":"毎日のフロントエンド　36"},{"content":"第三十五日 HTML Question 用一个 div 模拟 textarea 的实现 \u0026lt;div class=\u0026quot;edit\u0026quot; contenteditable=\u0026quot;true\u0026quot; style=\u0026quot;resize: both\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\nCSS Question 使用 flex 实现三栏布局，两边固定，中间自适应 .container { display: flex; height: 100px; .left, .right { width: 100px; background: #8c939d; } .content { flex: 1; background: #306eff; } } flex: 0 1 auto 分别表示什么意思\n三个参数分别对应的是 flex-grow, flex-shrink 和 flex-basis，默认值分别是0 1 auto\n flex-grow属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大 flex-shrink属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小 flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）  JavaScript Question 解释一个为什么 10.toFixed(10) 会报错 因为在这里的 . 发生了歧义，它既可以理解为小数点，也可以理解为对方法的调用 因为这个点紧跟于一个数字之后，按照规范，解释器就把它判断为一个小数点\n (10).toFixed(10) 10..toFixed(10) 10 .toFixed(10) 10.0.toFixed(10)  出现这个报错是因为前面这个数是整数，如果本来就是小数就不会出现这个报错\nQuestion 写一个 mySetInterVal(fn, a, b) ,每次间隔 a,a+b,a+2b, ...,a+nb 的时间，然后写一个 myClear，停止上面的 mySetInterVal function mySetInterVal(fn, a, b) { this.a = a; this.b = b; this.time = 0; this.handle = null; this.start = () =\u0026gt; { this.handle = setTimeout(() =\u0026gt; { fn(); this.time++; this.start(); console.log(this.a + this.b * this.time); }, this.a + this.b * this.time); }; this.stop = () =\u0026gt; { clearTimeout(this.handle); this.time = 0; }; } const demo = new mySetInterVal( () =\u0026gt; { console.log(\u0026#39;demo\u0026#39;); }, 100, 200 ); demo.start(); demo.stop(); Soft Skill Question 谈一谈知道的前端性能优化方案有哪些 客户端优化\n 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器 使用CSS Sprites: 将多个图片合并到一张单独的图片，这样就大大减少了页面中图片的HTTP请求 减少DOM操作次数，优化javascript性能 少用全局变量、减少 DOM 操作、缓存 DOM 节点查找的结果。减少 IO 读取操作 延迟加载 | 延迟渲染 图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳 避免在页面的主体布局中使用 table，table 要等其中的内容完全下载之后才会显示出来，显示比 div+css 布局慢 http缓存 设置cache-control expires Last-modified 前端缓存 对于一些页面今天配置直接存储到localStorage中 对于长期不发生改变的代码可以直接通过server-work存储到本地   优化加载\n  webpack 开启 tree-shaking 减少代码体积 通过 preload prefetch 优化加载资源的时间 import('').then()异步加载资源 图片小于 30k 的图片直接做成 base64； 对于首屏的样式可以直接内嵌到 html 中；  服务端优化\n 尽量减少响应的体积，比如用 gzip 压缩(nignx)，优化图片字节数，压缩 css 和 js；或加快文件读取速度，优化服务端的缓存策略。 客户端优化 dom、css 和 js 的代码和加载顺序；或进行服务器端渲染，减轻客户端渲染的压力。 优化网络路由，比如增加 CDN 缓存；或增加并发处理能力，比如服务端设置多个域名，客户端使用多个域名同时请求资源，增加并发量。  Summary\n尽量向前端优化、减少数据库操作、减少磁盘IO: 向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。 减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如 join 查询），减少磁盘 IO 指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。\nReference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n前端面试 - 大厂前端面试真题\n『前端面试 100 问』之弹性盒子中 flex: 0 1 auto 表示什么意思 - 掘金\n","date":"2021-10-21T10:36:22+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-35/frontend-35-cover_hu85575022c92bc4a88deb51d9b1a51415_3856305_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-35/","title":"毎日のフロントエンド　35"},{"content":"第三十四日 HTML Question: Standards 模式和 Quirks 模式有什么区别 在 quirks 模式和标准模式之间一个突出的不同是对 CSS IE 盒模型缺陷的处理，怪异模式和标准模式最早是为了对旧版本网页进行兼容而设计的，可以通过 \u0026lt;!DOCTYPE\u0026gt; 来进行区分。\nstandards盒模型： width = content quirks盒模型： width = content + border + padding\nCSS Question: 浏览器是怎样判断元素是否和某个 CSS 选择器匹配 从右往左匹配 浏览器先产生一个元素集合，这个集合往往由最后一个部分的索引产生（如果没有索引就是所有元素的集合）。然后向上匹配，如果不符合上一个部分，就把元素从集合中删除，直到真个选择器都匹配完，还在集合中的元素就匹配这个选择器了。\n即，从最开始匹配的元素集合，根据增加的选择器来剔除，得到最终匹配\n selector \nReference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-10-20T09:53:44+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-34/frontend-34-cover_huc485326263da33a2635c789e852b16d8_1881309_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-34/","title":"毎日のフロントエンド　34"},{"content":"第三十三日 HTML Question: html 和 html5 有什么区别呢 文档声明区别  HTML 文档的类型声明为：  \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD HTML 4.01//EN\u0026#34; \u0026#34;http://www.w3.org/TR/html4/strict.dtd\u0026#34;\u0026gt; //或 \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD XHTML 1.0 Strict//EN\u0026#34; \u0026#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\u0026#34;\u0026gt; HTML5 文档的类型声明为：  \u0026lt;!DOCTYPE html\u0026gt;\n结构语义区别 HTML：没有体现结构语义的标签，如\u0026lt;div id='nav'\u0026gt;\u0026lt;/div\u0026gt;\nHTML5：添加了许多具有语义化的标签，如：\u0026lt;article\u0026gt;、\u0026lt;aside\u0026gt;、\u0026lt;audio\u0026gt;，更利于 SEO\n相对于 HTML，HTML5 中新增和修改了一些元素\n绘图区别 HTML5：HTML5 的 canvas 使用脚本（通常使用 JavaScript）在网页是绘制图像，可以控制画布上每个像素\n音频的视频的支持 HTML：如果不使用 Flash 播放器支持，它不支持音频和视频\nHTML5：使用\u0026lt;audio\u0026gt;和\u0026lt;vedio\u0026gt;标签来支持音频和视频控制。\nCSS Question: 用 CSS 绘制一个三角形1 用伪元素来实现这种装饰性的效果，content 为空，就不需要 width\n.triangle:after { content: \u0026#39;\u0026#39;; border: 35px solid transparent; border-bottom-color: lightgreen; } JavaScript Question: 说说对 this 的理解 一，一般函数 函数中的 this 永远指向函数的调用者（在代码执行时才能确定），谁最终调用这个函数，this 就指向谁:\n 在全局环境中，this 指向 window（如果开启严格模式，this 将指向undefined) 如果函数是通过对象调用的，那么 this 就指向这个对象（但要小心 this 绑定丢失2，尤其要注意将函数作为值向函数中传入赋值时发生隐式丢失） 如果函数是通过 call、apply、bind 进行绑定，那么 this 就指向被绑定的对象 如果函数是通过new绑定的（构造函数），那么this就指向new出来的对象:  使用 new 来调用函数的时候会自动执行下面的操作：  创建（或这说构造）一个全新的对象 这个新的对象会被执行[[Prototype]]连接 这个新对象会绑定到函数调用的this 如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象       显示绑定：使用call，apply的话，在使用回调函数的情况中会出现违背预期的结果。因为 call，apply 都会立即执行。 而硬绑定 bind 则不会立即执行。符合我们对回调函数执行的要求\n 二，箭头函数 箭头函数中的this例外，它指向定义时所在的位置。或者可以说箭头函数的this继承自外层作用域，只要确定了外层作用域的 this，就知道箭头函数中的 this 指向谁了。\nTypes of Binding in JS  Default Binding Implicit Binding Explicit Binding Constructor call Binding  Default Binding in JavaScript\nOne of the first rule to remember is that: If the function housing a this reference is a standalone function, then that function is bound to the global object.\nfunction alert() { console.log(this.name + \u0026#39; is calling\u0026#39;); } const name = \u0026#39;Kingsley\u0026#39;; alert(); // Kingsley is calling // TypeError: `this` is `undefined` when in \u0026#39;use strict\u0026#39; Implicit Binding in JavaScript\nAnother scenario to look out for is whether the function is attached to an object (its context) at the call site.\nA function can use an object as its context only if that object is bound to it at the call site. This form of binding is known as implicit binding.\nAn easy way to figure out which object this is implicitly bound to is to look at which object is to the left of the dot (.)\nfunction alert() { console.log(this.age + \u0026#39; years old\u0026#39;); } const myObj = { age: 22, alert: alert, nestedObj: { age: 26, alert: alert, }, }; myObj.alert(); // `this` is bound to `myObj` -- 22 years old myObj.nestedObj.alert(); // `this` is bound to `nestedObj` -- 26 years old Explicit binding in JavaScript\ncall() and apply().\nAlong with a couple other set of utility functions, these two utilities are available to all functions in JavaScript via the [[Prototype]] mechanism.\n Hard binding is a perfect way to lock a context into a function call and truly make that function into a method.\n // Hard binding function alert() { console.log(this.age); } const myObj = { age: 22, }; const bar = function () { alert.call(myObj); }; bar(); // 22 setTimeout(bar, 100); // 22 // a hard-bound `bar` can no longer have its `this` context overridden bar.call(window); // still 22 Constructor Call Binding in JavaScript\nWhen a function is invoked with the new keyword in front of it, otherwise known as a constructor call, the following things occur:\n A brand new object is created (or constructed) The newly constructed object is [[Prototype]]-linked to the function that constructed it The newly constructed object is set as the this binding for that function call.   this-1 \n this-2 \nReference What Does \u0026lsquo;this\u0026rsquo; Mean in JavaScript? The this Keyword Explained with Examples\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n  毎日のフロントエンド　6 - CSS\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \u0026ldquo;this \u0026amp; object prototypes\u0026rdquo;: Chapter 2 \u0026lsquo;Explicit Binding\u0026rsquo; - question about explicit binding losing the \u0026ldquo;this\u0026rdquo; binding · Issue #1031 · getify/You-Dont-Know-JS\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-10-19T12:55:27+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/frontend-33-cover_huc485326263da33a2635c789e852b16d8_1881309_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-33/","title":"毎日のフロントエンド　33"},{"content":"第三十二日 HTML Question: 说说对 HTML 元素的显示优先级的理解 Day20 类似。\n帧元素（frameset) 优先级最高 \u0026gt;\u0026gt;\u0026gt; 表单元素 \u0026gt; 非表单元素，即 input type=\u0026quot;radio\u0026quot; 之类的表单控件 \u0026gt; 普通的如 a,div 等元素。\n从有窗口和无窗口元素来分，有窗口元素 \u0026gt; 无窗口元素。有窗口元素如 Select 元素、Object 元素。\nz-index 属性也可以改变显示优先级，但只对同种类型的元素才有效。\nCSS Question: line-height三种赋值方式有何区别 line-height 可以有带单位及不带单位的写法\ndiv { line-height: 24px; line-height: 1.5; line-height: 1.5em; line-height: 150%; } 由于 line-height 有继承性，直接在某个元素上使用 line-height，以下这三种写法是没有区别的，比如给所有的 p 标签添加行高属性：\np { line-height: 1.5em; } p { line-height: 1.5; } p { line-height: 150%; } 三种方式的区别在于，给父元素设置行高的时候子元素的继承方式:\n  带有单位的 line-height 会被计算成 px 后继承。子元素的 line-height = 父元素的 line-height * font-size （如果是 px 了就直接继承）\n  而不带单位的 line-height 被继承的是倍数，子元素的 line-height = 子元素的 font-size * 继承的倍数\n  JavaScript Question: 造成内存泄漏的操作有哪些  闭包 无效的全局变量 addEventListener didn\u0026rsquo;t remove 副作用未清除 setInterval didn\u0026rsquo;t clear 还有一种是递归的时候不用尾调用优化，如果层级比较深的话会造成内存消耗激增，甚至程序崩溃，但是只要递归完成了，这些内存会被释放  Reference line-height 3 种设置方式的区别 - 掘金\n","date":"2021-10-18T17:44:05+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-32/frontend-31-cover_hu7e0a161a7e96ed837d8bdf6edf373a7f_2487400_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-32/","title":"毎日のフロントエンド　32"},{"content":"第三十一日 HTML Question:　DOM 和 BOM 有什么区别  BOM 是 Browser Object Model 的缩写，即浏览器对象模型。DOM 是 Document Object Model 的缩写，即文档对象模型。都是浏览器提供给 JavaScript 的 API 接口\n  BOM-DOM \nBOM 指 浏览器对象模型 提供了独立于内容而与浏览器窗口进行交互的对象。描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，譬如可以弹出新的窗口，改变状态栏中的文本。\n BOM \nDOM 指 文档对象模型 DOM 是针对 HTML 的基于树的 API。描述了处理网页内容的方法和接口，是 HTML 的 API，DOM 把整个页面规划成由节点层级构成的文档。  DOM \n只有 JS 的宿主环境是浏览器的时候才有 DOM 和 BOM ，在 Node 中是没有这两个对象的\nCSS Question:　让网页的字体变得清晰，变细用 CSS 怎么做   font-weight + font-family\n font-weight 来控制粗细还需要对应的字体有没有对应的变种字体。因此这就和 font-family 相关。    -webkit-font-smoothing: antialiased;\n 这个属性是 Chrome 的抗锯齿属性。加上后会显得细一些，但是只针对 webkit 内核的浏览器才有效。    JavaScript Question:　写一个方法把 0 和 1 互转（0 置 1，1 置 0） function change(val) { if (typeof val === \u0026#39;number\u0026#39;) { val += \u0026#39;\u0026#39;; let newStrArr = val.split(\u0026#39;\u0026#39;).map((item, index) =\u0026gt; { return item == \u0026#39;1\u0026#39; ? \u0026#39;0\u0026#39; : \u0026#39;1\u0026#39;; }); let newStr = newStrArr.join(\u0026#39;\u0026#39;); return parseInt(newStr); } return val .split(\u0026#39;\u0026#39;) .map((item, index) =\u0026gt; (item == \u0026#39;1\u0026#39; ? \u0026#39;0\u0026#39; : \u0026#39;1\u0026#39;)) .join(\u0026#39;\u0026#39;); } let str = \u0026#39;10101\u0026#39;; console.log(change(str)); //01010 let num = 10101; console.log(change(num)); //1010 Reference JavaScript Browser Object Model (BOM)\nJavaScript DOM Tutorial\nfe-interview/history.md haizlin/fe-interview\n","date":"2021-10-17T16:01:03+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/frontend-31-cover_hu7e0a161a7e96ed837d8bdf6edf373a7f_2487400_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-31/","title":"毎日のフロントエンド　31"},{"content":"第三十日 HTML Question: 网页上的验证码是为了解决什么问题？说说了解的验证码种类有哪些  图形验证码 字符验证码 文字+混淆 如早期的 7456 这种结果的验证码 复杂字符验证码 复杂文字+混淆 如加入中文等本土化的增加识别难度 计算验证码 数字+运算符+混淆 如 1+2=? 需要识别表达式增加识别难度 精确识别 文字+混淆文字 如选出 优贝在线 中的 贝字，或者选出所有的筷子，所有的红绿灯（12306） 滑动拼图验证 图像+滑块+图像凹槽 如常见的滑动拼图，提供商有易盾之类的 拼图验证 图像+打乱 需要用户去拼合完成。teamviewer 和 google 物理验证 手机短信验证码 手机语音验证码  CSS Question: 描述下了解的图片格式及使用场景    格式 优点 缺点 适用场景     gif 文件小，支持动画、透明，无兼容性问题 只支持 256 种颜色 色彩简单的 logo、icon、动图   jpg 色彩丰富，文件小 有损压缩，反复保存图片质量下降明显 色彩丰富的图片/渐变图像   png 无损压缩，支持透明，简单图片尺寸小 不支持动画，色彩丰富的图片尺寸大 logo/icon/透明图   webp 文件小，支持有损和无损压缩，支持动画、透明 浏览器兼容性不好 支持 webp 格式的 app 和 webview    ▍PNG\n  优点：PNG 格式图片是无损压缩的图片，能在保证最不失真的情况下尽可能压缩图像文件的大小；图片质量高；色彩表现好；支持透明效果；提供锋利的线条和边缘，所以做出的 logo 等小图标效果会更好；更好地展示文字、颜色相近的图片。\n  缺点：占内存大,会导致网页加载速度慢；对于需要高保真的较复杂的图像，PNG 虽然能无损压缩，但图片文件较大，不适合应用在 Web 页面上。\n  适用场景：主要用于小图标或颜色简单对比强烈的小的背景图。\n  ▍JPG\n  优点：占用内存小，网页加载速度快。\n  缺点：JPG 格式图片是有损压缩的图片，有损压缩会使原始图片数据质量下降，即 JPG 会在压缩图片时降低品质。\n  适用场景：由于这种格式图片对色彩表现比较好，所以适用于色彩丰富的图片。主要用于摄影作品或者大的背景图等。不合适文字比较多的图片。\n  ▍SVG\n  优点：SVG 是矢量图形，不受像素影响，在不同平台上都表现良好；可以通过 JS 控制实现动画效果。\n  缺点：DOM 比正常的图形慢，而且如果其结点多而杂，就更慢；不能与 HTML 内容集成。\n  适用场景：主要用于设计模型的展示等。\n  ▍WebP\n  优点：WebP 格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器宽带资源和数据空间。\n  缺点：相较编码 JPEG 文件，编码同样质量的 WebP 文件需要占用更多的计算资源。\n  适用场景：WebP 既支持有损压缩也支持无损压缩。将来可能是 JPEG 的代替品。\n  JavaScript Question: 写一个方法判断字符串是否为回文字符串  Loading Question\u0026hellip; - 力扣（LeetCode）\n 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。\n示例 1:\n输入: \u0026ldquo;A man, a plan, a canal: Panama\u0026rdquo; 输出: true 示例 2:\n输入: \u0026ldquo;race a car\u0026rdquo; 输出: false\nSolution  获取有效的字符串，我们利用正则去匹配字母和数字，因为忽略大小写，所以我们转成小写 然后利用 split('') 把字符串分割成数组，再用数组的 reverse() 去反转，再用 join(‘’) 去拼接 最后进行比较  /** * @param {string} s * @return {boolean} */ var isPalindrome = function (s) { if (s.length === 1) return true; const str = s.replace(/[^a-zA-Z0-9]/g, \u0026#39;\u0026#39;).toLowerCase(); const strReverse = str.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;); return str === strReverse; }; Reference [css] 描述下你所了解的图片格式及使用场景 · haizlin/fe-interview\n","date":"2021-10-16T10:26:51+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-30/frontend-30-cover_hu89d8ee96e007565925651f32f7a2142a_1095993_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-30/","title":"毎日のフロントエンド　30"},{"content":"第二十九日 HTML #Quesion: 了解什么是无障碍 web（WAI）吗？在开发过程中要怎么做呢 无障碍 Web == 有良好访问性的 Web\n 页面的内容结构  应该让标题、段落、列表等各司其职，让整个页面内容结构清晰，比如：\n\u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;静夜思\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;[唐] 李白\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; 床前明月光，疑是地上霜。 \u0026lt;br /\u0026gt; 举头望明月，低头思故乡。 \u0026lt;/div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#39;#\u0026#39;\u0026gt;译文\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#39;#\u0026#39;\u0026gt;注释\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#39;#\u0026#39;\u0026gt;作者介绍\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; 好的语义，屏幕阅读器会：\n 在你浏览内容时，读取每个标题，通知标题是什么，段落是什么等 它会在每个元素之后停止，让你有个短暂的停歇 你可以跳转到上一个/下一个标题 \u0026hellip;  简写和缩写 form 表单  \u0026lt;form\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;姓名：\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;age\u0026#34;\u0026gt;年龄：\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;age\u0026#34; name=\u0026#34;age\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;gender\u0026#34;\u0026gt;性别：\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;gender\u0026#34; name=\u0026#34;gender\u0026#34;\u0026gt; \u0026lt;option\u0026gt;男\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;女\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;label\u0026gt; 标签可以让提示文本和输入框完美的对应起来，还可以扩大激活输入框的范围，方便用户选择和输入\n键盘可访问性  键盘可访问包括按 tab 键能让页面中的元素获得焦点、按 Return/Enter 键能激活该元素、表单元素 \u0026lt;select\u0026gt; 在获得焦点时按方向键可以上下切换选项。自带键盘可访问性的标签有\u0026lt;a\u0026gt;、\u0026lt;button\u0026gt;、\u0026lt;label\u0026gt;以及表单元素\nalt 属性  CSS #Quesion: 请描述 css 的权重计算规则 权重值计算\n   选择器 例 权重值     !important !important Infinity   内联样式 style=\u0026quot;..\u0026quot; 1000   ID #id 100   class .class 10   属性 [type='text'] 10   伪类 :hover 10   标签 p 1   伪元素 ::first-line 1   相邻选择器、子代选择器、通配符 \\* \u0026gt; + 0     1000\u0026gt;100。也就是说从左往右逐个等级比较，前一等级相等才往后比 在权重相同的情况下，后面的样式会覆盖掉前面的样式 继承属性没有权重 通配符、子选择器、相邻选择器等的。虽然权值为 0，但是也比继承的样式优先 ie6 以上才支持 important，并且尽量少用  JavaScript #Quesion: 写一个获取数组的最大值、最小值的方法 Math.max.apply(Array, [25, 62, 91, 78, 34, 62]); // 91 Math.min.apply(Array, [27, 64, 90, 78, 34, 62]); // 27  // or maxValue = Math.max.apply(null, arr); minValue = Math.min.apply(null, arr);  //es6 let arr = [1, 2, 3, 4]; Math.max(...arr); Math.min(...arr); Reference CSS 是怎样确定图像大小的？ · Issue #44 · anjia/blog\n","date":"2021-10-15T22:05:17+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-29/frontend-29-cover_hu89d8ee96e007565925651f32f7a2142a_1095993_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-29/","title":"毎日のフロントエンド　29"},{"content":"第二十八日 HTML #Question: 说说你对\u0026lt;meta\u0026gt;标签的理解 meta标签 **元数据(Metadata)**是HTML语言\u0026lt;head\u0026gt;区的一个辅助性标签，它位于 HTML 文档头部的head和title之间，它提供用户不可见的信息。\n元数据可以被使用浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 Web 服务调用\n   属性 值 描述     charset (HTML5) character_set 定义文档的字符编码。   content text 定义与 http-equiv 或 name 性相关的元信息。   http-equiv content-type、default-style、refresh 把 content 属性关联到 HTTP 头部。   name application-name、author、description、generator、keywords 把 content 属性关联到一个名称   scheme  format/URI  HTML5 不支持。 定义用于翻译 content 属性值的格式。    CSS #Question: rgba() 和 opacity 这两个的透明效果有什么区别呢   rgba 只对颜色有影响。如果放在 background 上的话，只对背景颜色有影响。不会影响元素中的其他内容以及子元素内容\n  opacity 的透明效果是作用整个元素以及其子元素上的\n  JavaScript #Question: 解释下列段代码的意思 // $$(\u0026#39;*\u0026#39;) 为获取所有 dom 元素，返回数组 [].forEach.call($$(\u0026#39;*\u0026#39;), function (a) { // forEach 的回调函数，这里的 a 是数组中每个 dom 元素，不是 a 标签  a.style.outline = // ～～是取整 1\u0026lt;\u0026lt;24 是位运算 结果为 16777216  // 之后的 toString(16) 为进行 16 进制的转换 即颜色  \u0026#39;1px solid #\u0026#39; + (~~(Math.random() * (1 \u0026lt;\u0026lt; 24))).toString(16); }); 作用  在你的 Chrome 浏览器的控制台中输入这段代码，你会发现不同 HTML 层都被使用不同的颜色添加了一个高亮的边框。简单来说，这段代码只是首先获取了所有的页面元素，然后使用一个不同的颜色为它们添加了一个 1px 的边框。\n 解析  [].forEach.call() =\u0026gt; 调用引用数组的 forEach 方法 $$('*') =\u0026gt; document.querySelectorAll('*') ~~a =\u0026gt; parseInt(a) 1\u0026lt;\u0026lt;24 =\u0026gt; 对二进数 1 小数点右移 24 位 (parseInt(Math.random()\\*(1\u0026lt;\u0026lt;24)).toString(16)) =\u0026gt; 获得了一个位于 0-16777216 之间的随机整数，也就是随机颜色，再使用 toString(16)将它转化为十六进制数。  [].forEach.call(document.querySelectorAll(\u0026#39;*\u0026#39;), function (a) { a.style.outline = \u0026#39;1px solid #\u0026#39; + parseInt(Math.random() * (1 \u0026lt;\u0026lt; 24)).toString(16); }); Reference HTML meta 标签总结与属性使用介绍 - SegmentFault 思否\n：文档级元数据元素 - HTML（超文本标记语言） | MDN\n从一行代码里面学点 JavaScript - L3ve 的绝对领域 - OSCHINA - 中文开源技术交流社区\n从输入 URL 到页面加载的过程？如何由一道题完善自己的前端知识体系！ | Dailc 的个人主页\n","date":"2021-10-14T17:36:17+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-28/frontend-28-cover_hu3ef23944c2fce3d2d361d818b808dcd0_5137874_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-28/","title":"毎日のフロントエンド　28"},{"content":"Which should be used? Axios or fetch() Difference between Fetch and Axios for making http requests General One the fundamental tasks of any web application is to communicate with servers through the http protocol. This can be easily achieved using Fetch or Axios.\n fetch() The Fetch API provides a fetch() method defined on the window object. It also provides a JavaScript interface for accessing and manipulating parts of the Http pipeline(requests and responses). The fetch method has one mandatory argument - URL of the resource to be fetched. The method retuirns a Promise that can be used to retrieve the response of the request.  // fetch fetch(\u0026#39;api\u0026#39;) .then((response) =\u0026gt; { // Code for handling the response  }) .catch((error) =\u0026gt; { // Code for handling the error  });  Axios: Axios is JavaScript library used to make HTTP requests from nodejs or XMLHttpRequests from the browser and it supports the Promise API that is native to JS ES6. It can be used intercept HTTP requests and respones and enables client-side protection against XSRF. It also has the ability to cancel requests.  // Axios axios .get(\u0026#39;url\u0026#39;) .then((response) =\u0026gt; { // Code for handling the response  }) .catch((error) =\u0026gt; { // Code for handling the error  });    Axios Fetch     Axios has url in request object. Fetch has no url in request object.   Axios is a stand-alone third party package that can be easily installed. Fetch is built into most modern browsers; no installation is required as such.   Axios enjoys built-in XSRF protection. Fetch does not.   Axios uses the data property. Fetch uses the body property.   Axios’ data contains the object. Fetch’s body has to be stringified.   Axios request is ok when status is 200 and statusText is ‘OK’. Fetch request is ok when response object contains the ok property.   Axios performs automatic transforms of JSON data. Fetch is a two-step process when handling JSON data- first, to make the actual request; second, to call the .json() method on the response.   Axios allows cancelling request and request timeout. Fetch does not.   Axios has the ability to intercept HTTP requests. Fetch, by default, doesn’t provide a way to intercept requests.   Axios has built-in support for download progress. Fetch does not support upload progress.   Axios has wide browser support. Fetch only supports Chrome 42+, Firefox 39+, Edge 14+, and Safari 10.1+ (This is known as Backward Compatibility).    Details 1. Syntax Differences Both Axios and Fetch API returns Promises when you make an HTTP request.\n// POST in axios const options = { url: \u0026#39;http://localhost:3000/api/home\u0026#39;, method: \u0026#39;POST\u0026#39;, headers: { Accept: \u0026#39;application/json\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39;, }, data: { name: \u0026#39;David\u0026#39;, age: 45, }, }; axios(options).then((response) =\u0026gt; { console.log(response.status); }); With Axios, we can create a config object using specified parameters like baseUrl, params, headers, auth, responseType to send with the request. It will return a Promise that resolves with either a response object or an error object. Besides, the following can be found in the returned object from the Promise.\n data:- the actual response body status:- HTTP status of the call, like 200 or 404 statusText:- HTTP status returned as a text message headers:- the server sends headers back config:- request configuration request:- XMLHttpRequest object  // POST in fetch() const url = \u0026#39;http://localhost:3000/api/home\u0026#39;; const options = { method: \u0026#39;POST\u0026#39;, headers: { Accept: \u0026#39;application/json\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39;, }, body: JSON.stringify({ name: \u0026#39;David\u0026#39;, age: 45, }), }; // The url (path to the resource you want to fetch) argument is mandatory fetch(url, options).then((response) =\u0026gt; { console.log(response.status); }); Similar to Axios, it returns a Promise that the response object can resolve. We can optionally pass options in the second argument in the fetch() method.\n Key Differences:  With Axios, the data is sent through the data property of the options, but Fetch API uses the body property. Fetch response requires additional validation as it always returns a response object no matter whether it is successful or not. The data in fetch() has been serialized to a String (Stringified). The URL is provided to fetch() as an argument. But, in Axios, it is set in the options object.    2. JSON Data Conversion With Fetch API, handling JSON data is a 2 step process. First, you must make the request and then call the .json() function on the response since Fetch API sends data with the body property.\nfetch(\u0026#39;localhost:3000/api\u0026#39;) // first step  .then((response) =\u0026gt; response.json()) // second step  .then((data) =\u0026gt; { console.log(data); }) .catch((error) =\u0026gt; console.error(error)); With Axios, the data is sent through the data property of the options, and it automatically stringifies the data in the response.\naxios .get(\u0026#39;localhost:3000/api/home\u0026#39;) .then((response) =\u0026gt; { console.log(response.data); }) .catch((error) =\u0026gt; { console.log(error); }); 3. Error Handling Error handling with Axios is easy because bad responses (such as 404 or 500) will end up causing the Promise to be rejected by throwing an exception. Therefore, to handle 404 or 400 errors with Axios, you need to use the catch() block as shown below.\naxios .get(\u0026#39;localhost:3000/api/home\u0026#39;) .then((response) =\u0026gt; { console.log(\u0026#39;response\u0026#39;, response); }) .catch((error) =\u0026gt; { if (error.response) { // The request was made and the server responded with a status code that falls out of the range of 200  // Something like 4xx or 500  console.log(error.response.data); } else if (error.request) { // The request was made but no response was received  // `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js  console.log(error.request); } else { // Something happened in setting up the request that triggered an Error  console.log(\u0026#39;Error\u0026#39;, error.message); } console.log(error.config); }); When using fetch(), you need to read the response object since bad responses are still resolved using the then() method. A Fetch API Promise will be rejected only if the request cannot be completed in a scenario like a network failure.\nfetch(\u0026#39;localhost:3000/api/home\u0026#39;) .then((response) =\u0026gt; { if (!response.ok) { throw Error(response.statusText); } return response.json(); }) .then((data) =\u0026gt; { console.log(data); }) .catch((error) =\u0026gt; console.error(error)); 4. Simultaneous Requests Both Axios and Fetch API can handle multiple requests in parallel. Axios uses the axios.all() method that allows passing an array of requests. Then assign the properties of the response array to distinct variables using axios.spread() as shown here.\nWith Fetch API, you can use the built-in Promise.all() method to accomplish the same by passing all fetch requests to Promise.all() as an array. Next, you can use an async function to handle the response as follows.\n// axios axios .all([ axios.get(\u0026#39;http://localhost:3000/api/home\u0026#39;), axios.get(\u0026#39;http://localhost:3000/api/page\u0026#39;), ]) .then( axios.spread((obj) =\u0026gt; { // Both requests are now complete  console.log(obj[0].data.login); console.log(obj[1].data.login); }) ); // fetch Promise.all([ fetch(\u0026#39;http://localhost:3000/api/home\u0026#39;), fetch(\u0026#39;http://localhost:3000/api/page\u0026#39;), ]) .then(async ([res1, res2]) =\u0026gt; { const obj1 = await res1.json(); const obj2 = await res2.json(); console.log(obj1.login); console.log(obj2.login); }) .catch((error) =\u0026gt; { console.log(error); }); 5. Response timeout If you make a request without defining a timeout it will cause the request to hang and slow down the application. So, we need to set a response timeout for HTTP requests.\naxios({ method: \u0026#39;post\u0026#39;, url: \u0026#39;localhost:3000/api/home\u0026#39;, timeout: 3000, // 3 seconds timeout  data: { name: \u0026#39;David\u0026#39;, age: 45, }, }) .then((response) =\u0026gt; { /* handle the response */ }) .catch((error) =\u0026gt; console.error(\u0026#39;timeout exceeded\u0026#39;));  Axios sets the timeout to 0 by default. So, always remember to specify a timeout for each request. You may also use a request interceptor to set the request timeout automatically.\n // fetch  const controller = new AbortController(); const options = { method: \u0026#39;POST\u0026#39;, signal: controller.signal, body: JSON.stringify({ name: \u0026#39;David\u0026#39;, age: 45, }), }; const promise = fetch(\u0026#39;http://localhost:3000/api/home\u0026#39;, options); const timeoutId = setTimeout(() =\u0026gt; controller.abort(), 3000); promise .then((response) =\u0026gt; { /* handle the response */ }) .catch((error) =\u0026gt; console.error(\u0026#39;timeout exceeded\u0026#39;)); From the above example, you can see that fetch() response timeout functionality through AbortController interface. In addition, the read-only signal property of AbortController allows you to interact with or abort a request.\nIf the server doesn\u0026rsquo;t respond within the specified time(3 seconds), controller.abort() is invoked, and the request is aborted.\n6. Intercepting Requests and Responses  Fetch API doesn’t offer a way to intercept requests by default.\n 7. Request Upload/Download Progress If your HTTP request takes a significant time to complete, using a progress indicator will surely help to improve the user experience. If you use Axios, you can easily use the Axios Progress Bar module to implement a nice progress indicator.\n But Fetch API doesn’t have in-built support for progress bars.\n  Conclusion This comparison demonstrates that Axios keeps the code minimal for applications that require efficient error handling or HTTP interceptions. it supports almost all modern browsers and NodeJS environments.\nOn the other hand, Fetch API isn’t far off either as a native method supported by all the major browsers (it doesn’t support IE).\nHowever, we can not stick to a single aspect in choosing the best option. Instead, you need to evaluate all these features and decide what’s best for your project based on its requirements.\nReference Axios or fetch(): Which should you use? - LogRocket Blog\nPerforming HTTP Requests: Fetch Vs Axios | by Piumi Liyana Gunawardhana\n","date":"2021-10-14T15:41:59+09:00","image":"https://youkoucoding.github.io/p/fetch-and-axios/fetch-axios-cover_hu271f897c313eb7e69e7ce19981555f26_1979892_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/fetch-and-axios/","title":"fetch and Axios"},{"content":"第二十七日 HTML #Question: 说说对影子(Shadow)DOM 的了解 Shadow DOM: A set of JavaScript APIs for attaching an encapsulated \u0026ldquo;shadow\u0026rdquo; DOM tree to an element \u0026mdash; which is rendered separately from the main document DOM \u0026mdash; and controlling associated functionality.In this way, you can keep an element\u0026rsquo;s features private, so they can be scripted and styled without the fear of collision with other parts of the document.\n shadowdom \nThere are some bits of shadow DOM terminology to be aware of:\n Shadow host: The regular DOM node that the shadow DOM is attached to. Shadow tree: The DOM tree inside the shadow DOM Shadow boundary: The place where the shadow DOM ends, and the regular DOM begins Shadow root: the root node of shadow tree  shadow Dom是html给出的一个用来封装的虚拟 DOM 与普通的 DOM 不相同，他更像伪类元素，去修饰 DOM，或者说，他是一个 DOM 的 HTML 组件，常见标签为 video 等媒体标签（这些已经封装好的标签，有对应样式）\nCSS #Question: 怎样修改 chrome 记住密码后自动填充表单的黄色背景 当记住用户名和密码后，下次填写表单时，被记住的部分会被填充为淡黄色\ninput { \u0026amp;:-webkit-autofill { box-shadow: 0 0 0px 1000px rgba(255, 255, 255, 0) inset !important; -webkit-text-fill-color: #000 !important; transition: background-color 5000s ease-in-out 0s; font-size: 14px; } } JavaScript #Question: 说说对arguments的理解，它是数组吗 THE arguments object arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.\n ES6 compatible code, the rest parameters should be preferred.\n  \u0026ldquo;Array-like\u0026rdquo; means that arguments has a length property and properties indexed from zero, but it doesn\u0026rsquo;t have Array\u0026rsquo;s built-in methods like forEach() or map().\n arguments是一个对象。\njs不能像Java一样实现重载，arguments 对象可以模拟重载。\njs中每个函数都会有arguments这个实例，它引用着函数的实参，可以用数组下标的方式\u0026quot;[]\u0026ldquo;引用arguments的元素。arguments.length为函数实参个数，arguments.callee引用函数自身。\nFeature：\n  arguments对象和Function是分不开的。\n  因为arguments这个对象不能显式创建。\n  arguments对象只有函数开始时才可用。\n  Usage：\n虽然arguments对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同: arguments[0], arguments[1]...\nReference Shadow DOM concepts - Polymer Project\nWeb Components | MDN\nThe arguments object - JavaScript | MDN\n","date":"2021-10-13T11:09:57+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/frontend-27-cover_hu3ef23944c2fce3d2d361d818b808dcd0_5137874_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-27/","title":"毎日のフロントエンド　27"},{"content":"第二十六日 HTML #Question: 解释下你对 GBK 和 UTF-8 的理解？并说说页面上产生乱码的可能原因 GBK 与 UTF-8 之区别\n GBK 编码：是指中国的中文字符，其它它包含了简体中文与繁体中文字符 UTF-8 编码：它是一种全国家通过的一种编码，如果你的网站涉及到多个国家的语言  \u0026lt;meta http-equiv=\u0026quot;Content-Type\u0026quot; content=\u0026quot;text/html; charset=utf-8\u0026quot; /\u0026gt;\nCSS #Question: 说说对 z-index 的理解 帧元素（frameset) 优先级最高 \u0026raquo;\u0026gt; 表单元素 \u0026gt; 非表单元素，即 input type=\u0026quot;radio\u0026quot; 之类的表单控件 \u0026gt; 普通的如 a,div 等元素。\n从有窗口和无窗口元素来分，有窗口元素 \u0026gt; 无窗口元素。有窗口元素如 Select 元素、Object 元素。\nz-index 属性也可以改变显示优先级，但只对同种类型的元素才有效。\nz-index z 表示三维坐标的 Z 轴。\nCSS允许我们对z-index属性设置三种值(绝对定位方案将一个元素从常规流中移除的情况下)\n auto (自动，默认值) 整数: 数值越大，元素也就越靠近观察者。 数值越小，元素看起来也就越远  如果有两个元素放在了一起，占据了二维平面上一块共同的区域，那么有着较大 z-index 值的元素就会掩盖或者阻隔有着较低 z-index 值的元素在共同区域的那一部分   inherit  Problem  当一个设置了 z-index 值的定位元素与常规文档流中的元素相互重叠的时候，谁会被置于上方？ 当定位元素与浮动元素相互重叠的时候，谁会被置于上方？ 当定位元素被嵌套在其他定位元素中时会发生什么？  Explanation  层叠上下文中的七种层叠等级 \n在一个层叠上下文中一共可以有 7 种层叠等级，列举如下：\n 背景和边框 —— 形成层叠上下文的元素的背景和边框。 层叠上下文中的最低等级 负 z-index 值 —— 层叠上下文内有着负 z-index 值的子元素 块级盒 —— 文档流中非行内非定位子元素 浮动盒 —— 非定位浮动元素 行内盒 —— 文档流中行内级别非定位子元素 z-index: 0 —— 定位元素。 这些元素形成了新的层叠上下文 正 z-index 值 —— 定位元素。 层叠上下文中的最高等级  这七个层叠等级构成了层叠次序的规则。 在层叠等级七上的元素会比在等级一至六上的元素显示地更上方（更靠近观察者）\n事实上，大多数的一切都比 z-index 为 0 的层叠等级低\nSummary 当将除了auto以外的z-index值赋给一个元素，你就创建了一个新的层叠上下文，它独立于其他的层叠上下文\n层叠上下文、层叠层和确定哪个元素在上哪个元素在下的层叠次序规则。\n定位元素(绝对定位方案将一个元素从常规流中移除的情况下)还会产生新的层叠上下文，而这整一个层叠层会显示在另一个层叠上下文中的所有层叠层的上面或者下面\nJavaScript #Question: 说说 bind、call、apply 的区别？并手写实现一个 bind 的方法 Basic rules worth remembering:\n this always refers to an object. this refers to an object which calls the function it contains. In the global context this refers to either window object or is undefined if the strict mode is used.  call 和 apply 都是为了解决改变 this 的指向, 同时执行函数。作用都是相同的，只是传参的方式不同。\n除了第一个参数外，call 可以接收一个参数列表，apply 只接受一个参数数组。 bind绑定完之后返回一个新的函数，不执行。\njs 函数是一个 Function 的对象，因此存在Function的构造函数, 和原型对象:\ncustom call The basic principle of a call function:\n Calling the prototype function call changes the pointing of this. Whatever arguments we have passed to func.call should be passed to orginal func as arg1, arg2, ... Does not cause side effect to obj(original object) and func  // Our custom newCall will be also be attached to the Function prototype // null or undefined should be replaced with the global object(or window) Function.prototype.newCall = function (context = window) { // this \u0026#34;this\u0026#34; is the function we want to use (on the chain of Function.prototype)  context.fn = this; // got the func\u0026#39;s arguments by delete the first argument, context(the context we want to refer), it is a array right now  let args = [...arguments].slice(1); // This \u0026#39;context\u0026#39; is the obj our want to refer  let result = context.fn(...args); // 执行完后,删除 should delete this property after execution  delete context.fn; // 返回函数执行后的结果  return result; }; custom apply Function.prototype.newApply = function (context = window) { context.fn = this; var result // 判断 arguments[1] 是不是 undefined  if (arguments[1]) { result = context.fn(...arguments[1]) } else { result = context.fn() } delete context.fn return result; custom bind The bind method creates and returns a new function, called a bound function. This bound function wraps the original function object.\nFunction.prototype.newBind = function (context) { if (typeof this !== \u0026#39;function\u0026#39;) { throw new TypeError(\u0026#39;Error\u0026#39;); } var _this = this; var args = [...arguments].slice(1); // 返回一个函数  return function F() { // 因为返回了一个函数，我们可以 new F()，所以需要判断  if (this instanceof F) { return new _this(...args, ...arguments); } return _this.apply(context, args.concat(...arguments)); }; }; Reference 关于 z-index 那些你不知道的事\nImplement your own — call(), apply() and bind() method in JavaScript | by Ankur Anand | Medium\n:point_up: For everyone reading this article — authors code is bad in terms of readability and performance. | by Андрей Виноградов | Medium\n","date":"2021-10-12T17:18:24+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/frontend-26-cover_hub2b0e0a9b3d3e969559f0b0b95e29f5a_1225540_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-26/","title":"毎日のフロントエンド　26"},{"content":"第二十五日 HTML #Question: 请说说\u0026lt;script\u0026gt;、\u0026lt;script async\u0026gt;和\u0026lt;script defer\u0026gt;的区别  script deference \n \u0026lt;script\u0026gt; : 加载的时候是同步的会阻塞后面代码的执行，加载立即执行 \u0026lt;script async\u0026gt;: 异步加载，加载和执行是并行的 \u0026lt;script defer\u0026gt;: 异步加载，需等到所有文档加载完才执行 async defer这两个属性无法应用于内联script  The modern websites, scripts are often \u0026ldquo;heavier\u0026rdquo; than HTML: their download size is larger, anb processing time is also longer.\n Scripts with defer never block the page Scripts with defer always execute when the DOM is ready(but before DOMContentLoaded event).  The async attribute means that a script is completely independent:\n  The browser doesn\u0026rsquo;t block on async script like defer\n  Other scripts don\u0026rsquo;t wait for async scripts, and async scripts don\u0026rsquo;t wait for them.\n  DOMContentLoaded and async scripts don\u0026rsquo;t wait for each other:\n DOMContentLoaded may happen both before an async script (if an async script finishes loading after the page is complete) \u0026hellip; or after an async script(if an async script is short or was in HTTP-cache)    In other words, async scripts load in the background and run when ready. The DOM and other scripts don\u0026rsquo;t wait for them, and they don\u0026rsquo;t wait for anything. A fully independent script that runs when loaded.\nSummary Both async and defer have one commmon thing: donwloading of such scripts don\u0026rsquo;t block page rendering.\nSo the user can read page content and get acquainted with the page immediately.\nIn practice:\n defer is used for scripts that need the whole DOM and/or their relative execution order is important. Async is used for independent scripts, like counters or ads. And their relative execution order does not matter.  CSS #Question: 在页面中的应该使用奇数还是偶数的字体？为什么呢？  尽量使用偶数字号 偶数字号容易和页面其他标签的其他属性形成比例关系  JavaScript #Question: 写一个判断设备来源的方法  current-device: The easiest way to write conditional CSS and/or JavaScript based on device operating system\n navigator.userAgent\nReference Scripts: async, defer\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-10-11T16:07:37+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/frontend-25-cover_hub2b0e0a9b3d3e969559f0b0b95e29f5a_1225540_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-25/","title":"毎日のフロントエンド　25"},{"content":"第二十四日 HTML #Question: 说说你对属性 data-的理解 data-*1 是HTML5新增的自定义属性，可以用来页面间跳转时携带数据\ndata-* 便是 HTML5 中用来存放数据的标签。使用 data-* 时，data- 之后的单词必须是小写的，但是可以用多个 - 连接。而在对应的 DOM 方法中，我们可以通过 element.dataset[属性名] 进行访问。在这里的属性名可以使用驼峰（转换规则和 vue 的组件名称转换一样）。\n相比之前的自定义属性存放数据，使用 data-* 的方法，在数据的获取上会比较方便\nCSS #Question: 有用过 CSS 预处理器吗？喜欢用哪个？原理是什么？ CSS预处理器 可使CSS具备更加简洁、适应性更强、可读性更强、层级关系更加明显、更易于代码的维护等诸多好处。 CSS 预处理器种类繁多，目前Sass、Less、用的比较多:\n 嵌套：反映层级和约束 变量和计算： 减少重复代码 Extend 和 Mixin 代码片段 (用的少) 循环：适用于复杂有规律的样式 import css 文件模块化  JavaScript #Question: 如何快速让一个数组乱序，写出来  使用array.sort()进行乱序存在一定问题，增大样本进行实验之后可以发现这种乱序方案并不是完全随机的（所有元素会大概率停留在自己的初始位置）（v8 处理排序是小于 10 个是插入排序，大于 10 个是快排，排序算法复杂度介于 O(n)与 O(n2)之间，也就是存在两个元素都没有比较的机会，因此不是完全随机），这里可以使用Fisher–Yates shuffle（洗牌算法）\n let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; arr.map((item, index) =\u0026gt; { let random = Math.floor(Math.random() * arr.length); [arr[index], arr[random]] = [arr[random], arr[index]]; }); console.log(arr); // or // return a new Array const swap = (arr, index1, index2) =\u0026gt; { [arr[index1], arr[index2]] = [arr[index2], arr[index1]]; }; function shuffle(arr = []) { if (!Array.isArray(arr)) return; let index = arr.length - 1; for (; index \u0026gt;= 0; index--) { const randomIndex = Math.floor(Math.random() * (index + 1)); swap(arr, index, randomIndex); } } 补充知识： js AST2\nReference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n  使用数据属性 | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n AST 抽象语法树——最基础的 javascript 重点知识 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-10-09T23:29:09+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/frontend-24-cover_hu222858ab530288e88b08f54051c87ec5_5986659_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-24/","title":"毎日のフロントエンド　24"},{"content":"Currying in JavaSctipt Functional programming is a style of programming that attempts to pass functions as arguments(callbacks) and return functions without side-effects(changes to the program\u0026rsquo;s state).\nSo many languages adopted this programming style. Javascript, Haskell, Erlang, Clojure, and Scala are the most popular among them.\nAnd with its ability to pass the return functions, it brought so many conscepts: Pure Functions, Currying, Higher-Order functions.\nWhat is Currying? Currying is a process in functionnal programming in which we can transform a function with multiple arguments into a sequence of nesting functions. It returns a new functon that expects the next argument inline.\nCurrying doesn\u0026rsquo;t call a function. It just transforms it.\n只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\nIt keeps returning a new function (that expects the current argument) until all the arguments are exhausted. The arguments are kept alive(via closure) and all are used in execution when the final function tin the currying chain is returnd and executed.\nCurrying is the process of turning a function with mutiple arity(the number of arguments of operator taken by a function) into a function with less arity. function fn(a, b) {} // 2-arity function SO, currying transforms a function with multiple arguments into a sequence/series of functions each taking single argument.\nCurrying is a transformation of functions that translates a function from callbale as f(a, b, c) into callable as f(a)(b)(c).\nExample:\nWe\u0026rsquo;ll create a helper function curry(fn) that performs currying for a two-argument fn. In other words, curry(fn) for two-argument fn(a, b) translates it into a function that runs as fn(a)(b):\n// curry(fn) does the currying transform function curry(fn) { return function (a) { return function (b) { return fn(a, b); }; }; } //usage function sum(a, b) { return a + b; } let curriedSum = curry(sum); console.log(curriedSum(1)(2)); // 3 As you see the implementation is straightforward: Just two wrapper\n  The result of curry(fn) is a wrapper function(a)\n  When it is called like curriedSum(1), the argument is saved in the Lexical Environment1, and a new wrapper is returned function(b)\n   Then this wrapper is called with 2 as an argument, and it passes the call to the original sum.  _lodash More advanced implementations of currying, such as _.curry from lodash library, return a wrapper that allows a function to be called both normally and partially:\nfunction sum(a, b) { return a + b; } // using _.curry from lodash library let curriedSum = _.curry(sum); console.log(curriedSum(1, 2)); // 3, still callable normally console.log(curriedSum(1)(2)); // 3, called partially What for? For instance, we have the logging function log(date, importance, message) that formats and outputs the information. In real projects such functions have many useful features like sending logs over the network, here we\u0026rsquo;ll just use alert:\nfunction log(date, importance, message) { alert(`[${date.getHours()}:${date.getMinutes()}][${importance}]${message}`); }  // curry it log = _.curry(log);  // how it works  log(new Date(), \u0026#39;DEBUG\u0026#39;, \u0026#39;some bugs\u0026#39;); // log(a, b, c)  log(new Date())(\u0026#39;DEBUG\u0026#39;)(\u0026#39;some bugs\u0026#39;); //log(a)(b)(c)  // Usage // logNow will be the partial of log with fixed first argument let logNow = log(new Date()); // use it logNow(\u0026#39;INFO\u0026#39;, \u0026#39;message\u0026#39;); // [HH:mm] INFO message Now logNow is log with first argument, in other words \u0026ldquo;partially applied function\u0026rdquo; or \u0026ldquo;partial\u0026rdquo; for short.\nWe can go further and make a convenience function for current debug logs:\nlet debugNow = logNow(\u0026#39;DEBUG\u0026#39;); debugNow(\u0026#39;message\u0026#39;); // [HH:mm] DEBUG message  We didn\u0026rsquo;t lose anyhing after currying: log is still callable normally We can easily generate partial functions such as for today log.  Advanced curry implementation function curry(func) { return function curried(...args) { if (args.length \u0026gt;= func.length) { return func.apply(this, args); } else { return function (...args2) { return curried.apply(this, args.concat(args2)); }; } }; } // usage  function sum(a, b, c) { return a + b + c; } let curriedSum = curry(sum); alert(curriedSum(1, 2, 3)); // 6, still callable normally alert(curriedSum(1)(2, 3)); // 6, currying of 1st arg alert(curriedSum(1)(2)(3)); // 6, full currying  Function.length: The length property indicates the number of parameters expected by the function.\n  If passed args count is the same or more than the orignal function has in its definition (func.length), then just pass the call to it using func.apply Otherwise, get a partial: we don\u0026rsquo;t call func just yet. Instead, another wrapper is returned, that will re-apply curried providing previous arguments together with the new ones.  Thenm if we call it, again we\u0026rsquo;ll get either a new partial (if not enough arguments) or, finally, the result.\nWhen Currying comes in handy when you want to:\n  Write little code modules that can be reused and configured with ease, much like what we do with npm.\n  Avoid frequently calling a function with the same argument.\n  Summary Currying is a transform that makes fn(a,b,c) callbale as fn(a)(b)(c). JavaScript implementations usually both keep the function callable normally and return the partial if the arguments count is not enough.\nCurrying allows us to easily get partials. As we\u0026rsquo;ve seen in the logging example, after currying the three argement unniversal function log(date, importance, message) gives us partials when called with one argument or two arguments(log(date, importance)).\nReference Currying\nカリー化\n柯里化（curry） · 函数式编程指北\n  Lexical Environment — The hidden part to understand Closures | by Amandeep Singh | Medium\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-10-09T15:24:26+09:00","image":"https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/currying-cover_hue1762bd7bcdba537e8cb251ce52f9c58_32211_120x120_fill_box_smart1_3.png","permalink":"https://youkoucoding.github.io/p/currying-in-javascript-%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96-%E6%9F%AF%E9%87%8C%E5%8C%96/","title":"Currying in JavaScript (カリー化 \u0026 柯里化)"},{"content":"第二十三日 HTML #Question: 关于\u0026lt;form\u0026gt;标签的 enctype 属性你有哪些了解 form 标签的 enctype(是表单提交属性之一) 属性指定将数据回发到服务器时浏览器如果对表单数据进行编码，其有三种编码形式\n当 method 属性值为 post 时，enctype 就是将表单的内容提交给服务器的 MIME1 类型 。可能的取值有：\n  application/x-www-form-urlencoded：未指定属性时的默认值\n application/x-www-form-urlencoded 编码类型会将表单中发送到服务器之前都会进行编码(空格转换为 \u0026ldquo;+\u0026rdquo; 加号，特殊符号转换为 ASCII HEX 值)，数据编码成键值对的形式，当表单的 action 为 post 时，它会把 form 数据封装到 http body 中，然后发送到服务器； 当表单的 action 为 get 时，它会把表单中发送的数据转换成一个字符串(如：a=1\u0026amp;b=2\u0026amp;c=3)并使用?连接到 url 后面。在不指定 enctype 属性时 application/x-www-form-urlencoded 是默认属性    multipart/form-data: 不对字符进行编码，在使用包含文件(如图片、mp4 等文件)上传控件的表单时必须使用该值\n  text/plain: 数据以纯文本格式进行编码，空格转换为 \u0026ldquo;+\u0026rdquo; 加号，但不对特殊字符编码\n  Example:\n\u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; enctype=\u0026#34;application/x-www-form-urlencoded\u0026#34;\u0026gt; First name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;fname\u0026#34; /\u0026gt; Last name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;lname\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; 以上代码说明如下：\n form 的提交行为需要通过 type=submit 实现 form 中的 method 属性不指定时，默认的提交方式为 get 请求，那么也就是说如果不指定 method 为 post，那么是不会使用 enctype 属性的。 form 表单的 enctype 属性是 application/x-www-form-urlencoded  CSS #Question: 说说 CSS 的优先级是如何计算的 选择器种类 严格来讲，选择器的种类可以分为三种：标签名选择器、类选择器 和 ID 选择器。而所谓的后代选择器和群组选择器只不过是对前三种选择器的扩展应用。而 在标签内写入 style=\u0026quot;\u0026quot; 的方式，应该是CSS的一种引入方式，而不是选择器，因为根本就没有用到选择器。而一般人们将上面这几种方式结合在一起，所 以就有了 5 种或 6 种选择器了。\n三种基本的选择器类型\n 标签名选择器，如：p{}，即直接使用 HTML 标签作为选择器 类选择器，如 .polaris{} ID 选择器，如 #polaris{}    伪类，属性选择器特指度等同于类 伪元素特指度等同于标签名选择器   扩展选择器\n 后代选择器，如 .polaris span img{}，后代选择器实际上是使用多个选择器加上中间的空格来找到具体的要控制标签。 群组选择器，如 div,span,img{}，群组选择器实际上是对 CSS 的一种简化写法，只不过把有相同定义的不同选择器放在一起，省了很多代码  特指度-优先级计算 特指度（specificity）。特指度表示一个 css 选择器表达式的重要程度，可以通过一个公式来计算出一个数值，数越大，越重要。这个计算叫做“I-C-E”计算公式，\nI——Id; 100 C——Class; 10 E——Element; 1 即，针对一个 css 选择器表达式，遇到一个id就往特指度数值中加100，遇到一个class就往特指度数值中加10，遇到一个element就往特指度数值中加1\n result-specificity \n!important 优先级最高，高于上面一切。* 选择器最低，低于一切。\n后代选择器的定位原则 浏览器 CSS 匹配不是从左到右进行查找，而是从右到左进行查找。比如 div #div Box p span.red{color:red;}，浏览器的查找顺序如下：\n 先查找 html 中所有 class=\u0026lsquo;red\u0026rsquo; 的 span 元素 找到后，再查找其父辈元素中是否有 p 元素，再判断 p 的父元素中是否有 id 为 divBox 的 div 元素，如果都存在则匹配上。  浏览器从右到左进行查找的好处是为了尽早过滤掉一些无关的样式规则和元素。\n简洁、高效的 CSS 所谓高效的 CSS 就是让浏览器在查找 style 匹配的元素的时候尽量进行少的查找\n下面列出一些常见问题：\n  不要在ID选择器前使用标签名\n 一般写法：div #div Box 更好写法：#div Box 解释： 因为ID选择器是唯一的，加上 div 反而增加不必要的匹配。    不要在 class选择器 前使用标签名\n  一般写法：span.red\n  更好写法：.red\n  解释：同第一条，但如果你定义了多个.red，而且在不同的元素下是样式不一样，则不能去掉，比如你 css 文件中定义如下：\n p.red{color:red;} span.red{color:#ff00ff} 如果是这样定义的就不要去掉，去掉后就会混淆，不过建议最好不要这样写。      尽量少使用层级关系\n 一般写法：#divBox p .red{color:red;} 更好写法：.red{..}    使用 class 代替层级关系\n 一般写法：#divBox ul li a{display:block;} 更好写法：.block{display:block;}     !important\u0026gt;id\u0026gt;class\u0026gt;tag\u0026gt;*\n JavaScript #Question: 0.1 + 0.2、0.1 + 0.3 和 0.1 \\* 0.2 分别等于多少？并解释下为什么 EcmaScrpt规范定义 Number 的类型遵循了 IEEE754-2008 中的 64 位浮点数规则定义的小数后的有效位数至多为 52 位导致计算出现精度丢失问题\n0.1 + 0.2 != 0.3; 解决这个问题；使用原生最简单的方法:\nparseFloat((0.1 + 0.2).toFixed(10)) === 0.3; //true   parseFloat(string) function parses an argument(converting it to a string first if needed) and returns a floating point number or NaN when the first non-whitespace character cannot be converted to a number.\n  The numObj.toFixed(digits) method formats a number using fixed-point notation.\n Parameter:digits (Optional) :The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0. RETURN VALUE:A string representing the given number using fixed-point notation.    Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n  Media type - Wikipedia\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-10-08T22:28:15+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/frontend-23-cover_hu222858ab530288e88b08f54051c87ec5_5986659_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-23/","title":"毎日のフロントエンド　23"},{"content":"1. Quick console.log() Get rid of writing console.log again and again and make it shorter by using the following code snippet.\nlet clog = console.log.bind(document); clog(\u0026#39;This will be printed in console.\u0026#39;); clog(123); // 123 2. Sprend Operator The spread operator is a new addition t othe set of operators in ES6. It takes an iterable object(e.g array) and expands it into individual elements. Below is an example code of spread operator usage.\n// Spread Operator  // Array COncatination  let num_one = [1, 2, 3]; let num_two = [4, 5, 6]; let concat = [...num_one, ...num_two]; console.log(concat); // [1,2,3,4,5,6]  // Copying An Array  let alpha = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]; let alpha_copy = [...alpha]; console.log(alpha_copy); // [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]  // Array literals let data = [100, 200]; let literal = [...data, 300, 400, 500]; console.log(literal); // [100, 200,300,400,500,600] 3. Truncating any Array Do you know the length method not only show you the size of a String but also truncates your array in any size? Check the below code example:\n// Truncating an array  let arr = [100, 200, 300, 400, 500, 600]; // make size 3  arr.length = 3; console.log(arr); // [100, 200, 300]  arr.length = 0; console.log(arr); // [] 4. Smart Replacing This tip will save you time by using loops to replace words in long string data. We will use repace() method in JavaScript which takes two parameters one is the regex of a word that you want to replace and the second is the new word.\nThis comes in handy when you working on big Text data and you want to replace specific words with some new words. Check out the below code example for better understanding.\n// Smart Replacing  var str = \u0026#39;This is potato and potato\u0026#39;; console.log(str.replace(/pot/, \u0026#39;tom\u0026#39;)); // This is tomato and potato  console.log(str.replace(/pot/g, \u0026#39;tom\u0026#39;)); // This is tomato and tomato 5. Numerical Separator This simple tip will increase the readability of your big number of data in JavaScript. We will use \u0026quot;_\u0026quot; as a numberical sepatator. Check out the below code example.\nlet data1 = 100300400; let data2 = 100_300_400; console.log(data2); //100300400;  console.log(data1 === data2); // true 6. Quick Power Calculation You probably use Math.pow() method to calculate the power of any number. This trick will calculate the power in the quick form by using regular math ways.\n// Normal way  console.log(Math.pow(2, 3)); // 8  // Quick way console.log(2 ** 3); // 8 7. Rest Parameter Rest Parameter syntax is used to handle the infinite number of parameters in the function definition. Below example code will clear you understanding of how useful is rest of parameter is:\nfunction sum(...num) { let cal = 0; for (let a of num) { cal += a; } console.log(cal); } sum(2, 3, 4, 5, 6, 7); // 27 8. Reverse Any String This trick will reverse any String datra without using any loop. Take a look at the below example code.\n// Reverse any string  const reverse = (string) =\u0026gt; string.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;); console.log(reverse(\u0026#39;Typescript\u0026#39;)); // tpircsepyT 9. Destructuring Destructuring is a JavaScript expression that allows to unpact values from arrays and bind them to variables.\n// Destructing // Normal way function fun() { return [2, 4, 6]; } let d = fun(); let x = d[0]; let y = d[1]; let z = d[2]; console.log(x, y, z); // 2 4 6 // destruting way let [x, y, z] = fun(); console.log(x, y, z); // 2 4 6 // Destructing Swaping a = 4; b = (2)[(a, b)] = [b, a]; console.log(a, b); // 4 2 Continuing\u0026hellip; ","date":"2021-10-08T00:47:26+09:00","image":"https://youkoucoding.github.io/p/javascript-tips-and-tricks/tip-trick-js_hubaf4dc5cab76a9282821ed15d3c95684_1084335_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/javascript-tips-and-tricks/","title":"JavaScript Tips and Tricks"},{"content":"第二十二日 HTML #Question: js放在html的\u0026lt;body\u0026gt;和\u0026lt;head\u0026gt;有什么区别  在浏览器渲染页面之前，它需要通过解析HTML标记然后构建DOM树。在这个过程中，如果解析器遇到了一个脚本(script)，它就会停下来，并且执行这个脚本，然后才会继续解析 HTML。如果遇到了一个引用外部资源的脚本(script)，它就必须停下来等待这个脚本资源的下载，而这个行为会导致一个或者多个的网络往返，并且会延迟页面的首次渲染时间\n  外部引入的脚本(script)会阻塞浏览器的并行下载\n  浏览器解析HTML顺序1\n   js 放在 \u0026lt;head\u0026gt; 中，如果不添加 async 或者 defer 时，当浏览器遇到 script 时，会阻塞 DOM 树的构建，进而影响页面的加载。当 js 文件较多时，页面白屏的时间也会变长。\n  把 js 放到 \u0026lt;body\u0026gt; 里（一般在 \u0026lt;/body\u0026gt; 的上面）时，由于 DOM 是顺序解析的，因此 js 不会阻塞 DOM 的解析。对于必须要在 DOM 解析前就要加载的 js，我们需要放在 \u0026lt;head\u0026gt; 中。\n  一般情况下是在网站中，同步在 \u0026lt;head\u0026gt; 加载的脚本通常是业务必须的，比如说我要注册一个 window 对象，或者用 document.write 写入一些内容，或者是业务需求，我们可以用 head 来做加载:头部给 script 标签加入 async 的属性，表示它是异步加载的脚本，不会对 html 进行阻塞，这也是大部分网站的做法\n  Conclusion   对于必须要在 DOM 加载之前运行的 JavaScript 脚本，我们需要把这些脚本放置在页面的 head 中，而不是通过外部引用的方式，因为外部的引用增加了网络的请求次数；并且我们要确保内敛的这些 JavaScript 脚本是很小的，最好是压缩过的，并且执行的速度很快，不会造成浏览器渲染的阻塞\n  对于支持使用 script 标签的 async 和 defer 属性的浏览器，我们可以使用这两个属性；其中需要注意的点就是，async 表示的意思是异步加载 JavaScript 文件，它的下载过程可以在 HTML 的解析过程中进行，加载完成之后立即执行这个文件的代码，执行文件代码的过程中会阻塞 HTML 的解析，它不保证文件加载的顺序。defer 表示的意思是在 HTML 文档解析之后在执行加载完成的 JavaScript 文件，JavaScript 文件的下载过程可以在 HTML 的解析过程中进行，它是按照 script 标签的先后顺序来加载文件的。更多详细的解释可以参考 async vs defer attributes2\n  CSS #Question: 说说浏览器解析 CSS 选择器的过程 从上到下，从右到左\n因为从左到右，首先浏览器会遍历你最左边的选择器，可能是div，可能是span，我需要在整个页面去把匹配成功的 dom 找出来，可以说是海底捞针，但是从右到左不一样了，它通过具体的遍历条件去寻找一个最匹配的值，查找之后在向上查询，是否符合自己的选择器规则，才最后匹配成功；\n前者会浪费大量的遍历时间，造成大量错误的匹配结果\n.class ul li span { // css 属性 } /* 从右向左开始解析。因为一般来说，最右侧的节点范围反而会比较大，越向左限定的条件就越多。也因此 CSS 的选择器设计上不宜嵌套过多，会带来性能上的问题。 */ JavaScript #Question: 你对 new 操作符的理解是什么？手动实现一个 new 方法 new operator The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.\n new 运算符创建一个用户定义的对象类型的实例 或 具有构造函数的内置对象类型\n new constructor[([arguments])]\nDescription The new keyword does the following things:\n Creates a blank, plain JavaScript object ({}) Adds a property to the new object __proto__ that links to the constructor function\u0026rsquo;s prototype object Blinds the newly created object instance as the this context( all references to this in the constructor function now refer to the object created in the first step). Returns this if the doesn\u0026rsquo;t return an object    创建一个新对象，即 {} 把新对象的原型指向构造函数的 prototype 把构造函数里的 this 指向新对象 返回这个新对象   function Foo(bar1, bar2) { this.bar1 = bar1; this.bar2 = bar2; } var myFoo = new Foo(\u0026#39;Bar 1\u0026#39;, 2021); When the code new Foo(...) is executed, the following things happen:\n A new object is created, inheriting from Foo.prototype the constructor function Foo is called with specified arguments, and with this bound to newly created object. new Foo is equivalent to new Foo(), if no argument list is specified, Foo is called without argument. The object (not null, false 123 or other primitive types) returned by the constructor function becomes the result of the whole new  expression. If the constructor function doesn\u0026rsquo;t explicitly return an object, the object created in step one is used instead (normally constructors don\u0026rsquo;t return a value, but they can choose to do so if they want to override the normal object creation process.)  Simulation new operator function _new() { // 1. 创建一个新对象  var newObj = {}; // 得到构造函数, 并调用 shift 得到数组的第一个参数，并且会改变元数组  var Con = [].shift.call(arguments); // 2. 把新对象的原型指向构造函数的prototype  newObj.__proto__ = Con.prototype; // 3. 把构造函数里的this指向新对象  var res = Con.apply(newObj, arguments); // 4. 返回新对象  return typeof res === \u0026#39;object\u0026#39; ? res : newObj; } var obj = _new(constructorFunction, \u0026#39;willian\u0026#39;, 18); console.log(obj.name, obj.age); //\u0026#39;willian\u0026#39;, 18 console.log(obj.say()); //Hello willian  arguments 对象来获取传入的所有参数 arguments 对象是所有（非箭头）函数中都可用的局部变量 可以使用 arguments 对象在函数中引用函数的参数 The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.   // method Two  function _new(fn, ...arg) { //将创建的对象的原型指向构造函数的原型 ==\u0026gt; 新对象.__proto__(原型) == fn.prototype  const obj = Object.create(fn.prototype); // 将this指向新对象  const ret = fn.apply(obj, arg); //判断返回值 （如果构造函数本身有返回值且是对象类型，就返回本身的返回值，如果没有才返回新对象）  return ret instanceof Object ? ret : obj; } Reference 移除会阻止内容呈现的 JavaScript | PageSpeed Insights | Google Developers\nAll about . In this article, you’ll learn about… | by Oussema Miled | Level Up Coding\n  只谈 js 文件和 html dom 标签\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n async vs defer attributes - Growing with the Web\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-10-07T11:06:55+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/frontend-22-cover_huc48bd7c2810154bf160cdacfc9e33827_11234475_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-22/","title":"毎日のフロントエンド　22"},{"content":"第二十一日 HTMl #Question: 谈谈对input元素中readonly和disabled属性的理解 相同点：\n 都会使文本框变成只读，不可编辑  不同点：\n disabled 属性在将 input 文本框变成只读不可编辑的同时，还会使文本框变灰, 不允许填写和使用,但是readonly不会 disabled 属性修饰后的文本框内容，在不可编辑的同时，通过 js 也是获取不到的。但是用 readonly 修饰后的文本框内容，是可以通过 js 获取到的，也就只是简单的不可编辑而已 disabled 属性对 input 文本框，单选 radio, 多选 checkbox 都适用，但是 readonly 就不适用，用它修饰后的单选以及多选按钮仍然是可以编辑状态的。(readonly只针对input和textarea有效，而 disabled 对于所有的表单元素都有效) readonly 直译为 “只读”，一般用于只允许用户填写一次的信息，提交过一次之后，就不允许再次修改了 disabled 的数据是不会被获取和上传，readonly 的数据会被获取和上传  Summary：\n readonly：不可编辑、可复制、可选择、可以接收焦点但不能被修改，后台会接收到传值 disabled：不可编辑、不可复制、不可选择、不能接收焦点，后台也不会接收到传值  CSS #Question: 说说对line-height是如何理解的？ line-height\nThe line-height CSS property sets the height of a line box. It\u0026rsquo;s commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On ono-replaced inline elements, it specifies the height that is used to calculate line box height1.\nline-height 在日常用的最多的是让单行文字垂直居中（其实不需要设置 height，一个 line-height 即可）。\nline-height - font-size 为行距，一般会近似平分到文字的上下两边，使文字看上去垂直居中。如果需要多行文字的垂直居中，还需要加上 vertical-align: middle;\nline-height 可以不设置单位，表示 font-size 的倍数\n对于非替换元素的纯内联元素，其高度是由 line-height 所决定的\nJavaScript #Question: 写一个方法验证是否为中文2 //使用的Unicode 编码 4e00 和 9fa5 分别表示第一个汉字和最后一个汉字的编码 function isChinese(str) { const reg = /^[\\u4e00-\\u9fa5]+$/; return reg.test(str); } Reference CSS 深入理解之 line-height\n  line-height - CSS: Cascading Style Sheets | MDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 中文字符对应编写正则\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-10-06T12:26:28+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/frontend-21-cover_huc48bd7c2810154bf160cdacfc9e33827_11234475_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-21/","title":"毎日のフロントエンド　21"},{"content":"第二十日 HTML #Question: 请描述 HTML 元素的显示优先级 在 html 中，帧元素（frameset）的优先级最高(已不提倡使用)，表单元素比非表单元素的优先级要高。\nframeset \u0026gt; 表单元素 \u0026gt; 非表单元素\n 表单元素:  文本输入框，密码输入框，单选框，复选框，文本输入域，列表框等等   非表单元素:  a，div, table, span 等等    有窗口元素比无窗口元素的优先级高\n 有窗口元素:  select 元素，object 元素，以及 frames 元素等等   无窗口元素:  大部分 html 元素都是无窗口元素    CSS #Question: 要让 Chrome 支持小于 12px 的文字怎么做？ Chrome 中有最小字号的限制，一般为 12px。原因是 Chrome 认为小于这个字号会影响阅读。\n当需要小于 12px 字体的时候，有以下几个方法可以使用。\n-webkit-text-size-adjust:none; 这个属性在高版本的 Chrome 中已经被废除。\n使用 transform: scale(0.5, 0.5);，但使用 transform 需要注意下面几点：\n transform 对行内元素无效，因此要么使用 display: block; 要么使用 display: inline-block; transform 即使进行了缩放，原来元素还是会占据对应的位置。因此需要做调整，最好是在外面再包一层元素，以免影响其他元素 使用图片   最方便是切图\n JavaScript #Question: 写一个验证身份证号的方法  身份证号码的组成：地址码 6 位+年份码 4 位+月份码 2 位+日期码 2 位+顺序码 3 位+校验码 1 位\n function check(val) { let reg = /^[1-9]\\d{5}(19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|(10|20|30|31))\\d{3}[0-9Xx]$/; return reg.test(val); // regexObj.test(str) return a boolean } Reference HTML 元素的显示优先级 - 简书\nIssue #68 haizlin/fe-interview\n","date":"2021-10-05T11:27:36+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/frontend-20-cover_hu09694cb8c91ec91d790cd17efc7e5c81_1496438_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-20/","title":"毎日のフロントエンド　20"},{"content":"第十九日 HTML #Question: 说说你对HTML中的置换元素和非置换元素的理解 置换元素（Replaced Element）  简单来说，置换元素可以设置宽 高,他们有自己的属性，和 inline-block 有一样的属性\n   主要是指 img、input、textarea、select、object 等这类默认就有 CSS 格式化外表范围的元素。\n  浏览器根据元素的标签和属性，来决定元素的具体显示内容\n 如：浏览器根据标签的 src 属性显示图片。根据 type 属性决定显示输入框还是按钮    非置换元素（non-Replaced Element）   就是除了 img、input、textarea、select、object 等置换元素以外的元素\n  内容直接展示给浏览器。例如标签，标签里的内容会被浏览器直接显示给用户\n  CSS #Question: CSS的属性content有什么作用呢？有哪些场景可以用到 :before 和 :after  默认 display: inline; 必须设置 content 属性，否则一切都是无用功， content 属性也只能应用在 :before 和 :after 伪元素上 默认 user-select: none;，就是 :before 和 :after 的内容无法被用户选中 伪元素可以和伪类结合使用形如：.target:hover:after :before 和 :after 是在 CSS2 中提出来的，所以兼容 IE8 ::before 和 ::after 是 CSS3 中的写法，为了将伪类和伪元素区分开 不可通过 DOM 使用，它只是纯粹的表象。在特殊情况下，从一个访问的角度来看，当前屏幕阅读不支持生成的内容  content 定义用法 content 属性与 :before 及 :after 伪元素配合使用，在元素头或尾部来插入生成内容\ncontent: normal /* Keywords that cannot be combined with other values */ content: none content: \u0026#39;prefix\u0026#39; /* \u0026lt;string\u0026gt; value, non-latin characters must be encoded e.g. \\00A0 for \u0026amp;nbsp; */ content: url(http://www.example.com/test.html) /* \u0026lt;uri\u0026gt; value */ content: chapter_counter /* \u0026lt;counter\u0026gt; values */ content: attr(value string) /* attr() value linked to the HTML attribute value */ content: open-quote /* Language- and position-dependant keywords */ content: close-quote content: no-open-quote content: no-close-quote content: open-quote chapter_counter /* Except for normal and none, several values can be used simultaneously */ content: inherit JavaScript #Question: attribute 和 property 有什么不同   property是 DOM 中的属性，是 JavaScript 里的对象\n JavaScript の世界の住人 扱いやすいようにパースされている 動的（なこともある） element.property 例：p.className $().prop 可以读取标签自带属性，包括没有写出来的 不能读取 attribute 设置的属性 是元素（对象）的属性    attribute 是 HTML 标签上的特性，它的值只能是字符串,直接在 html 标签添加的都是attribute属性\n HTML の世界の住人 HTML に書いたものがそのまま出る 静的 get/setAttribute() 例如：a.getAttribute('href') $().attr 不能读取 property 设置的属性    Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\nAttribute と Property - Qiita\n","date":"2021-10-04T15:37:26+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/frontend-19-cover_hu09694cb8c91ec91d790cd17efc7e5c81_1496438_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-19/","title":"毎日のフロントエンド　19"},{"content":"第十八日 HTML #Question: 怎样在页面上实现一个圆形的可点击区域？  用 canvas 画布，弧线画圆，然后计算鼠标的坐标是否落在圆内 利用 SVG 作出圆形，然后添加点击事件 用一个 div,给 div 添加圆角属性50%，在 div 上添加点击事件 利用 \u0026lt;map\u0026gt; 和 \u0026lt;area\u0026gt; 标签设置圆形点击区域\u0026lt;area\u0026gt; \u0026amp; \u0026lt;map\u0026gt; 1  \u0026lt;!-- svg 圆 --\u0026gt; \u0026lt;svg width=\u0026#34;100%\u0026#34; height=\u0026#34;100%\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; \u0026gt; \u0026lt;circle cx=\u0026#34;100\u0026#34; cy=\u0026#34;50\u0026#34; r=\u0026#34;40\u0026#34; stroke=\u0026#34;black\u0026#34; stroke-width=\u0026#34;2\u0026#34; fill=\u0026#34;red\u0026#34; onclick=\u0026#34;alert(3)\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; CSS #Question: 什么是 FOUC？ 如何避免 FOUC 的？ FOUC 浏览器样式闪烁\nFOUC 即 Flash of Unstyled Content，是指页面一开始以样式 A（或无样式）的渲染，突然变成样式 B。原因是样式表的晚于 HTML 加载导致页面重新进行绘制。\n产生原因\n 通过 @import 方式导入CSS style 标签在 body 中或底部 有几个样式表，放在html结构的不同位置  解决方案： 把 link 标签将样式放在 head 中\nJavaScript #Question: 你理解的use strict, 是什么?使用它有什么优缺点？ 由于历史原因 JavaScript 在错误提示方面做的并不完善。比如允许定义未声明的变量、不允许使用八进制数字、不允许函数参数重名、不允许删除不可删除的属性。\nPros:\n 消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为 消除代码运行的一些不安全之处，保证代码运行的安全 提高编译器效率，增加运行速度 为未来新版本的 Javascript 做好铺垫 use strict 2  Strict mode makes several changes to normal JavaScript semantics:\n Eliminates some JavaScript silent errors by changing them to throw errors. Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that\u0026rsquo;s not strict mode. Prohibits some syntax likely to be defined in future version of ECMAscript.  Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\nStrict mode - JavaScript | MDN\n  HTML area map 标签及在实际开发中的应用\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n JavaScript 严格模式(use strict) | 菜鸟教程\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-10-02T23:10:17+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/frontend-18-cover_hub96c76990577e7009ecebb4d858ed434_3670530_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-18/","title":"毎日のフロントエンド　18"},{"content":"第十七日 HTML #Question: 你认为 table 的作用和优缺点是什么呢？  优点：特定的布局时，可以很块完成布局，样式好控制，特别是居中、对齐。 缺点：结构比较繁杂，非常多的 DOM 节点，会导致页面加载变慢、不利于 SEO，相对于目前比较流行的布局来讲。如 flex，div+css，grid 等 作用：以前用来布局和展示表格，现在一般只用来展示表格  CSS #Question: 解释下 CSS sprites 的原理和优缺点分别是什么？  简介  CSS Sprites 是一种网页图片应用处理方式。它允许将一个页面涉及到的所有零星图片都包含到一张大图中， 利用 CSS 的background-image，background- repeat，background-position的组合进行背景定位， 访问页面时避免图片载入缓慢的现象。\n优点    CSS Sprites能很好地减少网页的 http 请求，从而大大的提高页面的性能，这是 CSS Sprites 最大的优点，也是其被广泛传播和应用的主要原因；\n  CSS Sprites能减少图片的字节；\n  CSS Sprites解决了网页设计师在图片命名上的困扰，只需对一张集合的图片命名，不需要对每一个小图片进行命名，从而提高了网页制作效率。\n  CSS Sprites只需要修改一张或少张图片的颜色或样式来改变整个网页的风格。\n  缺点    图片合并麻烦：图片合并时，需要把多张图片有序的合理的合并成一张图片，并留好足够的空间防止版块出现不必要的背景。\n  图片适应性差：在高分辨的屏幕下自适应页面，若图片不够宽会出现背景断裂。\n  图片定位繁琐：开发时需要通过工具测量计算每个背景单元的精确位置。\n  可维护性差：页面背景需要少许改动，可能要修改部分或整张已合并的图片，进而要改动 css。在避免改动图片的前提下，又只能（最好）往下追加图片，但这样增加了图片字节。\n  JavaScript #Question: typeof('abc') 和 typeof 'abc'都是 string, 那么 typeof 是操作符还是函数？ typeof 是操作符，不是函数。可以添加括号，但是括号的作用是进行分组而非函数的调用。 作用是对后方表达式的返回做类型定义。在后面添加括号其实是改变计算优先级，和四则运算中的括号可以等效理解。\ntypeof 123; //\u0026#34;number\u0026#34; typeof 123 + \u0026#39;abc\u0026#39;; // \u0026#34;numberabc\u0026#34; typeof (123 + \u0026#39;abc\u0026#39;); // \u0026#34;string\u0026#34; Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-10-01T23:29:44+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/frontend-17-cover_hub96c76990577e7009ecebb4d858ed434_3670530_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-17/","title":"毎日のフロントエンド　17"},{"content":"useState: 执行副作用 副作用的定义 通常，副作用是指一段和当前执行结果无关的代码。比如说要修改函数外部的某个变凉，或者发起一个请求等。 在函数组建本次执行中，useEffect 中代码的执行是不影响渲染出来的 UI。\nSide effects are all the operations that affect your componet and can\u0026rsquo;t be done during rendering. Things like fetching data, subscriptions or manually changing the DOM are all examples of side effects.\nUsage useEffect(callback, dependencies);   callback, 要执行的回调函数；\n  dependencies 可选的依赖项数组。可选， 如果没有依赖项，callback 在函数组建每次执行完成之后都执行;如果依赖项是空数组，则只在第一渲染时实行回调函数； 如果指定依赖项，则在依赖项变化时才执行 callback\n  useEffect 是每次组件 render 结束后，判断依赖项并执行。\n   No dependencies array: the function runs after every render Empty dependencies array: the function runs only after the first render (use this for the stuff it\u0026rsquo;s doing will never get stale) Dependencies array with some values: the function runs only if any of those values change 此外，useEffect 允许返回一个函数，用与在组件销毁时，做一些清理操作，防止内存泄漏。 例如，移除监听事件。 类似于 类组件中的 componentWillUnmount   function MyComponent() { React.useEffect(() =\u0026gt; { // I need to do this just once, after the first render  }, []); React.useEffect(() =\u0026gt; { // But this other thing needs to be done after every render  }); return ... }  import React, { useState, useEffect } from \u0026#39;react\u0026#39;; function BlogView({ id }) { // local state to preserve the blog content  const [blog, setBlog] = useState(null); useEffect(() =\u0026gt; { // useEffect 的 callback 要避免直接使用 async， 需要进行封装  const doAsynv = async () =\u0026gt; { // 当 ID 发生变化时，将当前博客清除， 以保持内容的一致性  setBlog(null); // 发起请求，获取数据  const res = await fetch(\u0026#39;/blog-content/${id}\u0026#39;); // 将数据存入 state  setBlog(await res.text); }; doAsync(); }, [id]); const isLoading = !blog; return \u0026lt;div\u0026gt;{isLoading ? \u0026#39;loading...\u0026#39; : blog}\u0026lt;/div\u0026gt;; }  Attention: If you use the dependencies array, make sure it includes all values from the component scope (such as props and state) that change over time and that are used by the effect. If you\u0026rsquo;ve forgotten a value or thinked that you don\u0026rsquo;t need it in the array, you will produce bugs, because your code will reference stale values from previous renders.\n Something More about useEffect   使用多个 useEffect, 可以实现关注点分离，即将不相关的逻辑分离到不同的 useEffect 中\n  函数适合放在 effect 内部还是外部？\n  推荐的方案:函数在 useEffect 内部, 如下：\nfunction ProductPage({ productId }) { const [product, setProduct] = useState(null); useEffect(() =\u0026gt; { // 把这个函数移动到 effect 内部后，我们可以清楚地看到它用到的值。  async function fetchProduct() { const response = await fetch(\u0026#39;http://myapi/product/\u0026#39; + productId); const json = await response.json(); setProduct(json); } fetchProduct(); }, [productId]); // ✅ 有效，只用到了 productId }   如果无法 把一个函数移动到 effect 内部，还有一些其他办法：\n 尝试把那个函数移动到组件之外 如果所调用的方法是一个纯计算，并且可以在渲染时调用，可以在 useEffect 之外调用， 让 useEffect 依赖它的返回值 useCallback      Dependencies of Hooks Hooks 中依赖项的工作机制：\nHooks 提供了监听某个数据变化的能力，这个变化可能会触发组件的刷新， 创建副作用， 更新缓存等。要监听变化的数据，就是指定 hooks 的依赖项。\n指定依赖项的注意点：\n 依赖项中指定的变量，一定要在 回调函数 中用到； 依赖项一般是一个常量数组， 而不是一个变量； React会使用 浅比较 来对比依赖项是否发生变化，所以要特别注意数组或者说对象类型（各种引用类型）。 例如： 如果是每次创建一个新的饮用类型，即使值和原来比没有变化， 也会被认为是依赖项发生了变化。 const Todo = () =\u0026gt; { // 这里的todos是在函数内部创建的， 实际上每次运行都会产生新的数组。 // 在依赖比较时， 被认为是发生了新的变化。  const todos = [{ text: \u0026#39;learn something\u0026#39; }]; useEffect(()={ console.log(\u0026#34;todos has changed~\u0026#34;); },[todos]) };  React 会确保 setState 函数的标识是稳定的，并且不会在组件重新渲染时发生变化。这就是为什么可以安全地从 useEffect 或 useCallback 的依赖列表中省略 setState。(React guarantees that setState function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.)  Hooks 使用规则   只能在函数组建的顶级作用域中使用，不能在循环，条件判断，或者嵌套函数中执行，必须在顶层\n Hooks 在组件的多次渲染之间，必须按顺序执行。即：  所有 Hooks 都必须被执行到。（不能将 hooks 放在可能的 return 之后） Hooks 必须按顺序执行      只能在函数组件或者其他 Hooks 中使用\n  如果必须在类组件使用，可以： 利用高阶组件模式，将 Hooks 封装成高阶组件, 例程如下：\nimport React from \u0026#39;react\u0026#39;; import { useWindowSize } from \u0026#39;./hooks/useWindowSize\u0026#39;; export const withWindowSize = (Component) =\u0026gt; { return (props) =\u0026gt; { const windowSize = useWindowSize(); return \u0026lt;Component windowSize={windowSize} {...props} /\u0026gt;; }; }; // 使用以上高阶组件 import React from \u0026#39;react\u0026#39;; import { withWindowSize } from \u0026#39;./withWindowSize\u0026#39;; class MyComp { render() { const windowSize = this.props; } } // 通过windowSize 高阶组件， 给MyComp 添加 windowSize 属性 export default withWindowSize(MyComp);      eslint-plugin-react-hooks 专门用来检查 hooks 是否被正确使用 eslint-plugin-react-hooks - npm\n Reference Understanding React\u0026rsquo;s useEffect Hook - DEV Community\njavascript 浅比较和深比较 - 掘金\nReact Hook(useEffect) | Zoeice\n","date":"2021-09-30T14:24:15+09:00","image":"https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/hooks-cover_hu159474c7d83af7f6a0599b815240c53c_1979727_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react-hooks%E3%81%AEuseeffect/","title":"React HooksのUseEffect"},{"content":"第十六日 HTML ##Question: 元素的 alt 和 title 有什么区别；title 属性,alt属性の役割と違う・使い分け \u0026lt;head\u0026gt;内に書き込む要素としての title タグではない。\n\u0026lt;img alt=\u0026#34;画像だよ\u0026#34; title=\u0026#34;こっちのtitleだよ\u0026#34; /\u0026gt;  alt 属性  最常见用于 \u0026lt;img\u0026gt;标签上，alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。\n推荐您在文档的每个图像中都使用这个属性(SEO 需要)。 这样即使图像无法显示，用户还是可以看到关于丢失了什么东西的一些信息。而且对于残疾人来说，alt 属性通常是他们了解图像内容的唯一方式。\n title 属性  title 属性规定关于元素的额外信息。\n这些信息通常会在鼠标移到元素上时显示一段工具提示文本（tooltip text）。\ntitle 属性有一个很好的用途，即为链接添加描述性文字，特别是当连接本身并不是十分清楚的表达了链接的目的。这样就使得访问者知道那些链接将会带他们到什么地方。另外一个潜在的应用就是为图像提供额外的说明信息，比如日期或者其他非本质的信息。\n title 属性常与 form 以及 a 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。当然 title 属性是比较广泛使用的，可以用在除了 base，basefont，head，html，meta，param，script 和 title 之外的所有标签。但是并不是必须的。\n   title 属性と alt 属性の違い\n title 属性はマウスオーバー時にツールチップで表示されるテキストを入力する。 title 属性は img 以外に a タグや link タグなどあらゆる要素に指定していい。 alt 属性は画像の代替テキストを指定するタグで、画像リンク切れ時や音声読み上げブラウザで使われる。 alt 属性が使われるのは img タグのみで、内容がカラでも存在は必須。    \u0026lt;title\u0026gt; 标签\n  \u0026lt;title\u0026gt; 元素可定义文档的标题。\n浏览器会以特殊的方式来使用标题，并且通常把它放置在浏览器窗口的标题栏或状态栏上。同样，当把文档加入用户的链接列表或者收藏夹或书签列表时，标题将成为该文档链接的默认名称。\n \u0026lt;title\u0026gt; 标签是 \u0026lt;head\u0026gt; 标签中唯一要求包含的东西\n  一定要选择一个正确的标题(一个好的描述性的标题)，这对于定义文档并确保它能够在 Web 上有效利用来说是十分重要的。\n CSS ##Question: 请描述 margin 边界叠加是什么及解决方案 问题： 当两个垂直边界相遇时，它们将形成一个边界。这个边界的高度等于两个发生叠加的边界的高度中的较大者。\nmargin 边界叠加只会出现在普通文档流中，所以可以触发 BFC 来解决\n除此之外，也可以使用 padding 来代替 margin 或者增加 border 的值\nJavaScript ##Question: 返回到顶部的方法有哪些？ 写出其中一个   利用 a 标签的锚点。在顶部放一个 a 标签 \u0026lt;a name=\u0026quot;top\u0026quot;\u0026gt;顶部\u0026lt;/a\u0026gt;，在需要回到顶部的位置放置一个 a 标签，地址为 top。 \u0026lt;a href=\u0026quot;#top\u0026quot;\u0026gt;回到顶部\u0026lt;/a\u0026gt;。要做成隐藏的锚点，可以把内部的内容去掉，name 是必须的。\n  利用 #，在 url 后增加 # 不会让页面刷新，并且可以回到顶部。 可以对 location.href 进行设置 location.href += '#'。当这个方法执行多次即有多个 # 时，页面不会有响应。\n  利用 js 设置 scrollTop = 0，一般设置在最外层，即 document.documentElement.scrollTop = 0 就可以返回顶部。\n  Reference 知らないと恥ずかしい？ title 属性と alt 属性の役割と違い・使い分け方【HTML】 – Jill Tone Blog\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-30T09:55:33+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/frontend-16-cover_huf555d4919df0c5c666476d0acfb3b927_2217728_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-16/","title":"毎日のフロントエンド　16"},{"content":"第十五日 HTML #Question: title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别   title: 网页的标题，tag 标签标题。\n  h1： 网页内部的标题\n  Attention: 如果 title 为空，但是页面存在 h1,b,strong 标签，搜索引擎会默认页面 title 为 h1 内的内容，所以 得出结论 h1 是在没有外界干扰下除 title 以外第二个能强调页面主旨的标记，在一个页面中应该使用且只使用一次 h1 标记。\n  b： 加粗(bold)，是实体标签， 应当使用 CSS 而不是 \u0026lt;b\u0026gt;\n  strong: 语义化的 b， 属于逻辑标签。\n  Attention: 尽量使用 strong\n  i： 斜体，是实体标签，应当使用 CSS 而不是 \u0026lt;i\u0026gt;\n  em: 语义化的i，逻辑标签， i, em 同样表示强调，但是成都没有 strong 高\n  Attention: 物理元素是告诉浏览器我应该以何种格式显示文字，逻辑元素告诉浏览器这些文字有怎么样的重要性。对于搜索引擎来说em和strong比 i 和 b 要重视。\n  CSS #Question: style标签写在 body前和 body后的区别是什么？   写在 body 标签前利于浏览器逐步渲染\n  写在 body 标签后：由于浏览器以逐行方式对 html 文档进行解析；当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染； 在 windows 的 IE 下可能会出现 FOUC 现象（即样式失效导致的页面闪烁问题）；\n  加载和执行的一些优化点\n CSS 样式表置顶 （阻塞页面渲染） 用 \u0026lt;link\u0026gt; 代替@import （@import 是 CSS，不会触发浏览器并发机制；在 CSS 加载完成后进行的引入。 但现代浏览器@import 和 link 在表现上已经没有上述区别了） js 脚本置底（因为浏览器有并发限制，所以把 js 放到下边，减少占用的并发数，使得页面能够更快的渲染出来）合理使用 js 的异步加载能力    JavaScript #Question: 写一个数组去重的方法（支持多维数组） function flatArr(arr, target) { arr.forEach((item) =\u0026gt; { if (Array.isArray(item)) { flatArr(item, target); } else { target.push(item); } }); } function midArr(arr) { let result = []; flatArr(arr, result); return result; } function uniqueArr(arr) { return [...new Set(midArr(arr))]; } const result = uniqueArr([1, 2, 3, 4, [3, 4, [4, 6]]]); console.log(result); // 1,2,3,4,6  function uniqueArr(arr) { return [...new Set(arr.flat(Infinity))]; }   flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n  flat() has two alternatives: reduce and concat\n  Reference title タグと h1 タグは完全同一がいい? 違ってもいい? どう使い分ける? など 10+4 記事\n文字を強調するタグ strong・b・em・i の違いと SEO 効果\nArray.prototype.flat() - JavaScript | MDN\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-29T09:49:10+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/frontend-15-cover_huf555d4919df0c5c666476d0acfb3b927_2217728_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-15/","title":"毎日のフロントエンド　15"},{"content":"useState: 让函数组建具有维持状态的能力 Example import React, { useState } from \u0026#39;react\u0026#39;; const Example = () =\u0026gt; { const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;{count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; Usage   useState(initialState) 参数 initialState 是创建 state 的初始值， 它可以是任意类型\n  useState()的返回值是一个有着两个元素的数组。 第一个数组元素用来读取 state 的值， 第二个则是用来设置这个 state 的值的函数。 state为只读变量， 且必须通过setCount来设置 state\n  如果要创建多个 state， 需要多次调用useState\nconst [age, setAge] = useState(99); const [fruit, setFruit] = useState(\u0026#39;banana\u0026#39;); const [todos, setTodos] = useState([{ text: \u0026#39;react hooks\u0026#39; }]);   Principles   useState中的 set 与 class 组件中 setState 类似， 但是 class 组件中的 state 只有一个，因此在类组件中，一般采用对象作为一个 state； useState可以多次创建，更加语义化。\n  state中永远不要保存可以通过计算得到的值。\n 从 props 传递过来的值。 sometimes props 传递过来的值无法直接使用，而是需要通过一定的计算后再在 UI 上展示， 比如排序等。 此时， 在需要使用此数据的时候都重新排序，或者， 利用缓存机制， 而不是将结果直接置入state 从URL中读取的值。 例如，有时需要读取 url 中的参数，作为组件的一部分状态。 此时， 应在需要的时候读取，而不是存入 state cookies localStorage中读取的值，应每次都去读取。    ","date":"2021-09-29T00:28:55+09:00","image":"https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/hooks-cover_hu159474c7d83af7f6a0599b815240c53c_1979727_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react-hooks%E3%81%AEusestate/","title":"React HooksのUseState"},{"content":"第十四日 HTML #Question: 为什么 HTML5 只需要写 \u0026lt;!DOCTYPE HTML\u0026gt; 就可以？  The html document type declaration, also known as DOCTYPE, is the first line of code required in every HTML or xHTML document. The DOCTYPE declaration us an instruction to the web browser about what version of HTML the page is written in. This ensures that the web page is parsed the same way by different web browsers.\n The declaration of HTML5 DOCTYPE is much simpler: it no longer requires a reference to DTDs as it is no longer based on SGML.\nDoctype syntax for HTML5 and beyond:\n\u0026lt;!DOCTYPE html\u0026gt; HTML5 与 HTML4 基于的基准不同。HTML4 基于 SGML 因此需要除了 DOCTYPE 外还需要引入 DTD 来告诉浏览器用什么标准进行渲染。DTD 还分为 标准模式、严格模式。\nHTML5 不基于 SGML，因此后面就不要跟 DTD，但是需要 DOCTYPE 来规范浏览器的渲染行为。\n SGML 是通用标记语言的集合。其中有 HTML、XML，因此需要用 DTD 来指定使用那种规范。\n CSS #Question: position:fixed; 在 ios 下无效该怎么办？ 移动端业务开发，iOS 下经常会有 fixed 元素和输入框(input 元素)同时存在的情况。 但是 fixed 元素在有软键盘唤起的情况下，会出现许多莫名其妙的问题。\n现象： 当采用 fixed 做吸底、吸顶布局时，如果触发键盘弹出事件则 fixed 属性会失效，布局就会被扰乱。其原因解释如下：\n软键盘唤起后，页面的 fixed 元素将失效（即无法浮动，也可以理解为变成了 absolute 定位），所以当页面超过一屏且滚动时，失效的 fixed 元素就会跟随滚动了。\n 第三方库 isScroll.js 可以解决此问题。  JavaScript #Question: 什么是闭包？优缺点分别是什么？ What is a Closure?  Closures is are frequently used in JavaScript for object data privacy, in evently handlers and callback functions, and in partial application, currying(柯里化)，and other functional programming patterns.\n What is Closure? A closure is the combination of a function bundled together with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function\u0026rsquo;s scope from an inner one.\nIN JavaScript, closures are created every time a function is created, at function creation time.\nTo use a closure, define a function inside another function and expose it. To expose a function, return it or pass it to another function.\nThe inner function will have access to the variables in the outer one\u0026rsquo;s scope, even after the outer function has returned.\nExamples Data privacy is an essential property that helps us program to an interface, not an implementation. And among other things, closures are commonly used to give objects data privacy.\nThis is an important concept that helps us build more robust software because implementation details are more likely to change in breaking ways than interface contracts.\nIn javascript, closures are the primary mechanism used to enable data privacy. When you use closures for data privacy, the enclosed varibles are only in scope within the containing (outer) function. You can\u0026rsquo;t get at the data from an outside scope except through the object\u0026rsquo;s provileged methods.\n闭包是可以访问另一个函数作用域的函数。由于 javascript 的特性，外层的函数无法访问内部函数的变量；而内部函数可以访问外部函数的变量（即作用域链）。\nfunction a() { var b = 1; var c = 2; // 这个函数就是个闭包，可以访问外层 a 函数的变量  return function () { var d = 3; return b + c + d; }; } var e = a(); console.log(e());   使用闭包可以隐藏变量以及防止变量被篡改和作用域的污染，从而实现封装\n  缺点就是由于保留了作用域链，会增加内存的开销。因此需要注意内存的使用，并且防止内存泄露的问题。\n  Reference What is the DOCTYPE Declaration in HTML?\nWeb 移动端 Fixed 布局的解决方案 | EFE Tech\n关于闭包 - CNode 技术社区\n","date":"2021-09-28T15:34:08+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/frontend-14-cover_huf633675efa550b3936c0f24944c6beb4_1720619_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/","title":"毎日のフロントエンド　14"},{"content":"第十三日 HTML #Question: html5 中的 form 怎么关闭自动完成？ 操作表单 form 的 autocomplete 属性值, 默认是开启的。\n\u0026lt;form action=\u0026#34;demo_form.html\u0026#34; method=\u0026#34;get\u0026#34; autocomplete=\u0026#34;off\u0026#34;\u0026gt; First name:\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;fname\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; E-mail: \u0026lt;input type=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; CSS #Question: ::before和:after中单冒号和双冒号的区别是什么，这两个伪元素有什么作用   :表示伪类，是一种样式，比如:hover, :active 等\n  ::表示伪元素，是具体的内容，比如::before 是在元素前面插入内容，::after 则是在元素后面插入内容，不过需要 content 配合，并且插入的内容是 inline 的\n  :before 和 :after 其实还是表示伪元素，在 css3 中已经修订为::before 和::after 了，只是为了能兼容 IE 浏览器，所以也可以表示成:before 和:after\n  JavaScript #Question: 说说你对 javascript 的作用域的理解 作用域就是一块封闭的区域，外部不能访问到这块区域里的变量、函数等，被{}包裹的就叫一个作用域（全局作用域是特殊的）\n 函数作用域 全局作用域 块作用域  变量提升：在用 var 或者 function 声明一个变量和函数时，变量和函数会被提升到函数的顶部\nSoft Skills #Question: http 都有哪些状态码 HTTP 状态码 对照详解\nReference css 伪元素:before 和:after 用法详解\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-27T21:33:31+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/frontend-13-cover_huf633675efa550b3936c0f24944c6beb4_1720619_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/","title":"毎日のフロントエンド　13"},{"content":"第十二日 HTML #Question: 常见的浏览器内核都有哪些？并介绍下你对内核的理解 内核主要分为渲染引擎和 JS 引擎。前者负责页面的渲染，后者负责执行解析 JavaScript。之后，由于 JS 引擎越来越独立，现在所说的浏览器内核大都指渲染引擎\n目前主流的内核有以下 4 个：\n Trident: 由微软开发，即我们熟知的 IE 内核 Gecko: 使用 C++ 开发的渲染引擎，包括了 SpiderMonkey 即我们熟悉的 FireFox Presto: Opera 使用的内核 Webkit: Safari 使用的内核 Chrome 浏览器内核： 统称为 Chromium 内核，以前是 Webkit 内核，现在是Blink内核  CSS #Question: 说说你对 css 盒子模型的理解   基本概念\n 标准(W3C)盒子模型(box-sizing: content-box;)：包括 margin,border,padding,content,并且 content 部分不包括其他部分  标准盒子模型  IE 盒子模型(box-sizing: border-box;)：包括 margin,border,padding,content，content包含了border和padding  IE盒子模型     补充说明：\n  CSS盒模型， 有内外两个部分。 外部属性 控制盒子本体是否占满一整行； 内部则控制：内部元素的属性。 例如：display: inline-block,外部是，inline 不占据整行； 内部是 block则表明内部遵循块状特性。 因此， display: inline; 可理解为 display: inline-inline;， display: block; 可理解为 display: block-block;\n  display: inline-block 简单来说就是将对象呈现为 inline 对象，但是对象的内容作为 block 对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个 link（a 元素）inline-block 属性值，使其既具有 block 的宽度高度特性又具有 inline 的同行特性\n  width/height, padding, border, margin 这几个控制盒子大小的属性。 其中 width/height 控制元素内容大小； margin 控制元素与其他元素的距离（margin的背景色透明， 元素 background-color，只影响到 border）； border 是元素外围边框； padding 控制元素内容到 border 的距离\n    JavaScript #Question: 写一个获取当前 url 查询字符串中的参数的方法 function urlParams() { const search = window.location.search; search = search.substr(1, search.length); const res = {}; if (!search) return res; search.split(\u0026#39;\u0026amp;\u0026#39;).map((item) =\u0026gt; { const [key, value] = item.split(\u0026#39;=\u0026#39;); res[key] = decodeURIComponent(value); }); return res; }  function urlParam() { const res = {}; location.search.replace(/([^\u0026amp;=?]+)=([^\u0026amp;]+)/g, (m, c1, c2) =\u0026gt; (res[c1] = c2)); return res; } Soft Skills #Question: 网页应用从服务器主动推送到客户端有那些方式 WebSocket\nWebSocket 是一种在单个 TCP 连接上进行全双工通信的协议\nWebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\neventsource(SSE)\nEventSource 接口是 Web 内容与服务器发送的事件的接口。一个 EventSource 实例打开一个持久连接 HTTP 服务器，它发送事件的 text/event-stream 格式。连接保持打开状态，直到通过调用关闭 EventSource.close()。\n与 WebSocket 不同，服务器发送的事件是单向的。也就是说，数据消息是从服务器到客户端（例如用户的 Web 浏览器）沿一个方向传递的\nSSE 技术详解：使用 HTTP 做服务端数据推送应用的技术\nWeb Push\nReference 面试官：谈谈你对 CSS 盒模型的认识?\nblock，inline 和 inline-block 概念和区别\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-26T23:36:48+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/frontend-12-cover_huf603ea210b60b02f272d6d9dbb2ff177_175148_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/","title":"毎日のフロントエンド　12"},{"content":"第十一日 HTML #Question: 你对标签语义化的理解是什么？\n什么是 HTML 语义化标签 语义化的标签，旨在让标签有自己的含义。\n\u0026lt;p\u0026gt;一行文字\u0026lt;/p\u0026gt; \u0026lt;span\u0026gt;一行文字\u0026lt;/span\u0026gt; 如上代码，p 标签与 span 标签都区别之一就是，p 标签的含义是：段落。而 span 标签责没有独特的含义。\n语义化标签的优势  语义化更具有可读性，便于团队开发维护 在没有 css 的情况下，页面也可以呈现出也很好的内容结构和代码结构 SEO，搜索引擎能更好的理解页面中各部分的关系，可更快更准确的搜索到信息  常见的语义化标签  因此我们在写页面结构时，应尽量使用有 语义的 HTML 标签\n  \u0026lt;title\u0026gt;：页面主体内容。 \u0026lt;hn\u0026gt;：h1~h6，分级标题，与 协调有利于搜索引擎优化。 \u0026lt;ul\u0026gt;：无序列表。 \u0026lt;li\u0026gt;：有序列表。 \u0026lt;header\u0026gt;：页眉通常包括网站标志、主导航、全站链接以及搜索框。 \u0026lt;nav\u0026gt;：标记导航，仅对文档中重要的链接群使用。 \u0026lt;main\u0026gt;：页面主要内容，一个页面只能使用一次。如果是 web 应用，则包围其主要功能。 \u0026lt;article\u0026gt;：定义外部的内容，其中的内容独立于文档的其余部分。 \u0026lt;section\u0026gt;：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。 \u0026lt;aside\u0026gt;：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。 \u0026lt;footer\u0026gt;：页脚，只有当父级是 body 时，才是整个页面的页脚。 \u0026lt;small\u0026gt;：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。 \u0026lt;strong\u0026gt;：和 em 标签一样，用于强调文本，但它强调的程度更强一些。 \u0026lt;em\u0026gt;：将其中的文本表示为强调的内容，表现为斜体。 \u0026lt;mark\u0026gt;：使用黄色突出显示部分文本。 \u0026lt;figure\u0026gt;：规定独立的流内容（图像、图表、照片、代码等等）（默认有 40px 左右 margin）。 \u0026lt;figcaption\u0026gt;：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。 \u0026lt;cite\u0026gt;：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。 \u0026lt;blockquoto\u0026gt;：定义块引用，块引用拥有它们自己的空间。 \u0026lt;q\u0026gt;：短的引述（跨浏览器问题，尽量避免使用）。 \u0026lt;time\u0026gt;：datetime 属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。 \u0026lt;abbr\u0026gt;：简称或缩写。 \u0026lt;dfn\u0026gt;：定义术语元素，与定义必须紧挨着，可以在描述列表 dl 元素中使用。 \u0026lt;address\u0026gt;：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。 \u0026lt;del\u0026gt;：移除的内容。 \u0026lt;ins\u0026gt;：添加的内容。 \u0026lt;code\u0026gt;：标记代码。 \u0026lt;meter\u0026gt;：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签） \u0026lt;progress\u0026gt;：定义运行中的进度（进程）。  CSS #Question: css 常用的布局方式有哪些？\n 流式布局: 最基本的布局，就是顺着 html 像流水一样流下来 绝对定位: 利用 position: absolute 进行绝对定位的布局 float 布局: 最初用来解决多栏布局的问题。比如 圣杯、双飞翼 的布局都可以用 float 来实现 珊格布局: bootstrap 用的布局，把页面分为 24 分，通过 row 和 col 进行布局 flex 布局: css3 的布局可以非常灵活地进行布局和排版 grid 布局: 网格布局  JavaScript #Question: 简要描述下 JS 有哪些内置的对象 built-in objects\nJavaScript 标准内置对象 - JavaScript | MDN\nJS 所有内置对象属性和方法汇总 - SegmentFault 思否\nReference JS 所有内置对象属性和方法汇总\nJavaScript 标准内置对象 - JavaScript | MDN\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-25T23:02:39+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/frontend-11-cover_huf603ea210b60b02f272d6d9dbb2ff177_175148_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/","title":"毎日のフロントエンド　11"},{"content":"第十日 HTML #Question: viewport 常见设置都有哪些？\nviewport 就是视区窗口，也就是浏览器中显示网页的部分。PC 端上基本等于设备显示区域，但在移动端上viewport 会超出设备的显示区域 (即会有横向滚动条出现)。设备默认的 viewport 在 980 - 1024 之间。\n   设置 解释     width 设置 layout viewport 的宽度，为一个正整数，或字符串\u0026quot;width-device\u0026quot;   initial-scale 设置页面的初始缩放值，为一个数字，可以带小数   minimum-scale 允许用户的最小缩放值，为一个数字，可以带小数   maximum-scale 允许用户的最大缩放值，为一个数字，可以带小数   height 设置 layout viewport 的高度，这个属性对我们并不重要，很少使用   user-scalable 是否允许用户进行缩放，值为\u0026quot;no\u0026quot;或\u0026quot;yes\u0026quot;, no 代表不允许，yes 代表允许    // width=device-width, initial-scale=1.0 是为了兼容不同浏览器 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\u0026#34; /\u0026gt;  dpr 与 CSS 像素。CSS 像素的 1px 在 PC 端上与设备的物理像素基本一致，而到手机端就会有两个物理像素对应一个 CSS 像素的情况出现（如 iPhone 的视网膜屏）。 所以 iPhone 上的 dpr = 2 即 2 个物理像素 / 一个 CSS 像素（独立像素）\n CSS #Question: 对比下 px、em、rem 有什么不同？\npx、em、rem 都是计量单位，都能表示尺寸，但是有有所不同，而且其各有各的优缺点。\n  px表示“绝对尺寸”（并非真正的绝对），实际上就是 css 中定义的像素（此像素与设备的物理像素有一定的区别，后续详细说明见文末说明 1），利用 px 设置字体大小及元素宽高等比较稳定和精确。Px 的缺点是其不能适应浏览器缩放时产生的变化，因此一般不用于响应式网站。\n  em表示相对尺寸, 其相对于当前对象内文本的 font-size（如果当前对象内文本的 font-size 计量单位也是 em，则当前对象内文本的 font-size 的参考对象为父元素文本 font-size）。使用 em 可以较好的相应设备屏幕尺寸的变化，但是在进行元素设置时都需要知道父元素文本的 font-size 及当前对象内文本的 font-size，如有遗漏可能会导致错误。\n em子元素字体大小font-size 的 em 是 相对于 父元素的 font-size 子元素的 height width padding margin 的 em 值 是相对于 本元素的font-size 值  \u0026lt;div\u0026gt; 我是父元素div \u0026lt;p\u0026gt; 我是子元素p \u0026lt;span\u0026gt;我是孙元素span\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; div { font-size: 40px; width: 10em; /* 400px */ height: 10em; border: solid 1px black; } p { font-size: 0.5em; /* 20px */ width: 10em; /* 200px */ height: 10em; border: solid 1px red; } span { font-size: 0.5em; width: 10em; height: 10em; border: solid 1px blue; display: block; }   rem 其参考对象为根元素 root的 font-size 即 \u0026lt;html\u0026gt;元素。通常做法是给 html 元素设置一个字体大小，然后其他元素的长度单位就为 rem。\nhtml { font-size: 10px; } div { font-size: 4rem; /* 40px */ width: 30rem; /* 300px */ height: 30rem; border: solid 1px black; } p { font-size: 2rem; /* 20px */ width: 15rem; height: 15rem; border: solid 1px red; } span { font-size: 1.5rem; width: 10rem; height: 10rem; border: solid 1px blue; display: block; }  当用 rem 做响应式页面，直接在媒体中改变 html 的 font-size 那么用 rem 作为单位的元素的大小都会相应改变，很方便。    px用于元素的边框或定位。 推荐使用 rem(只有一个参照，方便管理)， em 容易出错\nJavaScript Question: 简要描述下什么是回调函数并写一个例子出来\n回调是把一个函数作为参数传递给另一个函数，当该函数满足某个条件时触发该参数函数。\n主要用于异步操作 例如网络请求 防止页面同步代码阻塞导致渲染线程停止\nfunction longTask(callback, timeout) { setTimeout(callback, timeout); } longTask(() =\u0026gt; { console.log(\u0026#39;回调任务被执行了\u0026#39;); }, 2000); console.log(\u0026#39;我是同步代码 不会阻塞我\u0026#39;); Reference 移动前端开发之 viewport 的深入理解\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-23T23:39:38+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/frontend-10-cover_hu5b7d4b744859a935611e2eb6b463cb76_1822006_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/","title":"毎日のフロントエンド　10"},{"content":"第九日 HTML #Question: 浏览器内多个标签页之间的通信方式有哪些？(网页间 消息 通讯)\n是什么？ 在浏览器中，两个不同页面（A 页面的 window ！= B 页面的 window）网页之间的消息传递\n消息传递方式 1. WebSocket - 可跨域  WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\n  WebSocket 教程\n 2. postMessage - 可跨域 window.postMessage() 方法安全地启用 Window 对象之间的跨源通信\n对将接收消息的窗口的引用，获得此类引用的方法包括：\n \u0026lt;iframe\u0026gt; Window.open （生成一个新窗口然后引用它） Window.opener （引用产生这个的窗口）  3. Worker 之 ShareWorker   webworker，作为浏览器的一个新特性，可以提供一个额外的线程来执行一些 js 代码（真正的多线程），并且不会影响到浏览器用户界面，但是不能 DOM 操作。\n  SharedWorker 可以被多个 window 共同使用，所以可以用来跨页面传输数据，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)。\n  4. Server-Sent Events HTML5 服务器发送事件（server-sent event）允许网页获得来自服务器的更新。 Server-Sent 事件指的是网页自动获取来自服务器的更新。\n5. localStorage localstorage 是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信(ps：session 是会话级的存储空间，每个标签页都是单独的）。 直接在 window 对象上添加监听即可。\n6. Cookies Cookies 在同一个域名内，并且目录也得相同，可以参考第三方库\n js-cookie/js-cookie: A simple, lightweight JavaScript API for handling browser cookies\n 7. BroadcastChannel 只要是在同一原始域和用户代理下，所有窗口、iframe 之间都可以进行交互\nCSS #Question: 简述下你理解的优雅降级和渐进增强\n背景 渐进增强和优雅降级这两个概念是在 CSS3 出现之后火起来的。由于低级浏览器不支持 CSS3，但是 CSS3 特效太优秀不忍放弃，所以在高级浏览器中使用 CSS3，而在低级浏览器只保证最基本的功能。二者的目的都是关注不同浏览器下的不同体验，但是它们侧重点不同，所以导致了工作流程上的不同。\n渐进增强 渐进增强 （Progressive Enhancement）：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。\n 应关注于内容本身  优雅降级 优雅降级（Graceful Degradation）：一开始就构建站点的完整功能，然后再针对低版本浏览器进行兼容。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。\n 应针对最高级、最完善的浏览器来开发网站  用法简介  \n 很久以前：浏览器前缀 CSS3 和正常 CSS3 都不支持 不久之前：浏览器只支持前缀 CSS3，不支持正常 CSS3 现在：浏览器既支持前缀 CSS3，又支持正常 CSS3 未来：浏览器不支持前缀 CSS3，仅支持正常 CSS3  如何选择   若低版本用户居多，则优先采用渐进增强的开发流程\n  若高版本用户居多，则为了提高大多数用户的使用体验，那当然优先采用优雅降级的开发流程\n  多数大公司采用渐进增强的方式（通常业务优先）\n  JavaScript #Question: 写一个判断数据类型的方法\nfunction testType(obj) { return Object.prototype.toString .call(obj) .replace(/^.{8}(.+)]$/, (m, $1) =\u0026gt; $1.toLowerCase()); }  // typeof 只能判断 《基本类型》 string,number,boolean, undefined,object // null 会被判断成 object // toString() Object.prototype.toString.call([]); //\u0026#34;[object Array]\u0026#34; Object.prototype.toString.call({}); //\u0026#34;[object Object]\u0026#34;  function testType(obj) { return Object.prototype.toString.call(obj).replace(/\\[object\\s|\\]/g, \u0026#39;\u0026#39;); } console.log(testType([])); //\u0026#34;Array\u0026#34; console.log(testType(1)); //\u0026#34;Number\u0026#34; Reference 网页消息通信\n前端面试题-渐进增强和优雅降级 - SegmentFault 思否\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-23T16:48:11+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/frontend-9-cover_hu5b7d4b744859a935611e2eb6b463cb76_1822006_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/","title":"毎日のフロントエンド　9"},{"content":"第八日 CSS #Question: 清除浮动的方式有哪些及优缺点？\n 现阶段 较多使用Flex 布局 浮动带来的问题是盒子塌陷问题  什么是盒子塌陷？ 外部盒子本应该包裹住内部的浮动盒子，结果却没有\n原因 父元素只包含浮动元素，那么它的高度就会塌缩为零, 前提是没有设置高度height属性，或者设置为 auto，就会出现盒子塌陷，如果父元素不包含任何的可见背景，这个问题会很难被注意到。 因为子元素设置了 float 属性，而 float 属性会把元素从标准文档流中抽离，直接结果就是外部盒子丢了两个孩子，因为内部没有其它盒子了，所以外部盒子只包裹文本节点内容，却把两个内部盒子扔在外面了。\n解决方案   把外部盒子也从标准文档流中抽离\n 缺点是： 父元素加上 float 有可能影响整个页面    在外部盒子内最下方添上带 clear 属性的空盒子： 把 \u0026lt;div style=\u0026quot;clear:both;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;放在盒内底部\n  给外部盒子添加： overflow:hidden 清除浮动\n  用after伪元素清除浮动\n  .clearfix { \\*zoom: 1; } .clearfix:before, .clearfix:after { display: table; line-height: 0; content: \u0026#39;\u0026#39;; } .clearfix:after { clear: both; }     当然，还有前文提到的 BFC\n  JavaScript #Question: 写一个加密字符串的方法\nfunction encodeStr(str, key) { return str .split(\u0026#39;\u0026#39;) .map((item) =\u0026gt; { return item.charCodeAt() * key; }) .join(\u0026#39;#\u0026#39;); } function decodeStr(str, key) { return str .split(\u0026#39;#\u0026#39;) .map((item) =\u0026gt; { return String.fromCharCode(+item / key); }) .join(\u0026#39;\u0026#39;); } console.log(decodeStr(encodeStr(\u0026#39;hello world\u0026#39;, 665), 665)); Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-22T16:40:32+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/frontend-8-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/","title":"毎日のフロントエンド　8"},{"content":"第七日 HTML #Question: iframe 框架都有哪些优缺点？\nThe \u0026lt;iframe\u0026gt; HTML element represents a nested browsing context, embedding another HTML page into the current one.\n\u0026lt;iframe\u0026gt;: The Inline Frame element - HTML: HyperText Markup Language | MDN\niFrame — A love story. by Max Rafferty | Slices of Bread | Medium\nAdvantages of \u0026lt;iframe\u0026gt;:\n iframe can display the embedded web page intact. If there are multiple pages referencing iframe, you only need to modify the content of iframe, and then you can change the content of every page you call, which is convenient and fast. If the header and version of a web page are the same in order to unify the style, it can be written as a page, nested with iframe, which can increase code reusability. If you encounter slow loading third-party content such as icons and advertisements, these problems can be solved by iframe. 可以实现跨域，每个 iframe 的源都可以不相同（方便引入第三方内容）  Disadvantages of \u0026lt;iframe\u0026gt;:\n Many pages will be generated, which is not easy to manage. Iframe frame structure sometimes makes people feel confused. If there are many frames, there may be up and down, left and right scrollbars, which will distract visitor\u0026rsquo;s attention and lead to poor user experience. The code is complex and can\u0026rsquo;t be indexed by some search engines, which is very important. Many mobile devices can not fully display the frame, and the device compatibility is poor. Iframe framework pages will increase the HTTP requests of the server, which is not advisable for large websites.  CSS #Question: 简述你对 BFC 规范的理解\n Block formatting context - Developer guides | MDN\n A Block formatting Context is a part of a visual CSS rendering of a web page. It\u0026rsquo;s the region in which the layout of block boxesx occurs and in which floats intreract with other elements.\nA block formatting context is created bt at least one of the following:\n  The root element of the document \u0026mdash;- \u0026lt;html\u0026gt;\n  Floats (elements where float isn\u0026rsquo;t none)\n  Absolutely positioned elements (postion is absolute of fixed)\n  Inline-blocks (display: inline-block;)\n  Table cells (element with display: table-cell, which is the default for HTML table cell.)\n  是什么？ 常见的Formatting Context有 BFC、IFC（行级格式化上下文），还有 GFC（网格布局格式化上下文）和 FFC（自适应格式化上下文）\nBFC是 一个独立渲染区 只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\nBFC 是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。\n解决了什么问题(有什么作用)：  解决了 盒子内外的元素布局的相互影响，干扰。 解决了 自适应两栏布局 阻止父元素 高度坍塌（子元素都为 float 时，子元素脱离文档流 父元素不能被子元素撑开）（参考下文规则 6） 可以阻止元素被浮动元素覆盖 可以包含浮动元素——清除内部浮动 分属于不同的 BFC 时可以阻止 margin 重叠  如何触发 BFC 常用的四种方法：\n float is not none position is not static and relative (is fixed or absolute) overflow is auto scroll and hidden display is table-cell or inline-block  BFC 的 布局规则  内部的 Box 会在垂直方向，一个接一个地放置。 Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠 每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 BFC 的区域不会与 float box 重叠。 BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 计算 BFC 的高度时，浮动元素也参与计算， 相当于清除了内部浮动。  JavaScript #Question: 统计某一字符或字符串在另一个字符串中出现的次数\nfunction substrCount(str, target) { let count = 0; if (!target) return count; while (str.match(target)) { str = str.replace(target, \u0026#39;\u0026#39;); count++; } return count; } console.log(strCount(\u0026#39;abcdef abcdef a\u0026#39;, \u0026#39;abc\u0026#39;));  function substrCount(str, target) { let count = 0; while (str.includes(target)) { const index = str.indexOf(target); count++; str = str.substring(index + target.length); } return count; }  function substrCount(str, target) { return str.split(target).length - 1; } Reference What are the advantages and disadvantages of iframe? | Develop Paper\n[布局概念] 关于 CSS-BFC 深入理解 - 掘金\n[Jelly College] CSS tutorial lesson8:How to understand BFC quickly - YouTube\n","date":"2021-09-21T10:52:54+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/frontend-7-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/","title":"毎日のフロントエンド　7"},{"content":"第六日 HTML #Question: label 都有哪些作用？并举相应的例子说明\nThe \u0026lt;label\u0026gt; HTML element represents a caption for an item in a user interface.\n表示用户界面中某个元素的说明。\nAssociating a \u0026lt;label\u0026gt; with an \u0026lt;input\u0026gt; element offers some major advantages:\n  A screen reader will read out the label when the user is focused on the form \u0026lt;input\u0026gt;, making it easier for an assistive technology user to understand what data should be entered.\n  When a user clicks or touches a label, the browser passes the focus to its associated input.\n  Attribute\n for: The value of the for attritue must be a single id for a labelable form-related element in the same document as the \u0026lt;label\u0026gt; element.  focus 锚点定位和 overflow 的选项卡切换效果 » CSS 世界 demo 演示\n100dayscss-051\nCSS #Question: 用 css 创建一个三角形，并简述原理\n css - 盒子模型 \n 一个盒子包括: margin+border+padding+content 上下左右边框交界处出呈现平滑的斜线. 利用这个特点, 通过设置不同的上下左右边框宽度或者颜色可以得到小三角, 小梯形等 调整宽度大小可以调节三角形形状   设置盒子的宽高度, 及上下左右边框, 会如下图：    #test1 { height: 20px; width: 20px; border-color: #ff9600 #3366ff #12ad2a #f0eb7a; /* border-style: solid; */ /* border-width: 20px; */ border: 20px solid; } 在上面基础上, 我们把宽高度都设为 0 时, 会呈现上述的边界斜线    #test2 { height: 0; width: 0; overflow: hidden; /* 这里设置overflow, font-size, line-height */ font-size: 0; /*是因为, 虽然宽高度为0, 但在IE6下会具有默认的 */ line-height: 0; /* 字体大小和行高, 导致盒子呈现被撑开的长矩形 */ border-color: #ff9600 #3366ff #12ad2a #f0eb7a; /* border-style: solid; */ /* border-width: 20px; */ border: 20px solid; } 只保留上面的橙色    #test3 { height: 0; width: 0; /* overflow: hidden; */ /* font-size: 0; */ /* line-height: 0; */ border-color: #ff9600 transparent transparent transparent; /* border-style: solid; */ /* border-width: 20px; */ border: 20px solid; } JavaScript #Question: 写一个去除制表符和换行符的方法\n/** * \\f 匹配 换页字符。 * \\n 匹配 换行字符。 * \\r 匹配 回车符字符。 * \\t 匹配 制表字符。 * \\v 匹配 垂直制表符。 * @param str * @returns {void | string} */ const removeEmpty = (str) =\u0026gt; str.replace(/[\\t\\n\\v\\r\\f]/g, \u0026#39;\u0026#39;); console.log( removeEmpty(`| |`) ); Reference CSS 三角形的实现原理及运用-前端开发博客\nCSS 绘制三角形—border 法 - 简书\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-20T16:14:06+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/frontend-6-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/","title":"毎日のフロントエンド　6"},{"content":"第五日 HTML #Question: 简述超链接 target 属性的取值和作用\ntarget Where to display the linked URL. The following keywords have special meanings for where load the URL\n   value 描述 description     _self （默认）在相同的框架中打开被链接文档 the current browsing context(default)   _blank 在新窗口中打开被链接文档 usually a new tab, but users can configure browers to open a new window instead   _parent 在父框架集中打开被链接文档 the parent browsing context of the current one. If no parent , behaves as _self   _top 在整个窗口中打开被链接文档,忽略掉所有的框架结构 the topmost browsing context. If no ancestors, behaves as _self    CSS #Question: CSS3 新增伪类有哪些并简要描述\n 新增伪类 \nJavaScript #Question: 写一个把字符串大小写切换的方法\nfunction caseConvert(str) { return str.replace(/([a-z]*)([A-Z]*)/g, (m, s1, s2) =\u0026gt; { return `${s1.toUpperCase()}${s2.toLowerCase()}`; }); } caseConvert(\u0026#39;AsA33322A2aa\u0026#39;); //aSa33322a2AA  function caseConvert(str) { return str .split(\u0026#39;\u0026#39;) .map((s) =\u0026gt; { const code = s.charCodeAt(); if (code \u0026lt; 65 || code \u0026gt; 122 || (code \u0026gt; 90 \u0026amp;\u0026amp; code \u0026lt; 97)) return s; if (code \u0026lt;= 90) { return String.fromCharCode(code + 32); } else { return String.fromCharCode(code - 32); } }) .join(\u0026#39;\u0026#39;); } console.log(caseConvert(\u0026#39;AbCdE\u0026#39;)); // aBcDe  function caseConvertEasy(str) { return str .split(\u0026#39;\u0026#39;) .map((s) =\u0026gt; { if (s.charCodeAt() \u0026lt;= 90) { return s.toLowerCase(); } return s.toUpperCase(); }) .join(\u0026#39;\u0026#39;); } console.log(caseConvertEasy(\u0026#39;AbCxYz\u0026#39;)); // aBcXyZ  function reverseCharCase(str) { if (!(typeof str === \u0026#39;string\u0026#39;)) { throw new Error(\u0026#39;str must be string\u0026#39;); } // 如果是空字符串，直接返回  if (!str.length) { return str; } const lowerCaseReg = /[a-z]/; const upperCaseReg = /[A-Z]/; const len = str.length; let i = 0; let result = \u0026#39;\u0026#39;; while (i \u0026lt; len) { if (lowerCaseReg.test(str.charAt(i))) { result += str.charAt(i).toLocaleUpperCase(); } else if (upperCaseReg.test(str.charAt(i))) { result += str.charAt(i).toLocaleLowerCase(); } else { result += str.charAt(i); } i++; } return result; } const testStringArray = [ \u0026#39;\u0026#39;, \u0026#39;1a1\u0026#39;, \u0026#39;aABz\u0026#39;, \u0026#39;aC R + 6788978e892*\u0026amp;\u0026amp;*(^%\u0026amp;*%^\u0026amp;%^\u0026amp;e\u0026#39;, ]; testStringArray.forEach((str) =\u0026gt; { console.log(reverseCharCase(str)); }); Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-19T12:16:31+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/","title":"毎日のフロントエンド　5"},{"content":"第四天 HTML #Question: HTML5 的文件离线储存怎么使用，工作原理是什么？\nTL;DR \u0026ndash; HTML5 local storage is an alternative to cookies, allowing web applications to store user information in their browser.\nWith web storagem web applications can store data locally within the user\u0026rsquo;s browser.\nBefore HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.\nWeb storage is per origin (per domain and protocal). All pages, from one origin, can store and access the same data.\n  window.localStorage - stores data with no expiration date.\n  window.sessionStorage - stores data for one session (data is lost when the browser tab is closed)\n  Cookies VS. Local Storage VS. Session Storage     Cookies Local Storage Session Storage     Capacity 4kb 10mb 5mb   Browsers HTML4/HTML5 HTML5 HTML5   Accessible form Any window Any window Same tab   Expires Manually set Never On tab close   Storage Location Browser and Server Browser only Browser only   Sent with Request Yes No No    Storage Inspector - Firefox Developer Tools | MDN\nCSS #Question: CSS 选择器有哪些？哪些属性可以继承？\nCSS selectors - CSS: Cascading Style Sheets | MDN\nCSS Selectors\n  Basic selectors:\n universal selector通用选择器： * will match all the elements of the document. Type selector 元素选择器： Syntax: element name input -\u0026gt; \u0026lt;input\u0026gt; Class selector 类选择器具： Syntax: .classname, .index will match any element that has a class of \u0026ldquo;index\u0026rdquo;. ID selector： Syntax: #idname, #toc will match the element that has the ID \u0026ldquo;toc\u0026rdquo;. Attribute selector 属性选择器： Syntax: [attr]``[attr=value]    Grouping selectors:\n Selector list: Syntax: A, B Example: div, span will match both \u0026lt;span\u0026gt; and \u0026lt;div\u0026gt; elements.    Combinators: 组合器\n Descendant combinator 后代组合器 Child combinator 直接子代组合器 General sibling combinator 一般兄弟组合器 Adjacent sibling combinator 紧邻组合器 Column combinator 列组合器    Pseudo:\n Pseudo classes 伪类： : The : pseudo allow the selection of elements based on state information that is not contained in the document tree. Example: a::visited will match all \u0026lt;a\u0026gt; elements that have been visited by the user. Psendo elements 伪元素： The :: pseudo represent entities that are not included in HTML. Example: p::first-line will match the first line of all \u0026lt;p\u0026gt; elements.    Inherit : yes 可继承属性：\ncss 有哪些属性可以继承？ 层叠与继承 - 学习 Web 开发 | MDN\nCascade Stylesheets cascade - at a very simple level, this means that the order of CSS rules matter; whjen two rules apply that have equal specificity the one that comes last in the CSS is the one that will be used.\n当两条同样级别的规则应用到同一个元素上时， 生效的是 后一个。\nInheritance Some css property values set on parent elements are inherited by their child elements, and some aren\u0026rsquo;t.\n可继承的`CSS``属性：  字体相关： font font-family \u0026hellip;\u0026hellip; 文本相关属性： text-indent, text--align, color\u0026hellip;\u0026hellip; 元素可见性： visibility 表格布局属性： caption-side, border-collapse, border-spacing,empty-cells, table-layout 列表属性： list-style-type \u0026hellip;\u0026hellip; 生成内容属性： quotes 光标属性： cursor 页面样式属性： page, page-break-inside, windows, orphans\u0026hellip;\u0026hellip; 声音样式属性： speak\u0026hellip;\u0026hellip;  无继承性的属性  display 文本属性： vertical-align text-decoration text-shadow white-space unicode-bidi 盒子模型的属性:宽度、高度、内外边距、边框等 背景属性：背景图片、颜色、位置等 定位属性：浮动、清除浮动、定位 position 等 生成内容属性: content counter-reset counter-increment 轮廓样式属性: outline-style outline-width outline-color outline 页面样式属性: size page-break-before page-break-after  继承中比较特殊的几点   a 标签的字体颜色不能被继承\n  h1-h6 标签字体的大下也是不能被继承的 ,因为它们都有一个默认值\n  JavaScript #Question: 写一个方法把下划线命名转成大驼峰命名\nfunction toCamel(str) { str = str.replace(/(\\w)/, (match, $1) =\u0026gt; `${$1.toUpperCase()}`); while (str.match(/\\w_\\w/)) { str = str.replace( /(\\w)(_)(\\w)/, (match, $1, $2, $3) =\u0026gt; `${$1}${$3.toUpperCase()}` ); } return str; } console.log(toCamel(\u0026#39;a_c_def\u0026#39;)); // ACDef function toCamelCase(str) { if (typeof str !== \u0026#39;string\u0026#39;) { return str; } return str .split(\u0026#39;_\u0026#39;) .filter((s) =\u0026gt; !!s) // 验证是否存在  .map((item) =\u0026gt; item.charAt(0).toUpperCase() + item.substr(1, item.length)) .join(\u0026#39;\u0026#39;); } ","date":"2021-09-18T13:33:07+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/","title":"毎日のフロントエンド　4"},{"content":"第三天 HTML #Question: HTML 全局属性(global attribute)有哪些（包含HTML5）?\n Global attributes - HTML: HyperText Markup Language | MDN\n Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.\ndocument.body.__proto__\n accesskey: 生成键盘快捷键提示。Provides a hint for generating a keyboard shortcut for the current element. autocapitalize: 控制用户的文本输入 是否 如何 自动大写。 Controls whether and how text input is automatically capitalized as it is entered/edited by user. autofocus: 标识一个元素是否在页面加载时候聚焦。 Indicates that an element is to be focused on page load, or as soon as the \u0026lt;dialog\u0026gt; it is part of is displayed. Boolean, initially false. class: 一个以空格分隔的元素的类名（classes ）列表，它允许 CSS 和 Javascript 通过类选择器 (class selectors) 或 DOM 方法( document.getElementsByClassName)来选择和访问特定的元素。 contenteditable: 指定元素内容是否可编辑。 An enumerated attribute indicating if the element should be editable by the user. data-*: 一类自定义数据属性，它赋予我们在所有 HTML 元素上嵌入自定义数据属性的能力。 Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between HTML and its DOM representation that may be used by scripts. dir: 设置元素文本方向（默认 ltr；rtl）。An enumberated attribute indicating the directionality of the element\u0026rsquo;s text. It can have the following values. draggable: 设置元素是否可拖拽。 An enumerated attribute indicating whether the element can be dragged, using the Drag and Drop API. enterkeyhint: Hints what action label (or icon) to present for the enter key on virtual keyboards. hidden: 布尔属性表示该元素尚未或不再相关。例如，它可用于隐藏在登录过程完成之前无法使用的页面元素。A Boolean attribute indicates that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page tha can\u0026rsquo;t be used until the login process has been completed. The broweser won\u0026rsquo;t render such elements. This attribute must not be used to hide content that could legitimately be shown. id: 元素 id，文档内唯一。 Defines a uniwue identifier which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling(with CSS). inputmode: 向浏览器提供有关在编辑此元素或其内容时要使用的虚拟键盘配置类型的提示。主要用于 \u0026lt;input\u0026gt;元素。 Provides a hint to browesers as to the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on \u0026lt;input\u0026gt; elements. is, itemid, itemprop, itemref, itemscope, itemtype, lang, part, slot, spellcheck, style, tabindex, title, translate  CSS #Question: 在页面上隐藏元素的方法有哪些？\n占位：\n visibility: hidden; 页面会渲染只是不限显示 margin-left: -100%; opacity: 0; transform: scale(0); z-index: -9999; (置于最下层) ransform: skew(90deg, -90deg);  不占位：\n display: none; 页面不会渲染，可以减少首屏渲染的时间，但是会引起回流和重绘 width: 0; height:0; overflow: hidden;  仅针对 块内文本元素：\n text-indent: -9999px; font-size: 0;  JAVASCRIPT #Question: 去除字符串中最后一个指定的字符\n// regExp function deleteLastStr(str, target) { if (!target || typeof str !== \u0026#39;string\u0026#39; || typeof target !== \u0026#39;string\u0026#39;) return str; let reg = new RegExp(`${target}(?=([^${target}]*)$)`); return str.replace(reg, \u0026#39;\u0026#39;); } Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-16T17:39:42+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/","title":"毎日のフロントエンド　3"},{"content":"第二天 HTML #Question: HTML 的元素有哪些（包含 HTML5）？\n块级元素 Block\n Block elements are meant to structure the main parts of your page, by dividing your content in coherent blocks.\n  常用：div、p、ul、li、ol 定义页面结构（Structure elements）: aside、footer、header、nav、section、main 文章：address、article、figure、figcaption、h1、h2、h3、h4、h5、h6、pre 表格：table、thead、tbody、tfoot、th、td、caption 表单：form 其他：canvas  行内元素 Inline\n Inline elements are meant to differentiate part of a text, to give it a oarticular function or meaning. Inline elements usually comprise a single or few words.\n  常用：a、img、span 文本：em、i、strong、small 表单：button、input、label、option、progress、select、textarea 媒体：audio、video   Block elements can contain either block or inline elements. However, inline elements can only contain other inline elements.\n HTML5 新增\n audio：音频 video：视频 header：头部 section：内容块 footer：底部 aslide：侧边 nav：导航 address：地址  CSS 边框(borders):\n border-radius 圆角 box-shadow 盒阴影 border-image 边框图像  背景:\n background-size 背景图片的尺寸 background_origin 背景图片的定位区域 background-clip 背景图片的绘制区域  渐变：\n linear-gradient 线性渐变 radial-gradient 径向渐变  文本效果;\n word-break word-wrap text-overflow text-shadow text-wrap text-outline text-justify  转换：\n 2D 转换属性 transform transform-origin  2D 转换方法\n translate(x,y) translateX(n) translateY(n) rotate(angle) scale(n) scaleX(n) scaleY(n) rotate(angle) matrix(n,n,n,n,n,n)  3D 转换： *3D 转换属性：\n transform transform-origin transform-style  3D 转换方法\n translate3d(x,y,z) translateX(x) translateY(y) translateZ(z) scale3d(x,y,z) scaleX(x) scaleY(y) scaleZ(z) rotate3d(x,y,z,angle) rotateX(x) rotateY(y) rotateZ(z) perspective(n)  过渡\n transition  动画\n @Keyframes 规则 animation  弹性盒子(flexbox) 多媒体查询@media\n#Question: CSS3 有哪些新增的特性？\nJavascript #Question: 写一个方法去掉字符串中的空格\nconst str = \u0026#39; s t r \u0026#39;; // A frozen object can no longer be changed const POSITION = Object.freeze({ left: Symbol(), right: Symbol(), both: Symbol(), center: Symbol(), all: Symbol(), }); function trim(str, position = POSITION.both) { if (!!POSITION[position]) throw new Error(\u0026#39;unexpected position value\u0026#39;); switch (position) { case POSITION.left: str = str.replace(/^\\s+/, \u0026#39;\u0026#39;); break; case POSITION.right: str = str.replace(/\\s+$/, \u0026#39;\u0026#39;); break; case POSITION.both: str = str.replace(/^\\s+/, \u0026#39;\u0026#39;).replace(/\\s+$/, \u0026#39;\u0026#39;); break; case POSITION.center: while (str.match(/\\w\\s+\\w/)) { str = str.replace(/(\\w)(\\s+)(\\w)/, `$1$3`); } break; case POSITION.all: str = str.replace(/\\s/g, \u0026#39;\u0026#39;); break; default: } return str; } const result = trim(str); console.log(`|${result}|`); // |s t r| Regex: string.replace(/\\s/g, \u0026#39;\u0026#39;); join: string.split(\u0026#39; \u0026#39;).join(\u0026#39;\u0026#39;); Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\nHTML - Free tutorial to learn HTML and CSS\n","date":"2021-09-15T19:48:33+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/","title":"毎日のフロントエンド　2"},{"content":"第一天 HTML #Question: 页面导入样式时，使用 link 和@import 有什么区别？\n  \u0026lt;link\u0026gt; 是HTML的标签。 The @import is used to import style rules from other style sheets.\n\u0026lt;!-- @import Syntax --\u0026gt; @import url; @import url list-of-media-queries; @import url supports(supports-query); @import url supports(supports-query) list-of-media-queries;   \u0026lt;link\u0026gt; 引入的样式，在页面加载时，同时加载。 @import 引入的样式需要等页面加载完成之后再加载。\n  \u0026lt;link\u0026gt; 不存在兼容性问题，@import 不兼容 ie5 以下\n  \u0026lt;link\u0026gt; 可通过 js 操作 DOM 动态引入样式， @import 不可以\n  CSS #Question: 圣杯布局和双飞翼布局的理解和区别，并用代码实现\n即 css 三栏布局\u0026mdash;改变 viewpoint 宽度，两个边栏的宽度不变(左右定宽)，只会中间的区域变化， 且 中间部分优先渲染\n \n圣杯布局 - Holy Grail Layout HolyGrailLayout - codepen\n  利用 float 和 margin 负值 并列 利用 父容器设置padding   Point:\n  添加 center left right, 并为三个部分设置 float: left; position: relative;(脱离文档流)\n  center 区域设置 width: 100%;, 使 center 占满一整行\n  center 在最上面，此时需要为 left 区域 设置 margin-left: -100%; 将left移动到center左侧\n  此时 left 部分会覆盖 center 的左侧部分，因此 给三个部分统一的 container 设置 padding: 0 100px; (左右两部分的宽度)\n  为总的 container 添加 padding 之后，left 部分同样受影响，此时 需要使用 relative 负值 向左移动一个 left 宽度： left: -100px;\n  同理需要为 right 区域 设置： margin-left: -100px; right: -100px\n  \u0026lt;header\u0026gt;HEADER\u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;!-- center 优先加载，因此放在第一个 --\u0026gt; #center-one; center-two; center-three 中间宽度自适应 \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;left\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt;right\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;footer\u0026gt;FOOTER\u0026lt;/footer\u0026gt; * { background: lightgray; } .container { padding: 0 100px; } .container::after { /* 清除浮动塌陷*/ content: \u0026#39;\u0026#39;; display: block; clear: both; } .main { background: orange; width: 100%; height: 100px; float: left; } .left { background: brown; width: 100px; height: 100px; margin-left: -100%; float: left; position: relative; left: -100px; } .right { background: green; width: 100px; height: 100px; margin-left: -100px; float: left; position: relative; right: -100px; } header, footer { height: 60px; line-height: 60px; background-color: green; text-align: center; font-size: 30px; font-weight: bolder; } footer { background-color: lightcoral; } 双飞翼 shuangfeiyi\npoint:\n  wrapper left right为三部分设置 float: left\n  center 部分的 外层 wrapper 设置 width: 100%; 占满一整行\n  left 区域 margin-left: -100%; right 区域margin-left: -100px; 使左右翼分置两侧\n  此时center的内容被覆盖，除了使用圣杯法的外围 container 的 padding， 双飞翼使用了： 在center区域添加内层 div 并给内层 添加 margin: 0 100px; 压缩中心区域\n  \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt;头部\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;center\u0026#34;\u0026gt;主要区域\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;左侧\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt;右侧\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt;底部\u0026lt;/div\u0026gt; .wrapper { width: 100%; float: left; } .center { background-color: coral; margin: 0 100px; /*为主区域设置 左右 外边距 压缩主区域，并被包裹*/ } .left { background-color: yellow; width: 100px; float: left; margin-left: -100%; } .right { background-color: lightblue; width: 100px; float: left; margin-left: -100px; } .footer { clear: both; } .header, .footer { height: 60px; line-height: 60px; background-color: green; text-align: center; font-size: 30px; font-weight: bolder; } Javascript #Question: 用递归算法实现，数组长度为 5 且元素的随机数在 2-32 间不重复的值\nDescription:\n 生成一个长度为 5 的空数组 arr 生成一个（2－32）之间的随机整数 rand 把随机数 rand 插入到数组 arr 内，如果数组 arr 内已存在与 rand 相同的数字，则重新生成随机数 rand 并插入到 arr 内[需要使用递归实现，不能使用 for/while 等循环] 最终输出一个长度为 5，且内容不重复的数组 arr  var arr = new Array(5); var num = randomNum(); var i = 0; randomArr(arr, num); function randomNum() { return Math.floor(Math.random() * 30 + 2); } function randomArr(arr, num) { if (arr.indexOf(num) === -1) { arr[i] = num; i++; } else { num = randomNum(); } if (i \u0026gt; 5) { console.log(arr); return; } else { randomArr(arr, num); } }   Getting a random Number between two values  // The returned value is no lower than (and may possibly equal) min, and is less than (and not equal) max function getRandomArbitrary(min, max) { return Math.random() * (max - min) + min; } Math.random() - JavaScript | MDN\nReference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-14T11:58:23+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/","title":"毎日のフロントエンド　1"},{"content":"What is \u0026ldquo;Lifting State up\u0026rdquo; and Why we need it? Lifting state up is a common pattern that is essential for React developer to know. It helps us avoid more complex pattern for managing our state.\nOften there will be a need to share state between different components. The common approach to share state between two components is to move the state to common parent of the two compenont.\n我们可以很清楚的明白 React 状态提升主要就是用来处理父组件和子组件的数据传递的；他可以让我们的数据流动的形式是自顶向下单向流动的，所有组件的数据都是来自于他们的父辈组件，也都是由父辈组件来统一存储和修改，再传入子组件当中。\n  We lift up state to a common ancestor of components that need it, so that they can nall share in the state. This allows us to mor4e easily share state among all of these components that need rely upon it.\n   There should be a single \u0026ldquo;source of truth\u0026rdquo; for any data that changes in application. Usuall, the state is first added to the component that needs it for rendering. If any other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync thje state between different components, you should rely on the top-down data flow.\n  Lifting state takes less work to find and isolate bugs. Since any state \u0026ldquo;lives\u0026rdquo; in some component and that component alone can change it. Additionally, we can implement any custom logic to reject or transform or validate user input.\n  If something can be derived from eother props or state, it probably shouldn\u0026rsquo;t be in the state.\n  ","date":"2021-09-13T17:34:37+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/liftup-cover_hu13e64fc3938bf48c35bf882b9c49b497_2861451_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（六）"},{"content":"防抖 与 节流 Debouncing and Throttling in Javascript  Debouncing and Throttling are two widely-used techniques to improve the performance of code that gets executed repeatedly within a short time(a peroid of time).\n  devbounce-throttle \nDebouncing 防抖 用来实现高频触发函数调用时，实际只调用最后一次函数执行。\n即： 触发事件后过一段时间才执行函数， 如果在这段时间内再次触发，则重新计时。\n用于可能出现高频调用的 DOM 或 样式修改， 这种高频调用会导致页面高频重排重绘，DOM 闪烁抖动，影响页面性能。\nImplementing Debounce:  Start with o timeout If the debounced function is called again, reset the timer to the speccial delay In case of timeout, call the debounced function.  Thus every call to a debounce function resets the timer and delays the call.\nDebounce is higher-order function, which is a function that returns anotehr function. This is done to form a closure around the handler and delay function parameters and the timer variable so that their values are preserved.\nIf we are invoking for the first time, our function will execute at the end of our delay. If we invoke and then invoke again before the end of our delay, the delay restarts.\n 调用 setTimeout 会返回一个 timeoutId , 然后通过调用 clearTimeout 清除 制定的 timeoutId\n self 和 apply  在 apply 中 会将调用的函数（handler）， 绑定到 this 中， 所以如果 不用 之前创建的 self 而是直接使用 this, 可能会产生问题，比如： 需要防抖的handler是在全局环境中调用时， this 执行上下文是 window， 不能指向绑定事件的元素上。 因此，使用 apply 显式地 将当前的执行上下文的this 绑定到 handler 上，以使元素上的handler生效。  // Debounce function debounce(handler, delay) { let timer = null; return function () { let self = this; let args = arguments; // arguments 是一个类数组对象， 指向传入的参数。  if (timer) clearTimeout(timer); // 清除前一个需要debounce 的函数  timer = setTimeout(function () { // apply 会将调用的函数, 绑定到 apply第一个参数指向的上下文中(此处的 self)， 并且可以接受一个数组或类数组对象作为后续参数  handler.apply(self, args); }, delay); }; } //test function testDebounce() { console.log(\u0026#39;this is a test.\u0026#39;); } document.onmousemove = function () { debounce(testDebounce); }; 用箭头函数简化  箭头函数的 this 指向函数定义时 上下文this 使用扩展运算符，避免定义 arguments  function debounce(handler, delay = 1000) { let timer = null; return (...args) =\u0026gt; { if (timer) clearTimeout(timer); timer = setTimeout(() =\u0026gt; { handler(args); }, delay); }; }  Throttling 节流 Throttling or sometimes is also called throttle function is a practise used in websites. To throttle a function means to ensure that the function is called at most once in a specified time period. This means throttling will prevent a function from running if it has run \u0026ldquo;recently\u0026rdquo;. Throttling also ensures a function is run regularly at a fixed rate.\nThrottlig is used to call a function after every millisecond or a particular interval of time only the first click is executed immediately.\n用来实现**阻止**在短时间内重复多次触发同一个函数。\n即： 每一个时间间隔内， 只执行一次函数, timer 存在的时候 直接返回，不存在的时候，执行setTimeout(执行完，会清空timer)\nImplementing Throttle: // Throttle function throttle(handler, delay) { let timer = null; return function () { let self = this, args = arguments; if (timer) return; timer = setTimeout(function () { handler.apply(self, args); timer = null; }, delay); }; } // test function testThrottle(e, content) { console.log(e, content); } var testThrottleHandler = throttle(testThrottle, 1000); document.onmousemove = function (e) { testThrottleHandler(e, \u0026#39;throttle\u0026#39;); }; 使用 箭头函数 优化 function throttle(handler, delay) { let timer = null; return (...args) =\u0026gt; { if (timer) return; timer = setTimeout(() =\u0026gt; { handler(args); timer = null; }, delay); }; } // example in reference const throttle = (func, limit) =\u0026gt; { let lastFunc; let lastRan; return function () { const context = this; const args = arguments; if (!lastRan) { func.apply(context, args); lastRan = Date.now(); } else { clearTimeout(lastFunc); lastFunc = setTimeout(function () { if (Date.now() - lastRan \u0026gt;= limit) { func.apply(context, args); lastRan = Date.now(); } }, limit - (Date.now() - lastRan)); } }; }; The first call to the function will execute and sets the limit period delay. We can call the function during this period but it will not fire until the throttle period has passed. Once is has passed, the next invocation will fire and the process repeats.\nCompare Debounce and Throttle Similarities   都使用了 setTimeout\n  目的都是降低回调函数的执行频率， 节省资源。\n  Difference   Debounce 防抖关注的是：一定时间段内，连续触发的事件，只在最后一次触发的时候 执行。\n  Throttle 节流关注的是：侧重一个时间间隔内，只执行一次。\n  使用场景 use cases   Debounce 防抖的使用场景： 连续的事件，只需要触发一次的场景， 例如：\n 搜索框 输入搜索内容，最后输入完成后，再发送请求； 号码， 邮箱的输入验证； 窗口大小的调整： 在调整完成后再计算窗口大小，防止重复渲染。 Autocomplete: Often times, search boxes offer dropdowns that provide autocomplete options for the user\u0026rsquo;s current input. Sometimes the items suggested are fetched from the backend API. Here, debouncing can be applied in implementing suggestive text where we wait for the user to stop typing for a few seconds before suggesting the text. Thus, on every keystrokem, we wait for some seconds before giving out suggestions. Debouncing a resize event handler. Debouncing a save function in an autosave feature. Don\u0026rsquo;t do anything whiule the user drags and drops. Don\u0026rsquo;t make any Axios requests until the user stops typing.    Throttle 节流的使用场景： 间隔一段时间之行一次回调函数的场景：\n 滚动加载 或者 加载更多的场景 表单的多次点击提交 Gaming Scroll event handler Throttling a button cliock so er can\u0026rsquo;t spam click Throttling an API call Throttling a mousemove/touchmove event handler.    Reference javaScript 节流与防抖\nJavaScript 防抖与节流 - YouTube\nDebouncing and Throttling in JavaScript: Comprehensive Guide | by Ayush Verma | Towards Dev\n","date":"2021-09-12T17:48:16+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/throttle-cover_huce846bc90c63bb66fde6ebec9b941b5a_4551878_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（五）"},{"content":"关键知识点六： Restful API 设计的几个最佳实践 steps toward the glory of REST Richardson Maturity Model\nLevel 0 The Starting point for the model is using HTTP as a transport system for remote interactions, but without using any of the mechanisms of the web.If you use SOAP or XML-RPC it\u0026rsquo;s basically the same mechanism, the only difference is that you wrap the XML messages in some kind of envelope.\nLevel 1 - Resources At level One, rather than making all the requests to s singular service endpoint, we start talking to individual resources.\nLevel 2 - Http Verbs (Method) Level 2 moves away from being used as tunneling mechanisms allowing you to tunnel your interactions through HTTP, using the http verbs as closely as possible to how they are used in Http itself.\nHTTP defines GET as a safe operation, that is it doesn\u0026rsquo;t make any significant changes to the state of anything.\u0026mdash; This allows us to invoke GETs safely any number of times in any order and get the same results each time.(幂等 - 术语表 | MDN)\nTHE KEY elements that are supported by the existence of the web are the strong separation between safe (eg: GET) and non-safe operations, together with using status codes to help communicate the kinds of errors we run into.\nLevel 3 - Hypermedia Controls THE Highest and final level introduces something that you often hear referred to under the おかしい acronym of HATEOAS (Hypertext As The Engine Of Application State).\nEach response has a link element which contains a URI to tell us how to do next, and the URI of the resource we need to manipulate to do it.\nOne obvious benefit of hypermedia controls is that it allows the server to change its URI scheme without breaking clients. As long as clients look up the \u0026ldquo;add-test\u0026rdquo; link URI then the server can juggle all URIs other than the initial entrypoint.\nA further benefit is that it helps client developers explore the protocal. The links give client developers a hint as to what may be possible next. AND simillarly it also allows the server team tp advertise new capabilities by putting new links in the responses.\nSo as a frontend developer, if we can keeping an eye out for unknown links, these links can be a trgger for further exploration.\nBest Practise 最佳实践 一， 一类资源两个 URL - Use Two URLs per Resource # 资源集合： /epics # 资源元素： /epics/5 二， 使用一致的复数名词 - Use Consistently Plural Nouns 只应该使用统一的复数名词来表达资源\nGET /stories GET /stories/3 三， 资源 URI 使用名词而不是动词 - Use Nouns instead of Verbs for Resources # wrong /getAllEpics /getAllFinishedEpics /createEpic /updateEpic RESTful API Design.HTTP METHOD\n# right GET /epics GET /epics?state=finished POST /epics PUT /epics/5 四， 将实际数据包装在 data 字段中 // GET /epics在数据字段中返回epic资源列表 { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;epic2\u0026#34; } ] } // GET /epic/1在数据字段中返回id为1的epic对象 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34; } }  PUT，POST 和 PATCH 请求的有效负荷(payload)还应包含实际对象的数据字段。\n  JSON:API — A specification for building APIs in JSON\n 五， 对可选及复杂参数使用查询字符串 # 保持URL简单, 使用基本URL，将复杂或可选参数移动到查询字符串。 GET /employees?state=internal\u0026amp;title=senior GET /employees?id=1,2 # 还可以使用JSON API方式过滤 GET /employees?filter[state]=internal\u0026amp;filter[title]=senior GET /employees?filter[id]=1,2 六， 使用 HTTP 状态码 status codes HTTP response status codes - HTTP | MDN\n状态码的使用要尽量精确。如果资源可用，但禁止用户访问，则返回 403。如果资源曾经存在但现已被删除或停用，请使用 410。\n七， 提供有用的错误消息 // request GET /epics?state=unknow // response { \u0026#34;errors\u0026#34;: [ { \u0026#34;status\u0026#34;: 400, \u0026#34;detail\u0026#34;: \u0026#34;Invalid state. Valid values are \u0026#39;biz\u0026#39; or \u0026#39;tech\u0026#39;\u0026#34;, \u0026#34;code\u0026#34;: 352, \u0026#34;links\u0026#34;: { \u0026#34;about\u0026#34;: \u0026#34;http://www.jira.com/rest/errorcode/352\u0026#34; } } ] } 八，HATEOAS - Provide Links for Navigating through your API // request GET /epic // 好的做法是在响应中提供客户可以跟进的链接 // response { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34;, \u0026#34;links\u0026#34;: [ { \u0026#34;story\u0026#34;: \u0026#34;http://www.domain.com/epics/21/stories\u0026#34; } ] } ] } 优点：\n 如果 API 被更改，客户端依旧会获取有效的 URL（只要保证在 URL 更改时更新链接） API 变得更具自描述性，客户端不必经常查找文档  九， 恰当地设计关系 在 API 中设计关系基本上有三种常用选项：链接，侧载和嵌入。\nThere are basically three common options to design relationships within an API: Links, Sideloading and Embedding.\nBasically, you should design the relationships depending on the client\u0026rsquo;s access schema and the tolerable request amount and payload size.\nLinks: { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;relationships\u0026#34;: { \u0026#34;manager\u0026#34;: \u0026#34;http://www.domain.com/employees/1/manager\u0026#34;, \u0026#34;teamMembers\u0026#34;: [ \u0026#34;http://www.domain.com/employees/12\u0026#34;, \u0026#34;http://www.domain.com/employees/13\u0026#34; ] //or \u0026#34;teamMembers\u0026#34;: \u0026#34;http://www.domain.com/employees/1/teamMembers\u0026#34;  } } ] }   Small payload size. : It\u0026rsquo;s good, if the client doesn\u0026rsquo;t need the manager and the teamManager every time.\n  Many Request. : It\u0026rsquo;s bad, if nearly every client needs this data. MANY additional requests may be required; in the worse case for every employee.\n  The client has to stitch the data together in order to get the big picture.\n  Sideloading: We can refer to the relationship with a foreign key and put the referred entitiese also in the payload but under the dedicated field included. This approach also called \u0026ldquo;Compound Documents\u0026rdquo;.\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;relationships\u0026#34;: { \u0026#34;manager\u0026#34;: 5, \u0026#34;teamMembers\u0026#34;: [12, 13] } } ], \u0026#34;included\u0026#34;: { \u0026#34;manager\u0026#34;: { \u0026#34;id\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Kevin\u0026#34; }, \u0026#34;teamMembers\u0026#34;: [ { \u0026#34;id\u0026#34;: 12, \u0026#34;name\u0026#34;: \u0026#34;Albert\u0026#34; }, { \u0026#34;id\u0026#34;: 13, \u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34; } ] } } The client may also control the sideloaded entities by a query parameter like GET /employee?include=manager,teamMembers.\n One singel request. Tailored payload size. No duplication (e.g. you only deliver a manager once even if he is referenced by many employees). The client still has to stitch the data together(拼接数据) in order to resolve the relationships. which can be very cumbersome.  Embedding: { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;manager\u0026#34;: { \u0026#34;id\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Kev\u0026#34; }, \u0026#34;teamMembers\u0026#34;: [ { \u0026#34;id\u0026#34;: 12, \u0026#34;name\u0026#34;: \u0026#34;Albert\u0026#34; }, { \u0026#34;id\u0026#34;: 13, \u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34; } ] } ] }   Most conveninet for the client. It\u0026rsquo;s can directly follow the relationships to get the actual data.\n  Relationships may be loaded in vain if the client does not need it.\n  Increased payload size and duplications. Referenced entities may be embedded multiple times.(not so good)\n  十， 小驼峰法命名属性 - Use CamelCase for Attribute Names {\u0026quot;yearOfBirth\u0026quot;: 1970}\nDon not use underscores or capitalize (year_of_birth or YearOfBirth). Often the RESTful api will be consumed by a client written in JS. Typically the client wil convert the JSON response to a JS object( var person = JSON.parse(response) ) and call its attributes. Therefore, it\u0026rsquo;s a good idea to stick to the JS convention which makes the js code more readable and intuitive.\n// Don\u0026#39;t person.year_of_birth; // violates JavaScript convention person.YearOfBirth; // suggests constructor method  // Do person.yearOfBirth; 十一，用动词表示操作 - Use Verbs for Operations 有时对 API 调用的响应不涉及资源（如计算，转义或变换）。\nSometimes a response to an API call does not involve resources (like calculate, translate, or convert)\n//Reading GET /translate?from=de_DE\u0026amp;to=en_US\u0026amp;text=Hallo GET /calculate?para2=23\u0026amp;para2=432 //Trigger an operation that changes the server-side state POST /restartServer //no body POST /banUserFromChannel { \u0026#34;user\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;channel\u0026#34;: \u0026#34;serious-chat-channel\u0026#34; } In this case, no resource are involved. Instead, the server executes an operation and returns the result to the client.\nHence, we shoud use verbs instead of nouns in our URL to distinguish clearly the operations (RPC-style API) from the RESTful endpoints(resources for modelling the domain.)\nCreating those RPC-style API instead of REST is appropriate for operations. Usualy, it\u0026rsquo;s simpler and more intuitive than trying to be REST for operations (e.g. PATCH /server with {\u0026quot;restart\u0026quot;: true}). AS the rule of thumb, REST is nice for interacting with domain models and RPC is suitable for operations.\n Understanding RPC Vs REST For HTTP APIs — Smashing Magazine\n 十二， 分页 Provide Pagination It is almost never a good idea to return the whole data of your db at once.\nConsequently, you should provide a pagination mechanism. There are TWO popular approaches below:\n  Offset-based Pagination\n  Keyset-based Pagination (Continuation Token) aka CURSOR\u0026mdash;\u0026ndash; recommended.\n  Offset-based # use the parameters offset and limit, which are well-known from database  /employees?offset=30\u0026amp;limit=15 # returns the employees 30 to 45  # when the client omits the parameter, the server team should use default(like offset=0 and limit=100)  Never return all resources.\n You can provide links for getting the next or previous page. Just construct URLs with the appropriate offset and limit.\nGET /employees?offset=20\u0026amp;limit=10 { \u0026#34;pagination\u0026#34;: { \u0026#34;offset\u0026#34;: 20, \u0026#34;limit\u0026#34;: 10, \u0026#34;total\u0026#34;: 3465 }, \u0026#34;data\u0026#34;: [ //...  ], \u0026#34;links\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;http://www.domain.com/employees?offset=30\u0026amp;limit=10\u0026#34;, \u0026#34;prev\u0026#34;: \u0026#34;http://www.domain.com/employees?offset=10\u0026amp;limit=10\u0026#34; } } Keyset-based Pagination aka continuation TOKEN, CURSOR (recommend) The presented offset-based pagination is easy to implement but comes with drawbacks. They are slow (SQL’s OFFSET clause becomes very slow for large numbers) and unsafe (it’s easy to miss elements when changes are happening during pagination).\n  SQL’s OFFSET clause becomes very slow for large numbers it’s easy to miss elements when changes are happening during pagination   # That’s why it’s better to use an indexed column. # Let’s assume that our employees have an indexed column data_created and the collection resource /employees?pageSize=100 returns the oldest 100 employees sorted by this column. # Client only has to take the dateCreated timestamp of the last employee and uses the query parameter createdSince to continue at this point. GET /employees?pageSize=100 # The client receives the oldest 100 employees sorted by `data_created` # The last employee of the page has the `dataCreated` field with 1504224000000 (= Sep 1, 2017 12:00:00 AM) GET /employees?pageSize=100\u0026amp;createdSince=1504224000000 # The client receives the next 100 employees since 1504224000000. # The last employee of the page was created on 1506816000000. And so on. This solves already many of the disadvantages of offset-based pagination, but it’s still not perfect and not very convenient for the client.\n It’s better to create a so-called continuation token by adding additional information (like the id) to the date in order to improve the reliability and efficiency. Moreover, you should provide a dedicated field in the payload for that token so the client doesn’t have to figure it out by looking at the elements. You can even go further and provide a next link.   Web API Pagination with the \u0026lsquo;Timestamp_ID\u0026rsquo; Continuation Token\n // request GET /employees?pageSize=100 // response { \u0026#34;pagination\u0026#34;: { \u0026#34;continuationToken\u0026#34;: \u0026#34;1504224000000_10\u0026#34; }, \u0026#34;data\u0026#34;: [ // ...  // last element:  { \u0026#34;id\u0026#34;: 10, \u0026#34;dateCreated\u0026#34;: 1504224000000 } ], \u0026#34;links\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;http://www.domain.com/employees?pageSize=100\u0026amp;continue=1504224000000_10\u0026#34; } } The next link makes the API RESTful as the client can page through the collection simply by following these links(HATEOAS). No need to construct URLs manually. Moreover, we can simply change the URL structure without breaking clients( called evolvability)\n十三， Check out JSON:API  JSON:API — A specification for building APIs in JSON\n Just for Inspiration. Feel free to make up your own mind about JSON:API.\n十四， 确保 API 的可演进 Ensure Evolvability of the APIs Avoid Breaking Changes Ideally, APIs should be stable. Basically, breaking changes should not happen.(like change the whole payload format or the URL scheme). SO how can we still evolve our API without breaking the clients:\n  保持向后兼容 Make backward-compatible changes.Adding field is no problem, as long as the clients are tolerant.\n  复制和弃用。Duplication and Deprecation. In order to cahnge an existing field, you can add the new one next to the old field and deprecated the old one in the documentation. After a while, you can remove the old field.\n  超媒体和 HATEOAS。Utilize Hypermedia and HATEOAS. As long as the API client uses the links in the response to navigate through the API (and doesn’t craft the URLs manually), you can safely change the URLs without breaking the clients.\n  使用新名称创建新资源。Create new resources with new names. If new business requirements lead to a completely new domain model and workflows, you can create new resources. That’s often quite intuitive as the domain model has a new name anyway (derived from the business name). Example: A rental service now also rents bikes and segways. So the old concept car with the resource /cars doesn’t cut it anymore. A new domain model vehicle with a new resource /vehicles is introduced. It’s provided along with the old /cars resource.\n  Keep Bussiness Logic on the Server-Side DO not let our service become a dump data access layer which provides CRUD functionality by directly exposing your databaes model. THIS creates HIGH COUPLING.\n  The bussiness logic is shifted to the client and is often replicated between the client and the server (just think about validation.). We have to keep both in sync.\n  The client will be coupling to the server\u0026rsquo;s database model. This is not good.\n  The business workflows are getting distributed between the client and the server. IN TURN, that makes it likely that new business requirements require a change in both the client and the server and to break API. So the API/system is not that evolvable.\n  因此，我们应该构建高层次/基于工作流的 API 而不是低级 API。 So we should build high-level/workflow-based APIs instead of low-level APIs. EXAMPLE:\nDon’t provide a simple CRUD service for the order entities in the database.\nDon’t require the clients to know that to cancel an order, the client has to PUT an order to the generic /order/1 resource with a certain cancelation payload (reflecting the database model) in it. This leads to high coupling (business logic and domain knowledge on the client-side; exposed database model).\nInstead, provide a dedicated resource /order/1/cancelation and add a link to it in the payload of the order resource. The client can navigate to the cancelation URL and send a tailored cancelation payload. The business logic for mapping this payload to the database model is done in the server.\nMoreover, the server can easily change the URL without breaking the client, because the client simply follows links. Besides, the decision logic, if an order can be canceled or not is now in the server: If a cancelation a possible the server adds the link to the cancelation resource in the order payload. So the client only has to check if the cancelation links are present (for example to know if he should draw the cancelation button). So we moved domain knowledge away from the client back to the server. Changes to the cancelation conditions can be easily applied by only touching the server, which in turn make the system evolvable. No API change is required.\n十五，版本化 Consider API Versioning Nevertheless, you might end up in situations where the above approaches don’t work and you really have to provide different versions of your API.\nNevertheless, here are the two most popular approaches for versioning:\n  Versioning via URLs: /v1/\n  Versioning via the Accept HTTP Header:\nAccept: application/vnd.myapi.v1+json   Versioning via URLs Just put the version number of your API in the URL of every resource. /v1/books.\n  Pros:\n Extremely simple for API developers. Extremely simple for API clients. URLs can be copied and pasted.    Cons:\n Not RESTful Breaking URLs. clients have to maintain and update the URLs.     Strictly speaking, this approach is not RESTful because URLs should never change.The question is, how much effort would it take the clients to update the URLs? If the answer is “only a little” then URL versioning might be fine.\n Versioning via Accept HTTP Header (Content Negotiation)   Pros:\n URLs keep the same Considered as RESTful HATEOAS-friendly    Cons:\n Slightly more difficult to use. Clients have to pay attention to the headers. URLs can’t be copied and pasted anymore.    Reference Richardson Maturity Model\nRestful API 设计最佳实践 - Tech For Fun\nRESTful API Design. Best Practices in a Nutshell.\nREST beyond the obvious – API design for ever evolving systems by Oliver Gierke @ Spring I/O 2018 - YouTube\n","date":"2021-09-11T15:14:04+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/cover-for-bestpractise_hu51089687c1fc9d12fc6b9e54035b4415_553553_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（四）"},{"content":"知识点五： Restful API 设计 1. Endpoint 表示 API 的具体地址\n在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中 不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的\u0026quot;集合\u0026quot;（collection），所以 API 中的名词也应该使用复数。\n# Example 应使用 HTTPs 协议 https://api.example.com/v1/books https://api.example.com/v1/movies 2. HTTP METHOD 对于资源的具体操作，应由 HTTP 动词表示。\n# 常用方法, (对应 SQL 语句) GET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE）：在服务器新建一个资源。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。 DELETE（DELETE）：从服务器删除资源。 # 具体的使用实例 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 3. Filtering 如果记录数量很大，服务器不可能将全部数据返回，此时，API 应提供参数，用于过滤返回结果。\n# 以下是一些常用参数 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page=2\u0026amp;per_page=100：指定第几页，以及每页的记录数。 ?sortby=name\u0026amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件  参数的设计允许存在冗余，例如：GET /zoo/ID/animals 等价于 GET /animals?zoo_id=ID\n 4. Status Code # 服务器向用户返回的状态码和提示信息,常用状态码如下： 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT - [DELETE]：用户删除数据成功。 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。  幂等 - 术语表 | MDN\n  HTTP response status codes - HTTP | MDN\n 5. Error Handling # 如果状态码是4xx，就应该向用户返回出错信息。 { error: \u0026quot;Invalid API key\u0026quot; } 6. 返回结果的规范 GET /collection：返回资源对象的列表（数组） GET /collection/resource：返回单个资源对象 POST /collection：返回新生成的资源对象 PUT /collection/resource：返回完整的资源对象 PATCH /collection/resource：返回完整的资源对象 DELETE /collection/resource：返回一个空文档 7. Hypermedia API (HATEOAS) RESTful API 最好做到 Hypermedia，即返回结果中提供链接，连向其他 API 方法，使得用户不查文档，也知道下一步应该做什么。\n# 比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。 {\u0026quot;link\u0026quot;: { \u0026quot;rel\u0026quot;: \u0026quot;collection https://www.example.com/zoos\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.example.com/zoos\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;List of zoos\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;application/vnd.yourformat+json\u0026quot; }} Hypermedia API 的设计被称为 HATEOAS。Github 的 API 就是这种设计，访问 https://api.github.com 会得到一个所有可用 API 的网址列表。\nReference RESTful API 设计指南\n","date":"2021-09-10T18:02:49+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/restful-design_hu2eb9b4a82207ed27ffff0ff503057274_1353210_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（三）"},{"content":"关键知识点四： Restful API What is REST REST is acronym for REpresentational State Transfer. It is architectural style for distributed hyermedia systems and was first presented by Roy Fielding in 2000 in his famous dissertation.\nPrinciples of REST   Client-server\n By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.    Stateless\n Each request from client to server must contain all of the information necessary to understand the request, and cannot take advatage of any stored context on the server. Session state is therefore kept entirely on the client.    Cacheable\n Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.    Uniform interface（统一接口）\n  By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. In order to obtain a uniform inerface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: identification of resources; manipulation of resources through representations; self-descriptive messages; and, hypermedia as the engine of application state.\n  identification of resources :使用URI作为资源标识符；客户端和服务器之间，传递这种资源的某种表现层（representation）; 资源本身与返回给 client 的 representation 分开(理解为：URI 只代表资源的实体或资源的位置， 不代表其形式，比如一段文本，可以是 json，HTML，etc)。例如，服务器不直接发送其数据库内容，而是发送一些表示某些数据库记录的 HTML，XML 或 JSON。 具体表现形式，应该在 HTTP 请求头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对\u0026quot;表现层\u0026quot;的描述\n  manipulation of the resources through representations: 当客户端持有资源的表示（包括附加的任何元数据）时，它有足够的信息来修改或删除服务器上的资源\n  Self-descriptive Messages （自描述信息）： 每条消息都包含足够的信息来描述如何处理该消息。\n  hypermedia as the engine of application state: client 通过 body/header/query_params/uri_name 来提供状态，服务器收到这些内容，通过 HTTP 响应状态码和响应头向服务端提供状态，成为超链接。且，在必要时，链接包含在返回的正文（或标题）中，以提供用于检索对象本身或相关对象的 URI。\n    Layered system\n  The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot \u0026ldquo;see\u0026rdquo; beyond the immedite layer with which they are interacting.\n  客户端通常无法判断它是直接连接到终端服务器，还是中间服务器。 中间服务器可以通过启用负载平衡和提供共享缓存来提高系统可伸缩性。 Layers 也可以实施安全策略。\n    Code on demand(optional)(唯一一个可选约束，其他约束必须实现)\n REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts(JS etc). This simplifies clients by reducing the number of features required to be pre-implemented.    Resource  The key abstraction of information in REST is a resource.\n Any information that can be named can be a resource. REST uses a resource indentifier to identify the particular resource involved in an interaction between comonents.\nREST 的名称\u0026quot;表现层状态转化\u0026quot;中，省略了主语。\u0026ldquo;表现层\u0026quot;其实指的是\u0026quot;资源\u0026rdquo;（Resources）的\u0026quot;表现层\u0026quot;。\n所谓\u0026quot;资源\u0026quot;，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个 URI（统一资源定位符）指向它，每种资源对应一个特定的 URI。要获取这个资源，访问它的 URI 就可以，因此 URI 就成了每一个资源的地址或独一无二的识别符。\nRepresentation \u0026ldquo;资源\u0026quot;是一种信息实体，它可以有多种外在表现形式。我们把\u0026quot;资源\u0026quot;具体呈现出来的形式，叫做它的\u0026quot;表现层\u0026rdquo;（Representation）。\nState Transfer 互联网通信协议 HTTP 协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生\u0026quot;状态转化\u0026quot;（State Transfer）。而这种转化是建立在表现层之上的，所以就是\u0026quot;表现层状态转化\u0026quot;。具体如下：\nResource Method  Another important thing associated with REST is resource methods to be used to perform the desired transition. A large number of people wrongly relate resource methods to HTTP GET/PUT/POST/DELETE methods.\n  GET 用来获取资源 POST 用来新建资源（也可以用于更新资源） PUT 用来更新资源 DELETE 用来删除资源   In simplest words, in the REST architectural style, data and functionality are considered resources and are accessed using Uniform Resource Identifiers (URIs). The resources are acted upon by using a set of simple, well-defined operations. The clients and servers exchange representations of resources by using a standardized interface and protocol – typically HTTP.\n  Resources are decoupled from their representation so that their content can be accessed in a variety of formats, such as HTML, XML, plain text, PDF, JPEG, JSON, and others. Metadata about the resource is available and used, for example, to control caching, detect transmission errors, negotiate the appropriate representation format, and perform authentication or access control. And most importantly, every interaction with a resource is stateless.\n ","date":"2021-09-09T20:17:16+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/cover-api_hud4b58edf642f350337f29ff97407729b_1122407_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（二）"},{"content":"第一章 知识点一： 用 create-react-app 初始化项目： 1. Quick Start npx create-react-app react-jira --template typescript # or npm init react-app react-jira # or yarn create react-app react-jira npx create-react-app my-app --use-npm # if you prefer to use npm 2. Folder Structure   For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won’t see them.\n  字体，图片等也同样应置于 scr 目录中\n  Only files inside public can be used from public/index.html.\n  import React, { Component } from \u0026#39;react\u0026#39;; import \u0026#39;./Button.css\u0026#39;; // Tell webpack that Button.js uses these styles  class Button extends Component { render() { // You can use them as regular CSS styles  return \u0026lt;div className=\u0026#39;Button\u0026#39; /\u0026gt;; } }     3. Analizing the Bundle Size npm install --save source-map-explorer or yarn add source-map-explorer // package.json  \u0026#34;scripts\u0026#34;: { + \u0026#34;analyze\u0026#34;: \u0026#34;source-map-explorer \u0026#39;build/static/js/*.js\u0026#39;\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, } 知识点二： 用 Prettier 统一代码格式化风格 1. Quick Start yarn add --dev --exact prettier echo {}\u0026gt; .prettierrc.json # then create a .prettierignore file to let the Prettier CLI and editors know which files to not format.  # Ignore artifacts: build coverage 2. Usage In Command line npx prettier --write . # or yarn prettier --write . Setup In Editor Prettier set up in editor\nGit Hook (Pre-commit Hook) Pre-commit Hook · Prettier\nGit Commitlint commitlint - Lint commit messages\ncommitlint checks if your commit messages meet the conventional commit format.\nConventional Commits 约定式提交\n// 常用类型 type { \u0026#34;build\u0026#34;: \u0026#34;Changes that affect the build system or external dependencies\u0026#34; \u0026#34;ci\u0026#34;: \u0026#34;Changes to our CI configuration files and scripts\u0026#34; // \u0026#34;chore\u0026#34;: \u0026#34;updating grunt tasks etc; no production code change\u0026#34;,  \u0026#34;docs\u0026#34;: \u0026#34;Documentation only changes\u0026#34;, \u0026#34;feat\u0026#34;: \u0026#34;new feature for the user, not a new feature for build script\u0026#34;, \u0026#34;fix\u0026#34;: \u0026#34;A bug fix for user, not a fix to a build script\u0026#34;, \u0026#34;perf\u0026#34;: \u0026#34;A code change that impoves performance\u0026#34;, \u0026#34;refactor\u0026#34;: \u0026#34;A code change that neither fixes a bug nor adds a feature\u0026#34;, \u0026#34;revert\u0026#34;: \u0026#34;If the commit reverts a previous commit, it should begin with revert\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons,etc)\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;Adding missing tests or correcting existing tests\u0026#34;, \u0026#34;BREAKING CHANGE:\u0026#34; }; type(scope?): subject #scope is optional; multiple scopes are supported (current delimiter options: \u0026quot;/\u0026quot;, \u0026quot;\\\u0026quot; and \u0026quot;,\u0026quot;) \n scope\n Example values: #\n init runner watcher config web-server proxy etc   why use conventional commits\n  Automatically generating CHANGELOGS Automatically determining a semantic version bump(base on the types of commits landed) Communicating the nature of changes to teammates, the public, and other stakeholders Triggering build and publish processes Making it easier for people to contribute to you projects, by allowing them to explore a more structured commit history  以上： 一个项目开始阶段的规范化配置。重点： Conventional Commits\n知识点三： Json-server typicode/json-server: Get a full fake REST API with zero coding\n","date":"2021-09-08T23:50:49+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/react-jira-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（一）"},{"content":" Precondition: macOS Big Sur 11.5.2\n Golang\u0026rsquo;s installation and configuration with homebrew in Fish shell 1. Install golang with homebrew brew update brew search golang brew info golang # show the information of golang brew install golang 2. Setup the workspace: Add environment variables: First, we\u0026rsquo;ll need to tell Go the location of our workspace.\nWe\u0026rsquo;ll add some environment variables into shell config.\nbash or zsh The config files is located at home directory:\n.bash_profile, bashrc, or zshrc\nexport GOPATH=$HOME/project/go-workspace # don\u0026#39;t forget to change the path correctly export GOROOT=/usr/local/opt/go/libexec # export GOROOT=/usr/local/Cellar/go/1.17/libexec export PATH=$PATH:$GOPATH/bin export PATH=$PATH:$GOROOT/bin  GOPATH is the place where we get, build and install packages outside the standard Go tree(AND it\u0026rsquo;s not where the executables are), so it is customizable and thus you can get GOPATH wherever you want.\n  GOROOT, however, is the place where the Go binary distributions (In linux, it\u0026rsquo;s normally in /usr/local/go; but for macOs, the Go and the tools are installed in /usr/local/Cellar/go/1.17/libexec by default as well as a soft link to /usr/local/opt/go/libexec will be created at the same time), so on Linux normally we don’t have to set this variable, but on MacOS, we have to change it as brew installs Go tools to a different path.\n fish shell Add the code to home directory\u0026rsquo;s ~/.config/fish/config.fish:\nset -x GOPATH $HOME/project/go-workspace set -x GOROOT /usr/local/opt/go/libexec set -x PATH $PATH:$GOPATH/bin set -x PATH $PATH:$GOROOT/bin Create our own workspace: mkdir -p $GOPATH $GOPATH/src $GOPATH/pkg $GOPATH/bin\n  $GOPATH/src: where we put the go projects source code\n  $GOPATH/pkg: contains every package objects\n  $GOPATH/bin: The compiled binaries\u0026rsquo;s home.\n  ","date":"2021-09-07T23:46:37+09:00","image":"https://youkoucoding.github.io/p/golang-config/cover_hu6ff3cfb4de7da3a30b555c53fec82c73_1051665_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/golang-config/","title":"Install Go on Mac with Homebrew"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片  Photo by Florian Klauer on Unsplash   Photo by Luca Bravo on Unsplash \n Photo by Helena Hertz on Unsplash   Photo by Hudai Gayiran on Unsplash \n![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://youkoucoding.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://youkoucoding.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","date":"2019-03-10T00:00:00Z","permalink":"https://youkoucoding.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://youkoucoding.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://youkoucoding.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://youkoucoding.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/emoji-support/","title":"Emoji Support"}]