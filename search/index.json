[{"content":"第十四日 HTML #Question: 为什么 HTML5 只需要写 \u0026lt;!DOCTYPE HTML\u0026gt; 就可以？  The html document type declaration, also known as DOCTYPE, is the first line of code required in every HTML or xHTML document. The DOCTYPE declaration us an instruction to the web browser about what version of HTML the page is written in. This ensures that the web page is parsed the same way by different web browsers.\n The declaration of HTML5 DOCTYPE is much simpler: it no longer requires a reference to DTDs as it is no longer based on SGML.\nDoctype syntax for HTML5 and beyond:\n\u0026lt;!DOCTYPE html\u0026gt; HTML5 与 HTML4 基于的基准不同。HTML4 基于 SGML 因此需要除了 DOCTYPE 外还需要引入 DTD 来告诉浏览器用什么标准进行渲染。DTD 还分为 标准模式、严格模式。\nHTML5 不基于 SGML，因此后面就不要跟 DTD，但是需要 DOCTYPE 来规范浏览器的渲染行为。\n SGML 是通用标记语言的集合。其中有 HTML、XML，因此需要用 DTD 来指定使用那种规范。\n CSS #Question: position:fixed; 在 ios 下无效该怎么办？ 移动端业务开发，iOS 下经常会有 fixed 元素和输入框(input 元素)同时存在的情况。 但是 fixed 元素在有软键盘唤起的情况下，会出现许多莫名其妙的问题。\n现象： 当采用 fixed 做吸底、吸顶布局时，如果触发键盘弹出事件则 fixed 属性会失效，布局就会被扰乱。其原因解释如下：\n软键盘唤起后，页面的 fixed 元素将失效（即无法浮动，也可以理解为变成了 absolute 定位），所以当页面超过一屏且滚动时，失效的 fixed 元素就会跟随滚动了。\n 第三方库 isScroll.js 可以解决此问题。  JavaScript #Question: 什么是闭包？优缺点分别是什么？ What is a Closure?  Closures is are frequently used in JavaScript for object data privacy, in evently handlers and callback functions, and in partial application, currying(柯里化)，and other functional programming patterns.\n What is Closure? A closure is the combination of a function bundled together with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function\u0026rsquo;s scope from an inner one.\nIN JavaScript, closures are created every time a function is created, at function creation time.\nTo use a closure, define a function inside another function and expose it. To expose a function, return it or pass it to another function.\nThe inner function will have access to the variables in the outer one\u0026rsquo;s scope, even after the outer function has returned.\nExamples Data privacy is an essential property that helps us program to an interface, not an implementation. And among other things, closures are commonly used to give objects data privacy.\nThis is an important concept that helps us build more robust software because implementation details are more likely to change in breaking ways than interface contracts.\nIn javascript, closures are the primary mechanism used to enable data privacy. When you use closures for data privacy, the enclosed varibles are only in scope within the containing (outer) function. You can\u0026rsquo;t get at the data from an outside scope except through the object\u0026rsquo;s provileged methods.\n闭包是可以访问另一个函数作用域的函数。由于 javascript 的特性，外层的函数无法访问内部函数的变量；而内部函数可以访问外部函数的变量（即作用域链）。\nfunction a() { var b = 1; var c = 2; // 这个函数就是个闭包，可以访问外层 a 函数的变量  return function () { var d = 3; return b + c + d; }; } var e = a(); console.log(e());   使用闭包可以隐藏变量以及防止变量被篡改和作用域的污染，从而实现封装\n  缺点就是由于保留了作用域链，会增加内存的开销。因此需要注意内存的使用，并且防止内存泄露的问题。\n  Reference What is the DOCTYPE Declaration in HTML?\nWeb 移动端 Fixed 布局的解决方案 | EFE Tech\n关于闭包 - CNode 技术社区\n","date":"2021-09-28T15:34:08+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/frontend-14-cover_huf633675efa550b3936c0f24944c6beb4_1720619_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-14/","title":"毎日のフロントエンド　14"},{"content":"第十三日 HTML #Question: html5 中的 form 怎么关闭自动完成？ 操作表单 form 的 autocomplete 属性值, 默认是开启的。\n\u0026lt;form action=\u0026#34;demo_form.html\u0026#34; method=\u0026#34;get\u0026#34; autocomplete=\u0026#34;off\u0026#34;\u0026gt; First name:\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;fname\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; E-mail: \u0026lt;input type=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; CSS #Question: ::before和:after中单冒号和双冒号的区别是什么，这两个伪元素有什么作用   :表示伪类，是一种样式，比如:hover, :active 等\n  ::表示伪元素，是具体的内容，比如::before 是在元素前面插入内容，::after 则是在元素后面插入内容，不过需要 content 配合，并且插入的内容是 inline 的\n  :before 和 :after 其实还是表示伪元素，在 css3 中已经修订为::before 和::after 了，只是为了能兼容 IE 浏览器，所以也可以表示成:before 和:after\n  JavaScript #Question: 说说你对 javascript 的作用域的理解 作用域就是一块封闭的区域，外部不能访问到这块区域里的变量、函数等，被{}包裹的就叫一个作用域（全局作用域是特殊的）\n 函数作用域 全局作用域 块作用域  变量提升：在用 var 或者 function 声明一个变量和函数时，变量和函数会被提升到函数的顶部\nSoft Skills #Question: http 都有哪些状态码 HTTP 状态码 对照详解\nReference css 伪元素:before 和:after 用法详解\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-27T21:33:31+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/frontend-13-cover_huf633675efa550b3936c0f24944c6beb4_1720619_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-13/","title":"毎日のフロントエンド　13"},{"content":"第十二日 HTML #Question: 常见的浏览器内核都有哪些？并介绍下你对内核的理解 内核主要分为渲染引擎和 JS 引擎。前者负责页面的渲染，后者负责执行解析 JavaScript。之后，由于 JS 引擎越来越独立，现在所说的浏览器内核大都指渲染引擎\n目前主流的内核有以下 4 个：\n Trident: 由微软开发，即我们熟知的 IE 内核 Gecko: 使用 C++ 开发的渲染引擎，包括了 SpiderMonkey 即我们熟悉的 FireFox Presto: Opera 使用的内核 Webkit: Safari 使用的内核 Chrome 浏览器内核： 统称为 Chromium 内核，以前是 Webkit 内核，现在是Blink内核  CSS #Question: 说说你对 css 盒子模型的理解   基本概念\n 标准(W3C)盒子模型(box-sizing: content-box;)：包括 margin,border,padding,content,并且 content 部分不包括其他部分  标准盒子模型  IE 盒子模型(box-sizing: border-box;)：包括 margin,border,padding,content，content包含了border和padding  IE盒子模型     补充说明：\n  CSS盒模型， 有内外两个部分。 外部属性 控制盒子本体是否占满一整行； 内部则控制：内部元素的属性。 例如：display: inline-block,外部是，inline 不占据整行； 内部是 block则表明内部遵循块状特性。 因此， display: inline; 可理解为 display: inline-inline;， display: block; 可理解为 display: block-block;\n  display: inline-block 简单来说就是将对象呈现为 inline 对象，但是对象的内容作为 block 对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个 link（a 元素）inline-block 属性值，使其既具有 block 的宽度高度特性又具有 inline 的同行特性\n  width/height, padding, border, margin 这几个控制盒子大小的属性。 其中 width/height 控制元素内容大小； margin 控制元素与其他元素的距离（margin的背景色透明， 元素 background-color，只影响到 border）； border 是元素外围边框； padding 控制元素内容到 border 的距离\n    JavaScript #Question: 写一个获取当前 url 查询字符串中的参数的方法 function urlParams() { const search = window.location.search; search = search.substr(1, search.length); const res = {}; if (!search) return res; search.split(\u0026#39;\u0026amp;\u0026#39;).map((item) =\u0026gt; { const [key, value] = item.split(\u0026#39;=\u0026#39;); res[key] = decodeURIComponent(value); }); return res; }  function urlParam() { const res = {}; location.search.replace(/([^\u0026amp;=?]+)=([^\u0026amp;]+)/g, (m, c1, c2) =\u0026gt; (res[c1] = c2)); return res; } Soft Skills #Question: 网页应用从服务器主动推送到客户端有那些方式 WebSocket\nWebSocket 是一种在单个 TCP 连接上进行全双工通信的协议\nWebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\neventsource(SSE)\nEventSource 接口是 Web 内容与服务器发送的事件的接口。一个 EventSource 实例打开一个持久连接 HTTP 服务器，它发送事件的 text/event-stream 格式。连接保持打开状态，直到通过调用关闭 EventSource.close()。\n与 WebSocket 不同，服务器发送的事件是单向的。也就是说，数据消息是从服务器到客户端（例如用户的 Web 浏览器）沿一个方向传递的\nSSE 技术详解：使用 HTTP 做服务端数据推送应用的技术\nWeb Push\nReference 面试官：谈谈你对 CSS 盒模型的认识?\nblock，inline 和 inline-block 概念和区别\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-26T23:36:48+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/frontend-12-cover_huf603ea210b60b02f272d6d9dbb2ff177_175148_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-12/","title":"毎日のフロントエンド　12"},{"content":"第十一日 HTML #Question: 你对标签语义化的理解是什么？\n什么是 HTML 语义化标签 语义化的标签，旨在让标签有自己的含义。\n\u0026lt;p\u0026gt;一行文字\u0026lt;/p\u0026gt; \u0026lt;span\u0026gt;一行文字\u0026lt;/span\u0026gt; 如上代码，p 标签与 span 标签都区别之一就是，p 标签的含义是：段落。而 span 标签责没有独特的含义。\n语义化标签的优势  语义化更具有可读性，便于团队开发维护 在没有 css 的情况下，页面也可以呈现出也很好的内容结构和代码结构 SEO，搜索引擎能更好的理解页面中各部分的关系，可更快更准确的搜索到信息  常见的语义化标签  因此我们在写页面结构时，应尽量使用有 语义的 HTML 标签\n  \u0026lt;title\u0026gt;：页面主体内容。 \u0026lt;hn\u0026gt;：h1~h6，分级标题，与 协调有利于搜索引擎优化。 \u0026lt;ul\u0026gt;：无序列表。 \u0026lt;li\u0026gt;：有序列表。 \u0026lt;header\u0026gt;：页眉通常包括网站标志、主导航、全站链接以及搜索框。 \u0026lt;nav\u0026gt;：标记导航，仅对文档中重要的链接群使用。 \u0026lt;main\u0026gt;：页面主要内容，一个页面只能使用一次。如果是 web 应用，则包围其主要功能。 \u0026lt;article\u0026gt;：定义外部的内容，其中的内容独立于文档的其余部分。 \u0026lt;section\u0026gt;：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。 \u0026lt;aside\u0026gt;：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。 \u0026lt;footer\u0026gt;：页脚，只有当父级是 body 时，才是整个页面的页脚。 \u0026lt;small\u0026gt;：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。 \u0026lt;strong\u0026gt;：和 em 标签一样，用于强调文本，但它强调的程度更强一些。 \u0026lt;em\u0026gt;：将其中的文本表示为强调的内容，表现为斜体。 \u0026lt;mark\u0026gt;：使用黄色突出显示部分文本。 \u0026lt;figure\u0026gt;：规定独立的流内容（图像、图表、照片、代码等等）（默认有 40px 左右 margin）。 \u0026lt;figcaption\u0026gt;：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。 \u0026lt;cite\u0026gt;：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。 \u0026lt;blockquoto\u0026gt;：定义块引用，块引用拥有它们自己的空间。 \u0026lt;q\u0026gt;：短的引述（跨浏览器问题，尽量避免使用）。 \u0026lt;time\u0026gt;：datetime 属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。 \u0026lt;abbr\u0026gt;：简称或缩写。 \u0026lt;dfn\u0026gt;：定义术语元素，与定义必须紧挨着，可以在描述列表 dl 元素中使用。 \u0026lt;address\u0026gt;：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。 \u0026lt;del\u0026gt;：移除的内容。 \u0026lt;ins\u0026gt;：添加的内容。 \u0026lt;code\u0026gt;：标记代码。 \u0026lt;meter\u0026gt;：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签） \u0026lt;progress\u0026gt;：定义运行中的进度（进程）。  CSS #Question: css 常用的布局方式有哪些？\n 流式布局: 最基本的布局，就是顺着 html 像流水一样流下来 绝对定位: 利用 position: absolute 进行绝对定位的布局 float 布局: 最初用来解决多栏布局的问题。比如 圣杯、双飞翼 的布局都可以用 float 来实现 珊格布局: bootstrap 用的布局，把页面分为 24 分，通过 row 和 col 进行布局 flex 布局: css3 的布局可以非常灵活地进行布局和排版 grid 布局: 网格布局  JavaScript #Question: 简要描述下 JS 有哪些内置的对象 built-in objects\nJavaScript 标准内置对象 - JavaScript | MDN\nJS 所有内置对象属性和方法汇总 - SegmentFault 思否\nReference JS 所有内置对象属性和方法汇总\nJavaScript 标准内置对象 - JavaScript | MDN\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-25T23:02:39+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/frontend-11-cover_huf603ea210b60b02f272d6d9dbb2ff177_175148_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-11/","title":"毎日のフロントエンド　11"},{"content":"第十日 HTML #Question: viewport 常见设置都有哪些？\nviewport 就是视区窗口，也就是浏览器中显示网页的部分。PC 端上基本等于设备显示区域，但在移动端上viewport 会超出设备的显示区域 (即会有横向滚动条出现)。设备默认的 viewport 在 980 - 1024 之间。\n   设置 解释     width 设置 layout viewport 的宽度，为一个正整数，或字符串\u0026quot;width-device\u0026quot;   initial-scale 设置页面的初始缩放值，为一个数字，可以带小数   minimum-scale 允许用户的最小缩放值，为一个数字，可以带小数   maximum-scale 允许用户的最大缩放值，为一个数字，可以带小数   height 设置 layout viewport 的高度，这个属性对我们并不重要，很少使用   user-scalable 是否允许用户进行缩放，值为\u0026quot;no\u0026quot;或\u0026quot;yes\u0026quot;, no 代表不允许，yes 代表允许    // width=device-width, initial-scale=1.0 是为了兼容不同浏览器 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\u0026#34; /\u0026gt;  dpr 与 CSS 像素。CSS 像素的 1px 在 PC 端上与设备的物理像素基本一致，而到手机端就会有两个物理像素对应一个 CSS 像素的情况出现（如 iPhone 的视网膜屏）。 所以 iPhone 上的 dpr = 2 即 2 个物理像素 / 一个 CSS 像素（独立像素）\n CSS #Question: 对比下 px、em、rem 有什么不同？\npx、em、rem 都是计量单位，都能表示尺寸，但是有有所不同，而且其各有各的优缺点。\n  px表示“绝对尺寸”（并非真正的绝对），实际上就是 css 中定义的像素（此像素与设备的物理像素有一定的区别，后续详细说明见文末说明 1），利用 px 设置字体大小及元素宽高等比较稳定和精确。Px 的缺点是其不能适应浏览器缩放时产生的变化，因此一般不用于响应式网站。\n  em表示相对尺寸, 其相对于当前对象内文本的 font-size（如果当前对象内文本的 font-size 计量单位也是 em，则当前对象内文本的 font-size 的参考对象为父元素文本 font-size）。使用 em 可以较好的相应设备屏幕尺寸的变化，但是在进行元素设置时都需要知道父元素文本的 font-size 及当前对象内文本的 font-size，如有遗漏可能会导致错误。\n em子元素字体大小font-size 的 em 是 相对于 父元素的 font-size 子元素的 height width padding margin 的 em 值 是相对于 本元素的font-size 值  \u0026lt;div\u0026gt; 我是父元素div \u0026lt;p\u0026gt; 我是子元素p \u0026lt;span\u0026gt;我是孙元素span\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; div { font-size: 40px; width: 10em; /* 400px */ height: 10em; border: solid 1px black; } p { font-size: 0.5em; /* 20px */ width: 10em; /* 200px */ height: 10em; border: solid 1px red; } span { font-size: 0.5em; width: 10em; height: 10em; border: solid 1px blue; display: block; }   rem 其参考对象为根元素 root的 font-size 即 \u0026lt;html\u0026gt;元素。通常做法是给 html 元素设置一个字体大小，然后其他元素的长度单位就为 rem。\nhtml { font-size: 10px; } div { font-size: 4rem; /* 40px */ width: 30rem; /* 300px */ height: 30rem; border: solid 1px black; } p { font-size: 2rem; /* 20px */ width: 15rem; height: 15rem; border: solid 1px red; } span { font-size: 1.5rem; width: 10rem; height: 10rem; border: solid 1px blue; display: block; }  当用 rem 做响应式页面，直接在媒体中改变 html 的 font-size 那么用 rem 作为单位的元素的大小都会相应改变，很方便。    px用于元素的边框或定位。 推荐使用 rem(只有一个参照，方便管理)， em 容易出错\nJavaScript Question: 简要描述下什么是回调函数并写一个例子出来\n回调是把一个函数作为参数传递给另一个函数，当该函数满足某个条件时触发该参数函数。\n主要用于异步操作 例如网络请求 防止页面同步代码阻塞导致渲染线程停止\nfunction longTask(callback, timeout) { setTimeout(callback, timeout); } longTask(() =\u0026gt; { console.log(\u0026#39;回调任务被执行了\u0026#39;); }, 2000); console.log(\u0026#39;我是同步代码 不会阻塞我\u0026#39;); Reference 移动前端开发之 viewport 的深入理解\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-23T23:39:38+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/frontend-10-cover_hu5b7d4b744859a935611e2eb6b463cb76_1822006_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-10/","title":"毎日のフロントエンド　10"},{"content":"第九日 HTML #Question: 浏览器内多个标签页之间的通信方式有哪些？(网页间 消息 通讯)\n是什么？ 在浏览器中，两个不同页面（A 页面的 window ！= B 页面的 window）网页之间的消息传递\n消息传递方式 1. WebSocket - 可跨域  WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\n  WebSocket 教程\n 2. postMessage - 可跨域 window.postMessage() 方法安全地启用 Window 对象之间的跨源通信\n对将接收消息的窗口的引用，获得此类引用的方法包括：\n \u0026lt;iframe\u0026gt; Window.open （生成一个新窗口然后引用它） Window.opener （引用产生这个的窗口）  3. Worker 之 ShareWorker   webworker，作为浏览器的一个新特性，可以提供一个额外的线程来执行一些 js 代码（真正的多线程），并且不会影响到浏览器用户界面，但是不能 DOM 操作。\n  SharedWorker 可以被多个 window 共同使用，所以可以用来跨页面传输数据，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)。\n  4. Server-Sent Events HTML5 服务器发送事件（server-sent event）允许网页获得来自服务器的更新。 Server-Sent 事件指的是网页自动获取来自服务器的更新。\n5. localStorage localstorage 是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信(ps：session 是会话级的存储空间，每个标签页都是单独的）。 直接在 window 对象上添加监听即可。\n6. Cookies Cookies 在同一个域名内，并且目录也得相同，可以参考第三方库\n js-cookie/js-cookie: A simple, lightweight JavaScript API for handling browser cookies\n 7. BroadcastChannel 只要是在同一原始域和用户代理下，所有窗口、iframe 之间都可以进行交互\nCSS #Question: 简述下你理解的优雅降级和渐进增强\n背景 渐进增强和优雅降级这两个概念是在 CSS3 出现之后火起来的。由于低级浏览器不支持 CSS3，但是 CSS3 特效太优秀不忍放弃，所以在高级浏览器中使用 CSS3，而在低级浏览器只保证最基本的功能。二者的目的都是关注不同浏览器下的不同体验，但是它们侧重点不同，所以导致了工作流程上的不同。\n渐进增强 渐进增强 （Progressive Enhancement）：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。\n 应关注于内容本身  优雅降级 优雅降级（Graceful Degradation）：一开始就构建站点的完整功能，然后再针对低版本浏览器进行兼容。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。\n 应针对最高级、最完善的浏览器来开发网站  用法简介  \n 很久以前：浏览器前缀 CSS3 和正常 CSS3 都不支持 不久之前：浏览器只支持前缀 CSS3，不支持正常 CSS3 现在：浏览器既支持前缀 CSS3，又支持正常 CSS3 未来：浏览器不支持前缀 CSS3，仅支持正常 CSS3  如何选择   若低版本用户居多，则优先采用渐进增强的开发流程\n  若高版本用户居多，则为了提高大多数用户的使用体验，那当然优先采用优雅降级的开发流程\n  多数大公司采用渐进增强的方式（通常业务优先）\n  JavaScript #Question: 写一个判断数据类型的方法\nfunction testType(obj) { return Object.prototype.toString .call(obj) .replace(/^.{8}(.+)]$/, (m, $1) =\u0026gt; $1.toLowerCase()); }  // typeof 只能判断 《基本类型》 string,number,boolean, undefined,object // null 会被判断成 object // toString() Object.prototype.toString.call([]); //\u0026#34;[object Array]\u0026#34; Object.prototype.toString.call({}); //\u0026#34;[object Object]\u0026#34;  function testType(obj) { return Object.prototype.toString.call(obj).replace(/\\[object\\s|\\]/g, \u0026#39;\u0026#39;); } console.log(testType([])); //\u0026#34;Array\u0026#34; console.log(testType(1)); //\u0026#34;Number\u0026#34; Reference 网页消息通信\n前端面试题-渐进增强和优雅降级 - SegmentFault 思否\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-23T16:48:11+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/frontend-9-cover_hu5b7d4b744859a935611e2eb6b463cb76_1822006_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-9/","title":"毎日のフロントエンド　9"},{"content":"第八日 CSS #Question: 清除浮动的方式有哪些及优缺点？\n 现阶段 较多使用Flex 布局 浮动带来的问题是盒子塌陷问题  什么是盒子塌陷？ 外部盒子本应该包裹住内部的浮动盒子，结果却没有\n原因 父元素只包含浮动元素，那么它的高度就会塌缩为零, 前提是没有设置高度height属性，或者设置为 auto，就会出现盒子塌陷，如果父元素不包含任何的可见背景，这个问题会很难被注意到。 因为子元素设置了 float 属性，而 float 属性会把元素从标准文档流中抽离，直接结果就是外部盒子丢了两个孩子，因为内部没有其它盒子了，所以外部盒子只包裹文本节点内容，却把两个内部盒子扔在外面了。\n解决方案   把外部盒子也从标准文档流中抽离\n 缺点是： 父元素加上 float 有可能影响整个页面    在外部盒子内最下方添上带 clear 属性的空盒子： 把 \u0026lt;div style=\u0026quot;clear:both;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;放在盒内底部\n  给外部盒子添加： overflow:hidden 清除浮动\n  用after伪元素清除浮动\n  .clearfix { \\*zoom: 1; } .clearfix:before, .clearfix:after { display: table; line-height: 0; content: \u0026#39;\u0026#39;; } .clearfix:after { clear: both; }     当然，还有前文提到的 BFC\n  JavaScript #Question: 写一个加密字符串的方法\nfunction encodeStr(str, key) { return str .split(\u0026#39;\u0026#39;) .map((item) =\u0026gt; { return item.charCodeAt() * key; }) .join(\u0026#39;#\u0026#39;); } function decodeStr(str, key) { return str .split(\u0026#39;#\u0026#39;) .map((item) =\u0026gt; { return String.fromCharCode(+item / key); }) .join(\u0026#39;\u0026#39;); } console.log(decodeStr(encodeStr(\u0026#39;hello world\u0026#39;, 665), 665)); Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-22T16:40:32+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/frontend-8-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-8/","title":"毎日のフロントエンド　8"},{"content":"第七日 HTML #Question: iframe 框架都有哪些优缺点？\nThe \u0026lt;iframe\u0026gt; HTML element represents a nested browsing context, embedding another HTML page into the current one.\n\u0026lt;iframe\u0026gt;: The Inline Frame element - HTML: HyperText Markup Language | MDN\niFrame — A love story. by Max Rafferty | Slices of Bread | Medium\nAdvantages of \u0026lt;iframe\u0026gt;:\n iframe can display the embedded web page intact. If there are multiple pages referencing iframe, you only need to modify the content of iframe, and then you can change the content of every page you call, which is convenient and fast. If the header and version of a web page are the same in order to unify the style, it can be written as a page, nested with iframe, which can increase code reusability. If you encounter slow loading third-party content such as icons and advertisements, these problems can be solved by iframe. 可以实现跨域，每个 iframe 的源都可以不相同（方便引入第三方内容）  Disadvantages of \u0026lt;iframe\u0026gt;:\n Many pages will be generated, which is not easy to manage. Iframe frame structure sometimes makes people feel confused. If there are many frames, there may be up and down, left and right scrollbars, which will distract visitor\u0026rsquo;s attention and lead to poor user experience. The code is complex and can\u0026rsquo;t be indexed by some search engines, which is very important. Many mobile devices can not fully display the frame, and the device compatibility is poor. Iframe framework pages will increase the HTTP requests of the server, which is not advisable for large websites.  CSS #Question: 简述你对 BFC 规范的理解\n Block formatting context - Developer guides | MDN\n A Block formatting Context is a part of a visual CSS rendering of a web page. It\u0026rsquo;s the region in which the layout of block boxesx occurs and in which floats intreract with other elements.\nA block formatting context is created bt at least one of the following:\n  The root element of the document \u0026mdash;- \u0026lt;html\u0026gt;\n  Floats (elements where float isn\u0026rsquo;t none)\n  Absolutely positioned elements (postion is absolute of fixed)\n  Inline-blocks (display: inline-block;)\n  Table cells (element with display: table-cell, which is the default for HTML table cell.)\n  是什么？ 常见的Formatting Context有 BFC、IFC（行级格式化上下文），还有 GFC（网格布局格式化上下文）和 FFC（自适应格式化上下文）\nBFC是 一个独立渲染区 只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\nBFC 是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。\n解决了什么问题(有什么作用)：  解决了 盒子内外的元素布局的相互影响，干扰。 解决了 自适应两栏布局 阻止父元素 高度坍塌（子元素都为 float 时，子元素脱离文档流 父元素不能被子元素撑开）（参考下文规则 6） 可以阻止元素被浮动元素覆盖 可以包含浮动元素——清除内部浮动 分属于不同的 BFC 时可以阻止 margin 重叠  如何触发 BFC 常用的四种方法：\n float is not none position is not static and relative (is fixed or absolute) overflow is auto scroll and hidden display is table-cell or inline-block  BFC 的 布局规则  内部的 Box 会在垂直方向，一个接一个地放置。 Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠 每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 BFC 的区域不会与 float box 重叠。 BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 计算 BFC 的高度时，浮动元素也参与计算， 相当于清除了内部浮动。  JavaScript #Question: 统计某一字符或字符串在另一个字符串中出现的次数\nfunction substrCount(str, target) { let count = 0; if (!target) return count; while (str.match(target)) { str = str.replace(target, \u0026#39;\u0026#39;); count++; } return count; } console.log(strCount(\u0026#39;abcdef abcdef a\u0026#39;, \u0026#39;abc\u0026#39;));  function substrCount(str, target) { let count = 0; while (str.includes(target)) { const index = str.indexOf(target); count++; str = str.substring(index + target.length); } return count; }  function substrCount(str, target) { return str.split(target).length - 1; } Reference What are the advantages and disadvantages of iframe? | Develop Paper\n[布局概念] 关于 CSS-BFC 深入理解 - 掘金\n[Jelly College] CSS tutorial lesson8:How to understand BFC quickly - YouTube\n","date":"2021-09-21T10:52:54+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/frontend-7-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-7/","title":"毎日のフロントエンド　7"},{"content":"第六日 HTML #Question: label 都有哪些作用？并举相应的例子说明\nThe \u0026lt;label\u0026gt; HTML element represents a caption for an item in a user interface.\n表示用户界面中某个元素的说明。\nAssociating a \u0026lt;label\u0026gt; with an \u0026lt;input\u0026gt; element offers some major advantages:\n  A screen reader will read out the label when the user is focused on the form \u0026lt;input\u0026gt;, making it easier for an assistive technology user to understand what data should be entered.\n  When a user clicks or touches a label, the browser passes the focus to its associated input.\n  Attribute\n for: The value of the for attritue must be a single id for a labelable form-related element in the same document as the \u0026lt;label\u0026gt; element.  focus 锚点定位和 overflow 的选项卡切换效果 » CSS 世界 demo 演示\n100dayscss-051\nCSS #Question: 用 css 创建一个三角形，并简述原理\n css - 盒子模型 \n 一个盒子包括: margin+border+padding+content 上下左右边框交界处出呈现平滑的斜线. 利用这个特点, 通过设置不同的上下左右边框宽度或者颜色可以得到小三角, 小梯形等 调整宽度大小可以调节三角形形状   设置盒子的宽高度, 及上下左右边框, 会如下图：    #test1 { height: 20px; width: 20px; border-color: #ff9600 #3366ff #12ad2a #f0eb7a; /* border-style: solid; */ /* border-width: 20px; */ border: 20px solid; } 在上面基础上, 我们把宽高度都设为 0 时, 会呈现上述的边界斜线    #test2 { height: 0; width: 0; overflow: hidden; /* 这里设置overflow, font-size, line-height */ font-size: 0; /*是因为, 虽然宽高度为0, 但在IE6下会具有默认的 */ line-height: 0; /* 字体大小和行高, 导致盒子呈现被撑开的长矩形 */ border-color: #ff9600 #3366ff #12ad2a #f0eb7a; /* border-style: solid; */ /* border-width: 20px; */ border: 20px solid; } 只保留上面的橙色    #test3 { height: 0; width: 0; /* overflow: hidden; */ /* font-size: 0; */ /* line-height: 0; */ border-color: #ff9600 transparent transparent transparent; /* border-style: solid; */ /* border-width: 20px; */ border: 20px solid; } JavaScript #Question: 写一个去除制表符和换行符的方法\n/** * \\f 匹配 换页字符。 * \\n 匹配 换行字符。 * \\r 匹配 回车符字符。 * \\t 匹配 制表字符。 * \\v 匹配 垂直制表符。 * @param str * @returns {void | string} */ const removeEmpty = (str) =\u0026gt; str.replace(/[\\t\\n\\v\\r\\f]/g, \u0026#39;\u0026#39;); console.log( removeEmpty(`| |`) ); Reference CSS 三角形的实现原理及运用-前端开发博客\nCSS 绘制三角形—border 法 - 简书\n前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-20T16:14:06+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/frontend-6-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-6/","title":"毎日のフロントエンド　6"},{"content":"第五日 HTML #Question: 简述超链接 target 属性的取值和作用\ntarget Where to display the linked URL. The following keywords have special meanings for where load the URL\n   value 描述 description     _self （默认）在相同的框架中打开被链接文档 the current browsing context(default)   _blank 在新窗口中打开被链接文档 usually a new tab, but users can configure browers to open a new window instead   _parent 在父框架集中打开被链接文档 the parent browsing context of the current one. If no parent , behaves as _self   _top 在整个窗口中打开被链接文档,忽略掉所有的框架结构 the topmost browsing context. If no ancestors, behaves as _self    CSS #Question: CSS3 新增伪类有哪些并简要描述\n 新增伪类 \nJavaScript #Question: 写一个把字符串大小写切换的方法\nfunction caseConvert(str) { return str.replace(/([a-z]*)([A-Z]*)/g, (m, s1, s2) =\u0026gt; { return `${s1.toUpperCase()}${s2.toLowerCase()}`; }); } caseConvert(\u0026#39;AsA33322A2aa\u0026#39;); //aSa33322a2AA  function caseConvert(str) { return str .split(\u0026#39;\u0026#39;) .map((s) =\u0026gt; { const code = s.charCodeAt(); if (code \u0026lt; 65 || code \u0026gt; 122 || (code \u0026gt; 90 \u0026amp;\u0026amp; code \u0026lt; 97)) return s; if (code \u0026lt;= 90) { return String.fromCharCode(code + 32); } else { return String.fromCharCode(code - 32); } }) .join(\u0026#39;\u0026#39;); } console.log(caseConvert(\u0026#39;AbCdE\u0026#39;)); // aBcDe  function caseConvertEasy(str) { return str .split(\u0026#39;\u0026#39;) .map((s) =\u0026gt; { if (s.charCodeAt() \u0026lt;= 90) { return s.toLowerCase(); } return s.toUpperCase(); }) .join(\u0026#39;\u0026#39;); } console.log(caseConvertEasy(\u0026#39;AbCxYz\u0026#39;)); // aBcXyZ  function reverseCharCase(str) { if (!(typeof str === \u0026#39;string\u0026#39;)) { throw new Error(\u0026#39;str must be string\u0026#39;); } // 如果是空字符串，直接返回  if (!str.length) { return str; } const lowerCaseReg = /[a-z]/; const upperCaseReg = /[A-Z]/; const len = str.length; let i = 0; let result = \u0026#39;\u0026#39;; while (i \u0026lt; len) { if (lowerCaseReg.test(str.charAt(i))) { result += str.charAt(i).toLocaleUpperCase(); } else if (upperCaseReg.test(str.charAt(i))) { result += str.charAt(i).toLocaleLowerCase(); } else { result += str.charAt(i); } i++; } return result; } const testStringArray = [ \u0026#39;\u0026#39;, \u0026#39;1a1\u0026#39;, \u0026#39;aABz\u0026#39;, \u0026#39;aC R + 6788978e892*\u0026amp;\u0026amp;*(^%\u0026amp;*%^\u0026amp;%^\u0026amp;e\u0026#39;, ]; testStringArray.forEach((str) =\u0026gt; { console.log(reverseCharCase(str)); }); Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-19T12:16:31+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-5/","title":"毎日のフロントエンド　5"},{"content":"第四天 HTML #Question: HTML5 的文件离线储存怎么使用，工作原理是什么？\nTL;DR \u0026ndash; HTML5 local storage is an alternative to cookies, allowing web applications to store user information in their browser.\nWith web storagem web applications can store data locally within the user\u0026rsquo;s browser.\nBefore HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.\nWeb storage is per origin (per domain and protocal). All pages, from one origin, can store and access the same data.\n  window.localStorage - stores data with no expiration date.\n  window.sessionStorage - stores data for one session (data is lost when the browser tab is closed)\n  Cookies VS. Local Storage VS. Session Storage     Cookies Local Storage Session Storage     Capacity 4kb 10mb 5mb   Browsers HTML4/HTML5 HTML5 HTML5   Accessible form Any window Any window Same tab   Expires Manually set Never On tab close   Storage Location Browser and Server Browser only Browser only   Sent with Request Yes No No    Storage Inspector - Firefox Developer Tools | MDN\nCSS #Question: CSS 选择器有哪些？哪些属性可以继承？\nCSS selectors - CSS: Cascading Style Sheets | MDN\nCSS Selectors\n  Basic selectors:\n universal selector通用选择器： * will match all the elements of the document. Type selector 元素选择器： Syntax: element name input -\u0026gt; \u0026lt;input\u0026gt; Class selector 类选择器具： Syntax: .classname, .index will match any element that has a class of \u0026ldquo;index\u0026rdquo;. ID selector： Syntax: #idname, #toc will match the element that has the ID \u0026ldquo;toc\u0026rdquo;. Attribute selector 属性选择器： Syntax: [attr]``[attr=value]    Grouping selectors:\n Selector list: Syntax: A, B Example: div, span will match both \u0026lt;span\u0026gt; and \u0026lt;div\u0026gt; elements.    Combinators: 组合器\n Descendant combinator 后代组合器 Child combinator 直接子代组合器 General sibling combinator 一般兄弟组合器 Adjacent sibling combinator 紧邻组合器 Column combinator 列组合器    Pseudo:\n Pseudo classes 伪类： : The : pseudo allow the selection of elements based on state information that is not contained in the document tree. Example: a::visited will match all \u0026lt;a\u0026gt; elements that have been visited by the user. Psendo elements 伪元素： The :: pseudo represent entities that are not included in HTML. Example: p::first-line will match the first line of all \u0026lt;p\u0026gt; elements.    Inherit : yes 可继承属性：\ncss 有哪些属性可以继承？ 层叠与继承 - 学习 Web 开发 | MDN\nCascade Stylesheets cascade - at a very simple level, this means that the order of CSS rules matter; whjen two rules apply that have equal specificity the one that comes last in the CSS is the one that will be used.\n当两条同样级别的规则应用到同一个元素上时， 生效的是 后一个。\nInheritance Some css property values set on parent elements are inherited by their child elements, and some aren\u0026rsquo;t.\n可继承的`CSS``属性：  字体相关： font font-family \u0026hellip;\u0026hellip; 文本相关属性： text-indent, text--align, color\u0026hellip;\u0026hellip; 元素可见性： visibility 表格布局属性： caption-side, border-collapse, border-spacing,empty-cells, table-layout 列表属性： list-style-type \u0026hellip;\u0026hellip; 生成内容属性： quotes 光标属性： cursor 页面样式属性： page, page-break-inside, windows, orphans\u0026hellip;\u0026hellip; 声音样式属性： speak\u0026hellip;\u0026hellip;  无继承性的属性  display 文本属性： vertical-align text-decoration text-shadow white-space unicode-bidi 盒子模型的属性:宽度、高度、内外边距、边框等 背景属性：背景图片、颜色、位置等 定位属性：浮动、清除浮动、定位 position 等 生成内容属性: content counter-reset counter-increment 轮廓样式属性: outline-style outline-width outline-color outline 页面样式属性: size page-break-before page-break-after  继承中比较特殊的几点   a 标签的字体颜色不能被继承\n  h1-h6 标签字体的大下也是不能被继承的 ,因为它们都有一个默认值\n  JavaScript #Question: 写一个方法把下划线命名转成大驼峰命名\nfunction toCamel(str) { str = str.replace(/(\\w)/, (match, $1) =\u0026gt; `${$1.toUpperCase()}`); while (str.match(/\\w_\\w/)) { str = str.replace( /(\\w)(_)(\\w)/, (match, $1, $2, $3) =\u0026gt; `${$1}${$3.toUpperCase()}` ); } return str; } console.log(toCamel(\u0026#39;a_c_def\u0026#39;)); // ACDef function toCamelCase(str) { if (typeof str !== \u0026#39;string\u0026#39;) { return str; } return str .split(\u0026#39;_\u0026#39;) .filter((s) =\u0026gt; !!s) // 验证是否存在  .map((item) =\u0026gt; item.charAt(0).toUpperCase() + item.substr(1, item.length)) .join(\u0026#39;\u0026#39;); } ","date":"2021-09-18T13:33:07+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-4/","title":"毎日のフロントエンド　4"},{"content":"第三天 HTML #Question: HTML 全局属性(global attribute)有哪些（包含HTML5）?\n Global attributes - HTML: HyperText Markup Language | MDN\n Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.\ndocument.body.__proto__\n accesskey: 生成键盘快捷键提示。Provides a hint for generating a keyboard shortcut for the current element. autocapitalize: 控制用户的文本输入 是否 如何 自动大写。 Controls whether and how text input is automatically capitalized as it is entered/edited by user. autofocus: 标识一个元素是否在页面加载时候聚焦。 Indicates that an element is to be focused on page load, or as soon as the \u0026lt;dialog\u0026gt; it is part of is displayed. Boolean, initially false. class: 一个以空格分隔的元素的类名（classes ）列表，它允许 CSS 和 Javascript 通过类选择器 (class selectors) 或 DOM 方法( document.getElementsByClassName)来选择和访问特定的元素。 contenteditable: 指定元素内容是否可编辑。 An enumerated attribute indicating if the element should be editable by the user. data-*: 一类自定义数据属性，它赋予我们在所有 HTML 元素上嵌入自定义数据属性的能力。 Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between HTML and its DOM representation that may be used by scripts. dir: 设置元素文本方向（默认 ltr；rtl）。An enumberated attribute indicating the directionality of the element\u0026rsquo;s text. It can have the following values. draggable: 设置元素是否可拖拽。 An enumerated attribute indicating whether the element can be dragged, using the Drag and Drop API. enterkeyhint: Hints what action label (or icon) to present for the enter key on virtual keyboards. hidden: 布尔属性表示该元素尚未或不再相关。例如，它可用于隐藏在登录过程完成之前无法使用的页面元素。A Boolean attribute indicates that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page tha can\u0026rsquo;t be used until the login process has been completed. The broweser won\u0026rsquo;t render such elements. This attribute must not be used to hide content that could legitimately be shown. id: 元素 id，文档内唯一。 Defines a uniwue identifier which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling(with CSS). inputmode: 向浏览器提供有关在编辑此元素或其内容时要使用的虚拟键盘配置类型的提示。主要用于 \u0026lt;input\u0026gt;元素。 Provides a hint to browesers as to the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on \u0026lt;input\u0026gt; elements. is, itemid, itemprop, itemref, itemscope, itemtype, lang, part, slot, spellcheck, style, tabindex, title, translate  CSS #Question: 在页面上隐藏元素的方法有哪些？\n占位：\n visibility: hidden; 页面会渲染只是不限显示 margin-left: -100%; opacity: 0; transform: scale(0); z-index: -9999; (置于最下层) ransform: skew(90deg, -90deg);  不占位：\n display: none; 页面不会渲染，可以减少首屏渲染的时间，但是会引起回流和重绘 width: 0; height:0; overflow: hidden;  仅针对 块内文本元素：\n text-indent: -9999px; font-size: 0;  JAVASCRIPT #Question: 去除字符串中最后一个指定的字符\n// regExp function deleteLastStr(str, target) { if (!target || typeof str !== \u0026#39;string\u0026#39; || typeof target !== \u0026#39;string\u0026#39;) return str; let reg = new RegExp(`${target}(?=([^${target}]*)$)`); return str.replace(reg, \u0026#39;\u0026#39;); } Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-16T17:39:42+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-3/","title":"毎日のフロントエンド　3"},{"content":"第二天 HTML #Question: HTML 的元素有哪些（包含 HTML5）？\n块级元素 Block\n Block elements are meant to structure the main parts of your page, by dividing your content in coherent blocks.\n  常用：div、p、ul、li、ol 定义页面结构（Structure elements）: aside、footer、header、nav、section、main 文章：address、article、figure、figcaption、h1、h2、h3、h4、h5、h6、pre 表格：table、thead、tbody、tfoot、th、td、caption 表单：form 其他：canvas  行内元素 Inline\n Inline elements are meant to differentiate part of a text, to give it a oarticular function or meaning. Inline elements usually comprise a single or few words.\n  常用：a、img、span 文本：em、i、strong、small 表单：button、input、label、option、progress、select、textarea 媒体：audio、video   Block elements can contain either block or inline elements. However, inline elements can only contain other inline elements.\n HTML5 新增\n audio：音频 video：视频 header：头部 section：内容块 footer：底部 aslide：侧边 nav：导航 address：地址  CSS 边框(borders):\n border-radius 圆角 box-shadow 盒阴影 border-image 边框图像  背景:\n background-size 背景图片的尺寸 background_origin 背景图片的定位区域 background-clip 背景图片的绘制区域  渐变：\n linear-gradient 线性渐变 radial-gradient 径向渐变  文本效果;\n word-break word-wrap text-overflow text-shadow text-wrap text-outline text-justify  转换：\n 2D 转换属性 transform transform-origin  2D 转换方法\n translate(x,y) translateX(n) translateY(n) rotate(angle) scale(n) scaleX(n) scaleY(n) rotate(angle) matrix(n,n,n,n,n,n)  3D 转换： *3D 转换属性：\n transform transform-origin transform-style  3D 转换方法\n translate3d(x,y,z) translateX(x) translateY(y) translateZ(z) scale3d(x,y,z) scaleX(x) scaleY(y) scaleZ(z) rotate3d(x,y,z,angle) rotateX(x) rotateY(y) rotateZ(z) perspective(n)  过渡\n transition  动画\n @Keyframes 规则 animation  弹性盒子(flexbox) 多媒体查询@media\n#Question: CSS3 有哪些新增的特性？\nJavascript #Question: 写一个方法去掉字符串中的空格\nconst str = \u0026#39; s t r \u0026#39;; // A frozen object can no longer be changed const POSITION = Object.freeze({ left: Symbol(), right: Symbol(), both: Symbol(), center: Symbol(), all: Symbol(), }); function trim(str, position = POSITION.both) { if (!!POSITION[position]) throw new Error(\u0026#39;unexpected position value\u0026#39;); switch (position) { case POSITION.left: str = str.replace(/^\\s+/, \u0026#39;\u0026#39;); break; case POSITION.right: str = str.replace(/\\s+$/, \u0026#39;\u0026#39;); break; case POSITION.both: str = str.replace(/^\\s+/, \u0026#39;\u0026#39;).replace(/\\s+$/, \u0026#39;\u0026#39;); break; case POSITION.center: while (str.match(/\\w\\s+\\w/)) { str = str.replace(/(\\w)(\\s+)(\\w)/, `$1$3`); } break; case POSITION.all: str = str.replace(/\\s/g, \u0026#39;\u0026#39;); break; default: } return str; } const result = trim(str); console.log(`|${result}|`); // |s t r| Regex: string.replace(/\\s/g, \u0026#39;\u0026#39;); join: string.split(\u0026#39; \u0026#39;).join(\u0026#39;\u0026#39;); Reference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\nHTML - Free tutorial to learn HTML and CSS\n","date":"2021-09-15T19:48:33+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-2/","title":"毎日のフロントエンド　2"},{"content":"第一天 HTML #Question: 页面导入样式时，使用 link 和@import 有什么区别？\n  \u0026lt;link\u0026gt; 是HTML的标签。 The @import is used to import style rules from other style sheets.\n\u0026lt;!-- @import Syntax --\u0026gt; @import url; @import url list-of-media-queries; @import url supports(supports-query); @import url supports(supports-query) list-of-media-queries;   \u0026lt;link\u0026gt; 引入的样式，在页面加载时，同时加载。 @import 引入的样式需要等页面加载完成之后再加载。\n  \u0026lt;link\u0026gt; 不存在兼容性问题，@import 不兼容 ie5 以下\n  \u0026lt;link\u0026gt; 可通过 js 操作 DOM 动态引入样式， @import 不可以\n  CSS #Question: 圣杯布局和双飞翼布局的理解和区别，并用代码实现\n即 css 三栏布局\u0026mdash;改变 viewpoint 宽度，两个边栏的宽度不变(左右定宽)，只会中间的区域变化， 且 中间部分优先渲染\n \n圣杯布局 - Holy Grail Layout HolyGrailLayout - codepen\n  利用 float 和 margin 负值 并列 利用 父容器设置padding   Point:\n  添加 center left right, 并为三个部分设置 float: left; position: relative;(脱离文档流)\n  center 区域设置 width: 100%;, 使 center 占满一整行\n  center 在最上面，此时需要为 left 区域 设置 margin-left: -100%; 将left移动到center左侧\n  此时 left 部分会覆盖 center 的左侧部分，因此 给三个部分统一的 container 设置 padding: 0 100px; (左右两部分的宽度)\n  为总的 container 添加 padding 之后，left 部分同样受影响，此时 需要使用 relative 负值 向左移动一个 left 宽度： left: -100px;\n  同理需要为 right 区域 设置： margin-left: -100px; right: -100px\n  \u0026lt;header\u0026gt;HEADER\u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;!-- center 优先加载，因此放在第一个 --\u0026gt; #center-one; center-two; center-three 中间宽度自适应 \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;left\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt;right\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;footer\u0026gt;FOOTER\u0026lt;/footer\u0026gt; * { background: lightgray; } .container { padding: 0 100px; } .container::after { /* 清除浮动塌陷*/ content: \u0026#39;\u0026#39;; display: block; clear: both; } .main { background: orange; width: 100%; height: 100px; float: left; } .left { background: brown; width: 100px; height: 100px; margin-left: -100%; float: left; position: relative; left: -100px; } .right { background: green; width: 100px; height: 100px; margin-left: -100px; float: left; position: relative; right: -100px; } header, footer { height: 60px; line-height: 60px; background-color: green; text-align: center; font-size: 30px; font-weight: bolder; } footer { background-color: lightcoral; } 双飞翼 shuangfeiyi\npoint:\n  wrapper left right为三部分设置 float: left\n  center 部分的 外层 wrapper 设置 width: 100%; 占满一整行\n  left 区域 margin-left: -100%; right 区域margin-left: -100px; 使左右翼分置两侧\n  此时center的内容被覆盖，除了使用圣杯法的外围 container 的 padding， 双飞翼使用了： 在center区域添加内层 div 并给内层 添加 margin: 0 100px; 压缩中心区域\n  \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt;头部\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;center\u0026#34;\u0026gt;主要区域\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;左侧\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt;右侧\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt;底部\u0026lt;/div\u0026gt; .wrapper { width: 100%; float: left; } .center { background-color: coral; margin: 0 100px; /*为主区域设置 左右 外边距 压缩主区域，并被包裹*/ } .left { background-color: yellow; width: 100px; float: left; margin-left: -100%; } .right { background-color: lightblue; width: 100px; float: left; margin-left: -100px; } .footer { clear: both; } .header, .footer { height: 60px; line-height: 60px; background-color: green; text-align: center; font-size: 30px; font-weight: bolder; } Javascript #Question: 用递归算法实现，数组长度为 5 且元素的随机数在 2-32 间不重复的值\nDescription:\n 生成一个长度为 5 的空数组 arr 生成一个（2－32）之间的随机整数 rand 把随机数 rand 插入到数组 arr 内，如果数组 arr 内已存在与 rand 相同的数字，则重新生成随机数 rand 并插入到 arr 内[需要使用递归实现，不能使用 for/while 等循环] 最终输出一个长度为 5，且内容不重复的数组 arr  var arr = new Array(5); var num = randomNum(); var i = 0; randomArr(arr, num); function randomNum() { return Math.floor(Math.random() * 30 + 2); } function randomArr(arr, num) { if (arr.indexOf(num) === -1) { arr[i] = num; i++; } else { num = randomNum(); } if (i \u0026gt; 5) { console.log(arr); return; } else { randomArr(arr, num); } }   Getting a random Number between two values  // The returned value is no lower than (and may possibly equal) min, and is less than (and not equal) max function getRandomArbitrary(min, max) { return Math.random() * (max - min) + min; } Math.random() - JavaScript | MDN\nReference 前端面试每日 3+1-以前端面试题来驱动学习，提倡每日学习与思考，每天进步一点！\n","date":"2021-09-14T11:58:23+09:00","image":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/frontend-1-cover_hu830c213ec70e85d51f3a935207ace467_2278723_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/%E6%AF%8E%E6%97%A5%E3%81%AE%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89-1/","title":"毎日のフロントエンド　1"},{"content":"What is \u0026ldquo;Lifting State up\u0026rdquo; and Why we need it? Lifting state up is a common pattern that is essential for React developer to know. It helps us avoid more complex pattern for managing our state.\nOften there will be a need to share state between different components. The common approach to share state between two components is to move the state to common parent of the two compenont.\n我们可以很清楚的明白 React 状态提升主要就是用来处理父组件和子组件的数据传递的；他可以让我们的数据流动的形式是自顶向下单向流动的，所有组件的数据都是来自于他们的父辈组件，也都是由父辈组件来统一存储和修改，再传入子组件当中。\n  We lift up state to a common ancestor of components that need it, so that they can nall share in the state. This allows us to mor4e easily share state among all of these components that need rely upon it.\n   There should be a single \u0026ldquo;source of truth\u0026rdquo; for any data that changes in application. Usuall, the state is first added to the component that needs it for rendering. If any other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync thje state between different components, you should rely on the top-down data flow.\n  Lifting state takes less work to find and isolate bugs. Since any state \u0026ldquo;lives\u0026rdquo; in some component and that component alone can change it. Additionally, we can implement any custom logic to reject or transform or validate user input.\n  If something can be derived from eother props or state, it probably shouldn\u0026rsquo;t be in the state.\n  ","date":"2021-09-13T17:34:37+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/liftup-cover_hu13e64fc3938bf48c35bf882b9c49b497_2861451_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（六）"},{"content":"防抖 与 节流 Debouncing and Throttling in Javascript  Debouncing and Throttling are two widely-used techniques to improve the performance of code that gets executed repeatedly within a short time(a peroid of time).\n  devbounce-throttle \nDebouncing 防抖 用来实现高频触发函数调用时，实际只调用最后一次函数执行。\n即： 触发事件后过一段时间才执行函数， 如果在这段时间内再次触发，则重新计时。\n用于可能出现高频调用的 DOM 或 样式修改， 这种高频调用会导致页面高频重排重绘，DOM 闪烁抖动，影响页面性能。\nImplementing Debounce:  Start with o timeout If the debounced function is called again, reset the timer to the speccial delay In case of timeout, call the debounced function.  Thus every call to a debounce function resets the timer and delays the call.\nDebounce is higher-order function, which is a function that returns anotehr function. This is done to form a closure around the handler and delay function parameters and the timer variable so that their values are preserved.\nIf we are invoking for the first time, our function will execute at the end of our delay. If we invoke and then invoke again before the end of our delay, the delay restarts.\n 调用 setTimeout 会返回一个 timeoutId , 然后通过调用 clearTimeout 清除 制定的 timeoutId\n self 和 apply  在 apply 中 会将调用的函数（handler）， 绑定到 this 中， 所以如果 不用 之前创建的 self 而是直接使用 this, 可能会产生问题，比如： 需要防抖的handler是在全局环境中调用时， this 执行上下文是 window， 不能指向绑定事件的元素上。 因此，使用 apply 显式地 将当前的执行上下文的this 绑定到 handler 上，以使元素上的handler生效。  // Debounce function debounce(handler, delay) { let timer = null; return function () { let self = this; let args = arguments; // arguments 是一个类数组对象， 指向传入的参数。  if (timer) clearTimeout(timer); // 清除前一个需要debounce 的函数  timer = setTimeout(function () { // apply 会将调用的函数, 绑定到 apply第一个参数指向的上下文中(此处的 self)， 并且可以接受一个数组或类数组对象作为后续参数  handler.apply(self, args); }, delay); }; } //test function testDebounce() { console.log(\u0026#39;this is a test.\u0026#39;); } document.onmousemove = function () { debounce(testDebounce); }; 用箭头函数简化  箭头函数的 this 指向函数定义时 上下文this 使用扩展运算符，避免定义 arguments  function debounce(handler, delay = 1000) { let timer = null; return (...args) =\u0026gt; { if (timer) clearTimeout(timer); timer = setTimeout(() =\u0026gt; { handler(args); }, delay); }; }  Throttling 节流 Throttling or sometimes is also called throttle function is a practise used in websites. To throttle a function means to ensure that the function is called at most once in a specified time period. This means throttling will prevent a function from running if it has run \u0026ldquo;recently\u0026rdquo;. Throttling also ensures a function is run regularly at a fixed rate.\nThrottlig is used to call a function after every millisecond or a particular interval of time only the first click is executed immediately.\n用来实现**_阻止_**在短时间内重复多次触发同一个函数。\n即： 每一个时间间隔内， 只执行一次函数, timer 存在的时候 直接返回，不存在的时候，执行setTimeout(执行完，会清空timer)\nImplementing Throttle: // Throttle function throttle(handler, delay) { let timer = null; return function () { let self = this, args = arguments; if (timer) return; timer = setTimeout(function () { handler.apply(self, args); timer = null; }, delay); }; } // test function testThrottle(e, content) { console.log(e, content); } var testThrottleHandler = throttle(testThrottle, 1000); document.onmousemove = function (e) { testThrottleHandler(e, \u0026#39;throttle\u0026#39;); }; 使用 箭头函数 优化 function throttle(handler, delay) { let timer = null; return (...args) =\u0026gt; { if (timer) return; timer = setTimeout(() =\u0026gt; { handler(args); timer = null; }, delay); }; } // example in reference const throttle = (func, limit) =\u0026gt; { let lastFunc; let lastRan; return function () { const context = this; const args = arguments; if (!lastRan) { func.apply(context, args); lastRan = Date.now(); } else { clearTimeout(lastFunc); lastFunc = setTimeout(function () { if (Date.now() - lastRan \u0026gt;= limit) { func.apply(context, args); lastRan = Date.now(); } }, limit - (Date.now() - lastRan)); } }; }; The first call to the function will execute and sets the limit period delay. We can call the function during this period but it will not fire until the throttle period has passed. Once is has passed, the next invocation will fire and the process repeats.\nCompare Debounce and Throttle Similarities   都使用了 setTimeout\n  目的都是降低回调函数的执行频率， 节省资源。\n  Difference   Debounce 防抖关注的是：一定时间段内，连续触发的事件，只在最后一次触发的时候 执行。\n  Throttle 节流关注的是：侧重一个时间间隔内，只执行一次。\n  使用场景 use cases   Debounce 防抖的使用场景： 连续的事件，只需要触发一次的场景， 例如：\n 搜索框 输入搜索内容，最后输入完成后，再发送请求； 号码， 邮箱的输入验证； 窗口大小的调整： 在调整完成后再计算窗口大小，防止重复渲染。 Autocomplete: Often times, search boxes offer dropdowns that provide autocomplete options for the user\u0026rsquo;s current input. Sometimes the items suggested are fetched from the backend API. Here, debouncing can be applied in implementing suggestive text where we wait for the user to stop typing for a few seconds before suggesting the text. Thus, on every keystrokem, we wait for some seconds before giving out suggestions. Debouncing a resize event handler. Debouncing a save function in an autosave feature. Don\u0026rsquo;t do anything whiule the user drags and drops. Don\u0026rsquo;t make any Axios requests until the user stops typing.    Throttle 节流的使用场景： 间隔一段时间之行一次回调函数的场景：\n 滚动加载 或者 加载更多的场景 表单的多次点击提交 Gaming Scroll event handler Throttling a button cliock so er can\u0026rsquo;t spam click Throttling an API call Throttling a mousemove/touchmove event handler.    Reference javaScript 节流与防抖\nJavaScript 防抖与节流 - YouTube\nDebouncing and Throttling in JavaScript: Comprehensive Guide | by Ayush Verma | Towards Dev\n","date":"2021-09-12T17:48:16+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/throttle-cover_huce846bc90c63bb66fde6ebec9b941b5a_4551878_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（五）"},{"content":"关键知识点六： Restful API 设计的几个最佳实践 steps toward the glory of REST Richardson Maturity Model\nLevel 0 The Starting point for the model is using HTTP as a transport system for remote interactions, but without using any of the mechanisms of the web.If you use SOAP or XML-RPC it\u0026rsquo;s basically the same mechanism, the only difference is that you wrap the XML messages in some kind of envelope.\nLevel 1 - Resources At level One, rather than making all the requests to s singular service endpoint, we start talking to individual resources.\nLevel 2 - Http Verbs (Method) Level 2 moves away from being used as tunneling mechanisms allowing you to tunnel your interactions through HTTP, using the http verbs as closely as possible to how they are used in Http itself.\nHTTP defines GET as a safe operation, that is it doesn\u0026rsquo;t make any significant changes to the state of anything.\u0026mdash; This allows us to invoke GETs safely any number of times in any order and get the same results each time.(幂等 - 术语表 | MDN)\nTHE KEY elements that are supported by the existence of the web are the strong separation between safe (eg: GET) and non-safe operations, together with using status codes to help communicate the kinds of errors we run into.\nLevel 3 - Hypermedia Controls THE Highest and final level introduces something that you often hear referred to under the おかしい acronym of HATEOAS (Hypertext As The Engine Of Application State).\nEach response has a link element which contains a URI to tell us how to do next, and the URI of the resource we need to manipulate to do it.\nOne obvious benefit of hypermedia controls is that it allows the server to change its URI scheme without breaking clients. As long as clients look up the \u0026ldquo;add-test\u0026rdquo; link URI then the server can juggle all URIs other than the initial entrypoint.\nA further benefit is that it helps client developers explore the protocal. The links give client developers a hint as to what may be possible next. AND simillarly it also allows the server team tp advertise new capabilities by putting new links in the responses.\nSo as a frontend developer, if we can keeping an eye out for unknown links, these links can be a trgger for further exploration.\nBest Practise 最佳实践 一， 一类资源两个 URL - Use Two URLs per Resource # 资源集合： /epics # 资源元素： /epics/5 二， 使用一致的复数名词 - Use Consistently Plural Nouns 只应该使用统一的复数名词来表达资源\nGET /stories GET /stories/3 三， 资源 URI 使用名词而不是动词 - Use Nouns instead of Verbs for Resources # wrong /getAllEpics /getAllFinishedEpics /createEpic /updateEpic RESTful API Design.HTTP METHOD\n# right GET /epics GET /epics?state=finished POST /epics PUT /epics/5 四， 将实际数据包装在 data 字段中 // GET /epics在数据字段中返回epic资源列表 { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;epic2\u0026#34; } ] } // GET /epic/1在数据字段中返回id为1的epic对象 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34; } }  PUT，POST 和 PATCH 请求的有效负荷(payload)还应包含实际对象的数据字段。\n  JSON:API — A specification for building APIs in JSON\n 五， 对可选及复杂参数使用查询字符串 # 保持URL简单, 使用基本URL，将复杂或可选参数移动到查询字符串。 GET /employees?state=internal\u0026amp;title=senior GET /employees?id=1,2 # 还可以使用JSON API方式过滤 GET /employees?filter[state]=internal\u0026amp;filter[title]=senior GET /employees?filter[id]=1,2 六， 使用 HTTP 状态码 status codes HTTP response status codes - HTTP | MDN\n状态码的使用要尽量精确。如果资源可用，但禁止用户访问，则返回 403。如果资源曾经存在但现已被删除或停用，请使用 410。\n七， 提供有用的错误消息 // request GET /epics?state=unknow // response { \u0026#34;errors\u0026#34;: [ { \u0026#34;status\u0026#34;: 400, \u0026#34;detail\u0026#34;: \u0026#34;Invalid state. Valid values are \u0026#39;biz\u0026#39; or \u0026#39;tech\u0026#39;\u0026#34;, \u0026#34;code\u0026#34;: 352, \u0026#34;links\u0026#34;: { \u0026#34;about\u0026#34;: \u0026#34;http://www.jira.com/rest/errorcode/352\u0026#34; } } ] } 八，HATEOAS - Provide Links for Navigating through your API // request GET /epic // 好的做法是在响应中提供客户可以跟进的链接 // response { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;epic1\u0026#34;, \u0026#34;links\u0026#34;: [ { \u0026#34;story\u0026#34;: \u0026#34;http://www.domain.com/epics/21/stories\u0026#34; } ] } ] } 优点：\n 如果 API 被更改，客户端依旧会获取有效的 URL（只要保证在 URL 更改时更新链接） API 变得更具自描述性，客户端不必经常查找文档  九， 恰当地设计关系 在 API 中设计关系基本上有三种常用选项：链接，侧载和嵌入。\nThere are basically three common options to design relationships within an API: Links, Sideloading and Embedding.\nBasically, you should design the relationships depending on the client\u0026rsquo;s access schema and the tolerable request amount and payload size.\nLinks: { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;relationships\u0026#34;: { \u0026#34;manager\u0026#34;: \u0026#34;http://www.domain.com/employees/1/manager\u0026#34;, \u0026#34;teamMembers\u0026#34;: [ \u0026#34;http://www.domain.com/employees/12\u0026#34;, \u0026#34;http://www.domain.com/employees/13\u0026#34; ] //or \u0026#34;teamMembers\u0026#34;: \u0026#34;http://www.domain.com/employees/1/teamMembers\u0026#34; } } ] }   Small payload size. : It\u0026rsquo;s good, if the client doesn\u0026rsquo;t need the manager and the teamManager every time.\n  Many Request. : It\u0026rsquo;s bad, if nearly every client needs this data. MANY additional requests may be required; in the worse case for every employee.\n  The client has to stitch the data together in order to get the big picture.\n  Sideloading: We can refer to the relationship with a foreign key and put the referred entitiese also in the payload but under the dedicated field included. This approach also called \u0026ldquo;Compound Documents\u0026rdquo;.\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;relationships\u0026#34;: { \u0026#34;manager\u0026#34;: 5, \u0026#34;teamMembers\u0026#34;: [12, 13] } } ], \u0026#34;included\u0026#34;: { \u0026#34;manager\u0026#34;: { \u0026#34;id\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Kevin\u0026#34; }, \u0026#34;teamMembers\u0026#34;: [ { \u0026#34;id\u0026#34;: 12, \u0026#34;name\u0026#34;: \u0026#34;Albert\u0026#34; }, { \u0026#34;id\u0026#34;: 13, \u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34; } ] } } The client may also control the sideloaded entities by a query parameter like GET /employee?include=manager,teamMembers.\n One singel request. Tailored payload size. No duplication (e.g. you only deliver a manager once even if he is referenced by many employees). The client still has to stitch the data together(拼接数据) in order to resolve the relationships. which can be very cumbersome.  Embedding: { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Larry\u0026#34;, \u0026#34;manager\u0026#34;: { \u0026#34;id\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Kev\u0026#34; }, \u0026#34;teamMembers\u0026#34;: [ { \u0026#34;id\u0026#34;: 12, \u0026#34;name\u0026#34;: \u0026#34;Albert\u0026#34; }, { \u0026#34;id\u0026#34;: 13, \u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34; } ] } ] }   Most conveninet for the client. It\u0026rsquo;s can directly follow the relationships to get the actual data.\n  Relationships may be loaded in vain if the client does not need it.\n  Increased payload size and duplications. Referenced entities may be embedded multiple times.(not so good)\n  十， 小驼峰法命名属性 - Use CamelCase for Attribute Names {\u0026quot;yearOfBirth\u0026quot;: 1970}\nDon not use underscores or capitalize (year_of_birth or YearOfBirth). Often the RESTful api will be consumed by a client written in JS. Typically the client wil convert the JSON response to a JS object( var person = JSON.parse(response) ) and call its attributes. Therefore, it\u0026rsquo;s a good idea to stick to the JS convention which makes the js code more readable and intuitive.\n// Don\u0026#39;t person.year_of_birth; // violates JavaScript convention person.YearOfBirth; // suggests constructor method  // Do person.yearOfBirth; 十一，用动词表示操作 - Use Verbs for Operations 有时对 API 调用的响应不涉及资源（如计算，转义或变换）。\nSometimes a response to an API call does not involve resources (like calculate, translate, or convert)\n//Reading GET /translate?from=de_DE\u0026amp;to=en_US\u0026amp;text=Hallo GET /calculate?para2=23\u0026amp;para2=432 //Trigger an operation that changes the server-side state POST /restartServer //no body POST /banUserFromChannel { \u0026#34;user\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;channel\u0026#34;: \u0026#34;serious-chat-channel\u0026#34; } In this case, no resource are involved. Instead, the server executes an operation and returns the result to the client.\nHence, we shoud use verbs instead of nouns in our URL to distinguish clearly the operations (RPC-style API) from the RESTful endpoints(resources for modelling the domain.)\nCreating those RPC-style API instead of REST is appropriate for operations. Usualy, it\u0026rsquo;s simpler and more intuitive than trying to be REST for operations (e.g. PATCH /server with {\u0026quot;restart\u0026quot;: true}). AS the rule of thumb, REST is nice for interacting with domain models and RPC is suitable for operations.\n Understanding RPC Vs REST For HTTP APIs — Smashing Magazine\n 十二， 分页 Provide Pagination It is almost never a good idea to return the whole data of your db at once.\nConsequently, you should provide a pagination mechanism. There are TWO popular approaches below:\n  Offset-based Pagination\n  Keyset-based Pagination (Continuation Token) aka CURSOR\u0026mdash;\u0026ndash; recommended.\n  Offset-based # use the parameters offset and limit, which are well-known from database  /employees?offset=30\u0026amp;limit=15 # returns the employees 30 to 45  # when the client omits the parameter, the server team should use default(like offset=0 and limit=100)  Never return all resources.\n You can provide links for getting the next or previous page. Just construct URLs with the appropriate offset and limit.\nGET /employees?offset=20\u0026amp;limit=10 { \u0026#34;pagination\u0026#34;: { \u0026#34;offset\u0026#34;: 20, \u0026#34;limit\u0026#34;: 10, \u0026#34;total\u0026#34;: 3465 }, \u0026#34;data\u0026#34;: [ //... ], \u0026#34;links\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;http://www.domain.com/employees?offset=30\u0026amp;limit=10\u0026#34;, \u0026#34;prev\u0026#34;: \u0026#34;http://www.domain.com/employees?offset=10\u0026amp;limit=10\u0026#34; } } Keyset-based Pagination aka continuation TOKEN, CURSOR (recommend) The presented offset-based pagination is easy to implement but comes with drawbacks. They are slow (SQL’s OFFSET clause becomes very slow for large numbers) and unsafe (it’s easy to miss elements when changes are happening during pagination).\n  SQL’s OFFSET clause becomes very slow for large numbers it’s easy to miss elements when changes are happening during pagination   # That’s why it’s better to use an indexed column. # Let’s assume that our employees have an indexed column data_created and the collection resource /employees?pageSize=100 returns the oldest 100 employees sorted by this column. # Client only has to take the dateCreated timestamp of the last employee and uses the query parameter createdSince to continue at this point. GET /employees?pageSize=100 # The client receives the oldest 100 employees sorted by `data_created` # The last employee of the page has the `dataCreated` field with 1504224000000 (= Sep 1, 2017 12:00:00 AM) GET /employees?pageSize=100\u0026amp;createdSince=1504224000000 # The client receives the next 100 employees since 1504224000000. # The last employee of the page was created on 1506816000000. And so on. This solves already many of the disadvantages of offset-based pagination, but it’s still not perfect and not very convenient for the client.\n It’s better to create a so-called continuation token by adding additional information (like the id) to the date in order to improve the reliability and efficiency. Moreover, you should provide a dedicated field in the payload for that token so the client doesn’t have to figure it out by looking at the elements. You can even go further and provide a next link.   Web API Pagination with the \u0026lsquo;Timestamp_ID\u0026rsquo; Continuation Token\n // request GET /employees?pageSize=100 // response { \u0026#34;pagination\u0026#34;: { \u0026#34;continuationToken\u0026#34;: \u0026#34;1504224000000_10\u0026#34; }, \u0026#34;data\u0026#34;: [ // ... // last element: { \u0026#34;id\u0026#34;: 10, \u0026#34;dateCreated\u0026#34;: 1504224000000 } ], \u0026#34;links\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;http://www.domain.com/employees?pageSize=100\u0026amp;continue=1504224000000_10\u0026#34; } } The next link makes the API RESTful as the client can page through the collection simply by following these links(HATEOAS). No need to construct URLs manually. Moreover, we can simply change the URL structure without breaking clients( called evolvability)\n十三， Check out JSON:API  JSON:API — A specification for building APIs in JSON\n Just for Inspiration. Feel free to make up your own mind about JSON:API.\n十四， 确保 API 的可演进 Ensure Evolvability of the APIs Avoid Breaking Changes Ideally, APIs should be stable. Basically, breaking changes should not happen.(like change the whole payload format or the URL scheme). SO how can we still evolve our API without breaking the clients:\n  保持向后兼容 Make backward-compatible changes.Adding field is no problem, as long as the clients are tolerant.\n  复制和弃用。Duplication and Deprecation. In order to cahnge an existing field, you can add the new one next to the old field and deprecated the old one in the documentation. After a while, you can remove the old field.\n  超媒体和 HATEOAS。Utilize Hypermedia and HATEOAS. As long as the API client uses the links in the response to navigate through the API (and doesn’t craft the URLs manually), you can safely change the URLs without breaking the clients.\n  使用新名称创建新资源。Create new resources with new names. If new business requirements lead to a completely new domain model and workflows, you can create new resources. That’s often quite intuitive as the domain model has a new name anyway (derived from the business name). Example: A rental service now also rents bikes and segways. So the old concept car with the resource /cars doesn’t cut it anymore. A new domain model vehicle with a new resource /vehicles is introduced. It’s provided along with the old /cars resource.\n  Keep Bussiness Logic on the Server-Side DO not let our service become a dump data access layer which provides CRUD functionality by directly exposing your databaes model. THIS creates HIGH COUPLING.\n  The bussiness logic is shifted to the client and is often replicated between the client and the server (just think about validation.). We have to keep both in sync.\n  The client will be coupling to the server\u0026rsquo;s database model. This is not good.\n  The business workflows are getting distributed between the client and the server. IN TURN, that makes it likely that new business requirements require a change in both the client and the server and to break API. So the API/system is not that evolvable.\n  因此，我们应该构建高层次/基于工作流的 API 而不是低级 API。 So we should build high-level/workflow-based APIs instead of low-level APIs. EXAMPLE:\nDon’t provide a simple CRUD service for the order entities in the database.\nDon’t require the clients to know that to cancel an order, the client has to PUT an order to the generic /order/1 resource with a certain cancelation payload (reflecting the database model) in it. This leads to high coupling (business logic and domain knowledge on the client-side; exposed database model).\nInstead, provide a dedicated resource /order/1/cancelation and add a link to it in the payload of the order resource. The client can navigate to the cancelation URL and send a tailored cancelation payload. The business logic for mapping this payload to the database model is done in the server.\nMoreover, the server can easily change the URL without breaking the client, because the client simply follows links. Besides, the decision logic, if an order can be canceled or not is now in the server: If a cancelation a possible the server adds the link to the cancelation resource in the order payload. So the client only has to check if the cancelation links are present (for example to know if he should draw the cancelation button). So we moved domain knowledge away from the client back to the server. Changes to the cancelation conditions can be easily applied by only touching the server, which in turn make the system evolvable. No API change is required.\n十五，版本化 Consider API Versioning Nevertheless, you might end up in situations where the above approaches don’t work and you really have to provide different versions of your API.\nNevertheless, here are the two most popular approaches for versioning:\n  Versioning via URLs: /v1/\n  Versioning via the Accept HTTP Header:\nAccept: application/vnd.myapi.v1+json   Versioning via URLs Just put the version number of your API in the URL of every resource. /v1/books.\n  Pros:\n Extremely simple for API developers. Extremely simple for API clients. URLs can be copied and pasted.    Cons:\n Not RESTful Breaking URLs. clients have to maintain and update the URLs.     Strictly speaking, this approach is not RESTful because URLs should never change.The question is, how much effort would it take the clients to update the URLs? If the answer is “only a little” then URL versioning might be fine.\n Versioning via Accept HTTP Header (Content Negotiation)   Pros:\n URLs keep the same Considered as RESTful HATEOAS-friendly    Cons:\n Slightly more difficult to use. Clients have to pay attention to the headers. URLs can’t be copied and pasted anymore.    Reference Richardson Maturity Model\nRestful API 设计最佳实践 - Tech For Fun\nRESTful API Design. Best Practices in a Nutshell.\nREST beyond the obvious – API design for ever evolving systems by Oliver Gierke @ Spring I/O 2018 - YouTube\n","date":"2021-09-11T15:14:04+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/cover-for-bestpractise_hu51089687c1fc9d12fc6b9e54035b4415_553553_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（四）"},{"content":"知识点五： Restful API 设计 1. Endpoint 表示 API 的具体地址\n在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中 不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的\u0026quot;集合\u0026quot;（collection），所以 API 中的名词也应该使用复数。\n# Example 应使用 HTTPs 协议 https://api.example.com/v1/books https://api.example.com/v1/movies 2. HTTP METHOD 对于资源的具体操作，应由 HTTP 动词表示。\n# 常用方法, (对应 SQL 语句) GET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE）：在服务器新建一个资源。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。 DELETE（DELETE）：从服务器删除资源。 # 具体的使用实例 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 3. Filtering 如果记录数量很大，服务器不可能将全部数据返回，此时，API 应提供参数，用于过滤返回结果。\n# 以下是一些常用参数 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page=2\u0026amp;per_page=100：指定第几页，以及每页的记录数。 ?sortby=name\u0026amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件  参数的设计允许存在冗余，例如：GET /zoo/ID/animals 等价于 GET /animals?zoo_id=ID\n 4. Status Code # 服务器向用户返回的状态码和提示信息,常用状态码如下： 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT - [DELETE]：用户删除数据成功。 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。  幂等 - 术语表 | MDN\n  HTTP response status codes - HTTP | MDN\n 5. Error Handling # 如果状态码是4xx，就应该向用户返回出错信息。 { error: \u0026quot;Invalid API key\u0026quot; } 6. 返回结果的规范 GET /collection：返回资源对象的列表（数组） GET /collection/resource：返回单个资源对象 POST /collection：返回新生成的资源对象 PUT /collection/resource：返回完整的资源对象 PATCH /collection/resource：返回完整的资源对象 DELETE /collection/resource：返回一个空文档 7. Hypermedia API (HATEOAS) RESTful API 最好做到 Hypermedia，即返回结果中提供链接，连向其他 API 方法，使得用户不查文档，也知道下一步应该做什么。\n# 比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。 {\u0026quot;link\u0026quot;: { \u0026quot;rel\u0026quot;: \u0026quot;collection https://www.example.com/zoos\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.example.com/zoos\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;List of zoos\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;application/vnd.yourformat+json\u0026quot; }} Hypermedia API 的设计被称为 HATEOAS。Github 的 API 就是这种设计，访问 https://api.github.com 会得到一个所有可用 API 的网址列表。\nReference RESTful API 设计指南\n","date":"2021-09-10T18:02:49+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/restful-design_hu2eb9b4a82207ed27ffff0ff503057274_1353210_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（三）"},{"content":"关键知识点四： Restful API What is REST REST is acronym for REpresentational State Transfer. It is architectural style for distributed hyermedia systems and was first presented by Roy Fielding in 2000 in his famous dissertation.\nPrinciples of REST   Client-server\n By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.    Stateless\n Each request from client to server must contain all of the information necessary to understand the request, and cannot take advatage of any stored context on the server. Session state is therefore kept entirely on the client.    Cacheable\n Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.    Uniform interface（统一接口）\n  By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. In order to obtain a uniform inerface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: identification of resources; manipulation of resources through representations; self-descriptive messages; and, hypermedia as the engine of application state.\n  identification of resources :使用URI作为资源标识符；客户端和服务器之间，传递这种资源的某种表现层（representation）; 资源本身与返回给 client 的 representation 分开(理解为：URI 只代表资源的实体或资源的位置， 不代表其形式，比如一段文本，可以是 json，HTML，etc)。例如，服务器不直接发送其数据库内容，而是发送一些表示某些数据库记录的 HTML，XML 或 JSON。 具体表现形式，应该在 HTTP 请求头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对\u0026quot;表现层\u0026quot;的描述\n  manipulation of the resources through representations: 当客户端持有资源的表示（包括附加的任何元数据）时，它有足够的信息来修改或删除服务器上的资源\n  Self-descriptive Messages （自描述信息）： 每条消息都包含足够的信息来描述如何处理该消息。\n  hypermedia as the engine of application state: client 通过 body/header/query_params/uri_name 来提供状态，服务器收到这些内容，通过 HTTP 响应状态码和响应头向服务端提供状态，成为超链接。且，在必要时，链接包含在返回的正文（或标题）中，以提供用于检索对象本身或相关对象的 URI。\n    Layered system\n  The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot \u0026ldquo;see\u0026rdquo; beyond the immedite layer with which they are interacting.\n  客户端通常无法判断它是直接连接到终端服务器，还是中间服务器。 中间服务器可以通过启用负载平衡和提供共享缓存来提高系统可伸缩性。 Layers 也可以实施安全策略。\n    Code on demand(optional)(唯一一个可选约束，其他约束必须实现)\n REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts(JS etc). This simplifies clients by reducing the number of features required to be pre-implemented.    Resource  The key abstraction of information in REST is a resource.\n Any information that can be named can be a resource. REST uses a resource indentifier to identify the particular resource involved in an interaction between comonents.\nREST 的名称\u0026quot;表现层状态转化\u0026quot;中，省略了主语。\u0026ldquo;表现层\u0026quot;其实指的是\u0026quot;资源\u0026rdquo;（Resources）的\u0026quot;表现层\u0026quot;。\n所谓\u0026quot;资源\u0026quot;，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个 URI（统一资源定位符）指向它，每种资源对应一个特定的 URI。要获取这个资源，访问它的 URI 就可以，因此 URI 就成了每一个资源的地址或独一无二的识别符。\nRepresentation \u0026ldquo;资源\u0026quot;是一种信息实体，它可以有多种外在表现形式。我们把\u0026quot;资源\u0026quot;具体呈现出来的形式，叫做它的\u0026quot;表现层\u0026rdquo;（Representation）。\nState Transfer 互联网通信协议 HTTP 协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生\u0026quot;状态转化\u0026quot;（State Transfer）。而这种转化是建立在表现层之上的，所以就是\u0026quot;表现层状态转化\u0026quot;。具体如下：\nResource Method  Another important thing associated with REST is resource methods to be used to perform the desired transition. A large number of people wrongly relate resource methods to HTTP GET/PUT/POST/DELETE methods.\n  GET 用来获取资源 POST 用来新建资源（也可以用于更新资源） PUT 用来更新资源 DELETE 用来删除资源   In simplest words, in the REST architectural style, data and functionality are considered resources and are accessed using Uniform Resource Identifiers (URIs). The resources are acted upon by using a set of simple, well-defined operations. The clients and servers exchange representations of resources by using a standardized interface and protocol – typically HTTP.\n  Resources are decoupled from their representation so that their content can be accessed in a variety of formats, such as HTML, XML, plain text, PDF, JPEG, JSON, and others. Metadata about the resource is available and used, for example, to control caching, detect transmission errors, negotiate the appropriate representation format, and perform authentication or access control. And most importantly, every interaction with a resource is stateless.\n ","date":"2021-09-09T20:17:16+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/cover-api_hud4b58edf642f350337f29ff97407729b_1122407_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（二）"},{"content":"第一章 知识点一： 用 create-react-app 初始化项目： 1. Quick Start npx create-react-app react-jira --template typescript # or npm init react-app react-jira # or yarn create react-app react-jira npx create-react-app my-app --use-npm # if you prefer to use npm 2. Folder Structure   For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won’t see them.\n  字体，图片等也同样应置于 scr 目录中\n  Only files inside public can be used from public/index.html.\n  import React, { Component } from \u0026#39;react\u0026#39;; import \u0026#39;./Button.css\u0026#39;; // Tell webpack that Button.js uses these styles  class Button extends Component { render() { // You can use them as regular CSS styles  return \u0026lt;div className=\u0026#39;Button\u0026#39; /\u0026gt;; } }     3. Analizing the Bundle Size npm install --save source-map-explorer or yarn add source-map-explorer // package.json \u0026#34;scripts\u0026#34;: { + \u0026#34;analyze\u0026#34;: \u0026#34;source-map-explorer \u0026#39;build/static/js/*.js\u0026#39;\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, } 知识点二： 用 Prettier 统一代码格式化风格 1. Quick Start yarn add --dev --exact prettier echo {}\u0026gt; .prettierrc.json # then create a .prettierignore file to let the Prettier CLI and editors know which files to not format.  # Ignore artifacts: build coverage 2. Usage In Command line npx prettier --write . # or yarn prettier --write . Setup In Editor Prettier set up in editor\nGit Hook (Pre-commit Hook) Pre-commit Hook · Prettier\nGit Commitlint commitlint - Lint commit messages\ncommitlint checks if your commit messages meet the conventional commit format.\nConventional Commits 约定式提交\n// 常用类型 type { \u0026#34;build\u0026#34;: \u0026#34;Changes that affect the build system or external dependencies\u0026#34; \u0026#34;ci\u0026#34;: \u0026#34;Changes to our CI configuration files and scripts\u0026#34; // \u0026#34;chore\u0026#34;: \u0026#34;updating grunt tasks etc; no production code change\u0026#34;,  \u0026#34;docs\u0026#34;: \u0026#34;Documentation only changes\u0026#34;, \u0026#34;feat\u0026#34;: \u0026#34;new feature for the user, not a new feature for build script\u0026#34;, \u0026#34;fix\u0026#34;: \u0026#34;A bug fix for user, not a fix to a build script\u0026#34;, \u0026#34;perf\u0026#34;: \u0026#34;A code change that impoves performance\u0026#34;, \u0026#34;refactor\u0026#34;: \u0026#34;A code change that neither fixes a bug nor adds a feature\u0026#34;, \u0026#34;revert\u0026#34;: \u0026#34;If the commit reverts a previous commit, it should begin with revert\u0026#34;, \u0026#34;style\u0026#34;: \u0026#34;Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons,etc)\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;Adding missing tests or correcting existing tests\u0026#34;, \u0026#34;BREAKING CHANGE:\u0026#34; }; type(scope?): subject #scope is optional; multiple scopes are supported (current delimiter options: \u0026quot;/\u0026quot;, \u0026quot;\\\u0026quot; and \u0026quot;,\u0026quot;) \n scope\n Example values: #\n init runner watcher config web-server proxy etc   why use conventional commits\n  Automatically generating CHANGELOGS Automatically determining a semantic version bump(base on the types of commits landed) Communicating the nature of changes to teammates, the public, and other stakeholders Triggering build and publish processes Making it easier for people to contribute to you projects, by allowing them to explore a more structured commit history  以上： 一个项目开始阶段的规范化配置。重点： Conventional Commits\n知识点三： Json-server typicode/json-server: Get a full fake REST API with zero coding\n","date":"2021-09-08T23:50:49+09:00","image":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/react-jira-cover_hu6fb94db3450be5959357d7afb44e190b_2444740_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/react17-reacthook-ts4-%E4%BB%BFjira%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/","title":"React17 + ReactHook + TS4 仿Jira项目---学习笔记（一）"},{"content":" Precondition: macOS Big Sur 11.5.2\n Golang\u0026rsquo;s installation and configuration with homebrew in Fish shell 1. Install golang with homebrew brew update brew search golang brew info golang # show the information of golang brew install golang 2. Setup the workspace: Add environment variables: First, we\u0026rsquo;ll need to tell Go the location of our workspace.\nWe\u0026rsquo;ll add some environment variables into shell config.\nbash or zsh The config files is located at home directory:\n.bash_profile, bashrc, or zshrc\nexport GOPATH=$HOME/project/go-workspace # don\u0026#39;t forget to change the path correctly export GOROOT=/usr/local/opt/go/libexec # export GOROOT=/usr/local/Cellar/go/1.17/libexec export PATH=$PATH:$GOPATH/bin export PATH=$PATH:$GOROOT/bin  GOPATH is the place where we get, build and install packages outside the standard Go tree(AND it\u0026rsquo;s not where the executables are), so it is customizable and thus you can get GOPATH wherever you want.\n  GOROOT, however, is the place where the Go binary distributions (In linux, it\u0026rsquo;s normally in /usr/local/go; but for macOs, the Go and the tools are installed in /usr/local/Cellar/go/1.17/libexec by default as well as a soft link to /usr/local/opt/go/libexec will be created at the same time), so on Linux normally we don’t have to set this variable, but on MacOS, we have to change it as brew installs Go tools to a different path.\n fish shell Add the code to home directory\u0026rsquo;s ~/.config/fish/config.fish:\nset -x GOPATH $HOME/project/go-workspace set -x GOROOT /usr/local/opt/go/libexec set -x PATH $PATH:$GOPATH/bin set -x PATH $PATH:$GOROOT/bin Create our own workspace: mkdir -p $GOPATH $GOPATH/src $GOPATH/pkg $GOPATH/bin\n  $GOPATH/src: where we put the go projects source code\n  $GOPATH/pkg: contains every package objects\n  $GOPATH/bin: The compiled binaries\u0026rsquo;s home.\n  ","date":"2021-09-07T23:46:37+09:00","image":"https://youkoucoding.github.io/p/golang-config/cover_hu6ff3cfb4de7da3a30b555c53fec82c73_1051665_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/golang-config/","title":"Install Go on Mac with Homebrew"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片  Photo by Florian Klauer on Unsplash   Photo by Luca Bravo on Unsplash \n Photo by Helena Hertz on Unsplash   Photo by Hudai Gayiran on Unsplash \n![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://youkoucoding.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://youkoucoding.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","date":"2019-03-10T00:00:00Z","permalink":"https://youkoucoding.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://youkoucoding.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://youkoucoding.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://youkoucoding.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://youkoucoding.github.io/p/emoji-support/","title":"Emoji Support"}]